name: cooljeanius/apple-gdb-1824
on:
  push:
    branches:
      - "**/*"
  pull_request:
jobs:
  test:
    runs-on: ubuntu-20.04
    steps:
    - name: checkout
      uses: actions/checkout@v4
#     # 'Transformers::TravisCI::Scripts::Dependencies' dependencies are currently unsupported
#     # 'compiler' was not transformed because there is no suitable equivalent in GitHub Actions
    - run: sudo apt-get update
    - run: sudo apt-get install --fix-missing autogen gobjc gobjc++ gobjc-multilib gobjc++-multilib libopts25 libopts25-dev texinfo flex flex-doc binutils binutils-dev binutils-multiarch pax binutils-gold libcurses-perl dejagnu expect expect-dev libexpect-perl guile-2.0 guile-2.0-libs guile-2.2 guile-2.2-dev guile-2.2-libs guile-3.0 guile-3.0-dev guile-3.0-libs libguile-ssh11 tclreadline m4 xutils-dev gfortran gfortran-multilib gfortran-7 gfortran-7-multilib gfortran-mingw-w64 gccgo gccgo-multilib libdmalloc-dev libdmalloc5 gnulib fastjar gdb gdbserver autopoint gperf help2man libextutils-f77-perl emacs sharutils texlive latex2html ddd xterm x11-utils ${{ matrix.compiler }} gnat ratfor libmpfr-dev libmpfi-dev libmpc-dev libgmp-dev libmath-mpfr-perl libmpfrc++-dev f2c libbsd0 libbsd-dev freebsd-glue libieee1284-3 libieee1284-3-dev fort77 libiconv-hook1 libiconv-hook-dev win-iconv-mingw-w64-dev libltdl7 libltdl-dev libasprintf-dev libgettextpo-dev tix tix-dev splint comprez cxref cxref-emacs exuberant-ctags universal-ctags texi2html
    - run: test -e ./.profile_generic && test -r ./.profile_generic && sync && source ./.profile_generic && sync && (env | uniq | sort | uniq) && sync && sleep 1 && sync
    - run: cd src && ./configure --with-x --disable-werror --disable-opts-test --enable-64-bit-bfd --enable-silent-rules --with-system-zlib CC=${{ matrix.compiler }} OBJC=${{ matrix.compiler }}
    - run: cd src && make configure-bfd
    - run: cd src && sync && make -C bfd headers && sync && make -C bfd stamp-framework-headers && sync && (ls bfd/bfd*.h || stat bfd) && sync && sleep 1 && sync
    - run: cd src && if test ! -e bfd/bfd.h; then (sync && make -C bfd bfd.h && sync && sleep 1); else (sync && stat bfd/bfd.h && sync && sleep 1); fi && sync && find . -name bfd.h -print && sleep 1 && sync
    - run: cd src && if test -e autogen/Makefile; then (sync && make -C autogen && sync && sleep 1); elif test -d autogen; then (sync && echo "listing autogen Makefiles present" && sync && ls autogen/Makefile* && sync && sleep 1); else (sync && echo "skipping autogen" && sync && sleep 1); fi
    - run: cd src && make -C bfd diststuff
    - run: cd src && make all-bfd
    - run: cd src && make all-opcodes
    - run: cd src && make configure-binutils
    - run: cd src && make info-binutils && sync && make dvi-binutils && sync && make TAGS-binutils
    - run: cd src && make all-cgen
    - run: cd src && sync && make all-libiberty && sync && make all-intl && sync
    - run: cd src && make all-electric-fence
    - run: cd src && make all-etc
    - run: cd src && make all-libdecnumber
    - run: cd src && make all-mmalloc
    - run: cd src && make configure-readline
    - run: cd src && for dir in libtool_gnu sim utils tcl expect dejagnu itcl tk libgui; do if test -e ${dir}/configure; then (echo "configuring in ${dir}" && make configure-${dir} && echo "done configuring in ${dir}"); elif test -d ${dir}; then ls ${dir}/configure*; else echo "skipping configuring in ${dir}"; fi; done
    - run: cd src && for dir in sim utils tcl expect dejagnu itcl tk libgui; do if test -e ${dir}/Makefile; then (echo "building in ${dir}" && make -C ${dir}); elif test -d ${dir}; then ls ${dir}/Makefile*; else echo "skipping ${dir}"; fi; done
    - run: cd src && make configure-gdb
    - run: cd src && make info-gdb && sync && make pdf-gdb && sync && make html-gdb && sync && make TAGS-gdb
    - run: cd src && make check-libiberty
    - run: cd src && sync && make -C tcl/unix tcltest && sync
    - run: cd src && for dir in sim itcl; do if test -e ${dir}/Makefile; then (echo "running testsuite for ${dir}" && make check-${dir} V=0 RUNTESTFLAGS="-v" && sleep 1); elif test -d ${dir}; then ls ${dir}/Makefile*; else echo "skipping testing ${dir}"; fi; done
    - run: cd src/utils && for dir in misc msdos spu sparclite wince; do if test -e ${dir}/Makefile; then (echo "in $(pwd), and running testsuite for ${dir}" && make check-${dir} V=0 RUNTESTFLAGS="-v" && sleep 1); elif test -d ${dir}; then ls ${dir}/Makefile*; else echo "in $(pwd), skipping testing ${dir}"; fi; done
    - run: (time (pwd && sync && ls && sync && stat . && sync)) && sleep 1 && echo "done"
      if: "${{ success() }}"
    - name: Upload a Build Artifact
      uses: actions/upload-artifact@v4.3.2
      if: "${{ success() }}"
      with:
        # Artifact name
        name: apple-gdb-1824-${{ matrix.compiler }}-logfiles
        # A file, directory or wildcard pattern that describes what to upload
        path: |
            **/*.log
    - run: find . -name config.log -print0 | xargs -0 cat | grep -i error | sort | uniq
      if: "${{ failure() }}"
    strategy:
      fail-fast: false
      matrix:
        compiler:
        - clang
        - gcc
