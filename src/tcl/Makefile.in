# Minimal top-level Makefile. Just pass everything to the $(CONFIGDIR)
# subdir.
# Tom Tromey <tromey@cygnus.com>

ACLOCAL_AMFLAGS = -I m4 --install

AUTOCONF = @AUTOCONF@

CONFIGDIR=@CONFIGDIR@
CONFIGDIR2=@CONFIGDIR2@

MKDIR_P = @MKDIR_P@

SUBDIRS = $(CONFIGDIR) $(CONFIGDIR2)

VPATH = @srcdir@
SHELL = @SHELL@
SED = @SED@
SRC_DIR = @srcdir@

BUILD_ARCHITECTURE = @BUILD_ARCHITECTURE@
HOST_ARCHITECTURE = @HOST_ARCHITECTURE@
TARGET_ARCHITECTURE = @TARGET_ARCHITECTURE@
C_ARCHFLAGS = @C_ARCHFLAGS@
CFLAGS = @CFLAGS@ $(C_ARCHFLAGS)

TIMEOUT = @TIMEOUT@

@SET_MAKE@

all: $(CONFIGDIR)/Makefile
	@cd $(CONFIGDIR) && $(MAKE) $@ CFLAGS="@CFLAGS@ $(C_ARCHFLAGS)"
	@test x"$(CONFIGDIR2)" = x"" || (cd "$(CONFIGDIR2)" && $(MAKE) $@)

$(CONFIGDIR)/Makefile: $(CONFIGDIR)/config.status
	@cd $(CONFIGDIR) && ./config.status

# TODO: pass along configure flags:
$(CONFIGDIR)/config.status: $(CONFIGDIR)/configure
	@cd $(CONFIGDIR) && ./configure

# FIXME: install-binaries
install test install-binaries install-libraries install-minimal:
	@cd $(CONFIGDIR) && $(MAKE) $@

mostlyclean-recursive clean-recursive distclean-recursive \
maintainer-clean-recursive:
	@if test x"$(CONFIGDIR)" != x"" && test -r $(CONFIGDIR)/Makefile; then \
	  echo "$@: entering CONFIGDIR $(CONFIGDIR)"; \
	  cd $(CONFIGDIR) && $(MAKE) `echo $@ | $(SED) 's/-recursive//'`; \
	else \
	  echo "Makefile missing for $(CONFIGDIR); skipping $@ target for it"; \
	fi
	@if test x"$(CONFIGDIR2)" != x"" && test -r $(CONFIGDIR2)/Makefile; then \
	  echo "$@: entering CONFIGDIR2 $(CONFIGDIR2)"; \
	  cd "$(CONFIGDIR2)" && $(MAKE) `echo $@ | $(SED) 's/-recursive'`; \
	else \
	  echo "Makefile missing for $(CONFIGDIR2); skipping $@ target for it"; \
	fi

configure:
	cd $(SRC_DIR) && $(AUTOCONF)

mostlyclean: mostlyclean-recursive

clean: clean-recursive

distclean-local:
	rm -f config.cache config.log config.h
	rm -f autoscan.log *~
	rm -rf autom4te.cache || rmdir autom4te.cache

distclean: distclean-recursive distclean-local
	if test -e Makefile; then rm -f Makefile; fi
	if test -e config.status; then rm -f config.status; fi

maintainer-clean: distclean-local maintainer-clean-recursive
	@echo "This command is intended for maintainers to use"
	@echo "it deletes files that may require special tools to rebuild."
	-if test -d $(DEJAGNUDIR)/$(CONFIGDIR) && test -w $(DEJAGNUDIR)/$(CONFIGDIR) && test -e $(DEJAGNUDIR)/$(CONFIGDIR)/tcltest; then \
	  rm -fv $(DEJAGNUDIR)/$(CONFIGDIR)/tcltest; \
	fi

#----------------------------------------------------------------
# These let the DejaGnu test suite run when DejaGnu is NOT
# installed yet, so run it from the srcdir and objdir.
#----------------------------------------------------------------
EXPECT = ` \
  if [ -f $${rootme}/../expect/expect ]; then \
    echo $${rootme}/../expect/expect; \
  else echo expect; fi`

RUNTESTFLAGS =
DEJAGNUDIR = $(SRC_DIR)/../dejagnu
RUNTEST = ` \
  if [ -f $(DEJAGNUDIR)/runtest ]; then \
    echo $(DEJAGNUDIR)/runtest; \
  else echo runtest;  fi`

check: $(CONFIGDIR)/Makefile
	@echo "CONFIGDIR is $(CONFIGDIR); making tcltest in it..."
	cd $(CONFIGDIR) && $(MAKE) tcltest
	if test "x$(CONFIGDIR)" != "x$(DEJAGNUDIR)"; then \
	  if test -e $(CONFIGDIR)/tcltest && test ! -e $(DEJAGNUDIR)/$(CONFIGDIR)/tcltest; then \
	    if test ! -d $(DEJAGNUDIR)/$(CONFIGDIR); then \
	      $(MKDIR_P) -v $(DEJAGNUDIR)/$(CONFIGDIR); \
	    fi; \
	    cp -v $(CONFIGDIR)/tcltest $(DEJAGNUDIR)/$(CONFIGDIR)/tcltest; \
	  fi; \
	fi
	rootme="`pwd`"; echo "rootme is $${rootme}" && export rootme; \
	srcdir="${SRC_DIR}"; echo "srcdir is $${srcdir}" && export srcdir; \
	EXPECT=${EXPECT}; echo "EXPECT is $${EXPECT}" && export EXPECT; \
	if [ -f $${rootme}/../expect/expect ]; then  \
	   TCL_LIBRARY=`cd $${srcdir}/library && pwd`; \
	   echo "TCL_LIBRARY is $${TCL_LIBRARY}" && export TCL_LIBRARY; \
	else \
	   echo "$${rootme}/../expect/expect is missing; skipping setting TCL_LIBRARY here..."; \
	fi; \
	if test "x$(TIMEOUT)" != "x"; then \
	  $(TIMEOUT) --preserve-status --kill-after=5m -v 3m $(RUNTEST) $(RUNTESTFLAGS) --tool tcl --srcdir $(SRC_DIR)/testsuite; \
	else \
	  $(RUNTEST) $(RUNTESTFLAGS) --tool tcl --srcdir $(SRC_DIR)/testsuite; \
	fi

install-info info installcheck:

Makefile: Makefile.in config.status
	CONFIG_FILES=Makefile CONFIG_HEADERS="" $(SHELL) ./config.status

config.status: configure
	if test -n "$${CPP}"; then unset CPP; fi; $(SHELL) config.status --recheck

am--refresh:
	@true
.PHONY: am--refresh

