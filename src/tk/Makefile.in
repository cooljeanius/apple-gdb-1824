# Minimal top-level Makefile.  Just pass everything to the $(CONFIGDIR)
# subdir.
# Tom Tromey <tromey@cygnus.com>

CONFIGDIR=@CONFIGDIR@

VPATH = @srcdir@
SHELL = @SHELL@
srcdir = @srcdir@
datarootdir = @datarootdir@

BUILD_ARCHITECTURE = @BUILD_ARCHITECTURE@
HOST_ARCHITECTURE = @HOST_ARCHITECTURE@
TARGET_ARCHITECTURE = @TARGET_ARCHITECTURE@
C_ARCHFLAGS = @C_ARCHFLAGS@
CFLAGS = @CFLAGS@ $(C_ARCHFLAGS)

@SET_MAKE@

all install install-binaries install-libraries install-minimal:
	@if test -d $(CONFIGDIR) && test -r $(CONFIGDIR)/Makefile; then \
	  cd $(CONFIGDIR) && $(MAKE) -w $@; \
	else \
	  sync && echo "`pwd`: skipping recursing into $(CONFIGDIR) for $@"; \
	fi

# Nothing for these yet.
installcheck install-info info:

mostlyclean-recursive clean-recursive distclean-recursive \
maintainer-clean-recursive:
	@if test -d $(CONFIGDIR) && test -r $(CONFIGDIR)/Makefile; then \
	  cd $(CONFIGDIR) && $(MAKE) -w `echo $@ | sed 's/-recursive//'`; \
	else \
	  sync && echo "`pwd`: skipping recursing into $(CONFIGDIR) for $@"; \
	fi

# Do NOT depend on configure.ac, because we cannot ensure that the user
# has autoconf, unless they are a maintainer.
configure: @MAINT@ configure.ac
	if test -d $(srcdir) && test -w $(srcdir); then \
	  pushd $(srcdir); \
	  if test -r configure.ac; then \
	    if test ! -e configure || test configure -ot configure.ac; then \
	      autoconf || (if test -e $@~; then mv -v $@~ $@; fi); \
	    fi; \
	  elif test -e configure~ && test ! -e configure; then \
	    mv -v configure~ configure; \
	  fi; \
	  popd; \
	elif test "x$(srcdir)" != "x."; then \
	  if test ! -e configure || test configure -ot $(srcdir)/configure; then \
	    cp -v $(srcdir)/configure .; \
	  fi; \
	fi

mostlyclean: mostlyclean-recursive

clean: clean-recursive
	for suff in o exe log sum; do \
	  if test -r tk.$${suff} && (test -w tk.$${sum} || test -w .); then \
	    rm -fv tk.$${suff}; \
	  elif test -e tk.$${suff}; then \
	    echo "leaving tk.$${suff} alone" && stat tk.$${suff}; \
	  fi; \
	done

distclean-local:
	rm -f Makefile config.status config.cache
	rm -fv *~ *.cache.bak *.o *.exe *.log *.sum
	rm -rfv autom4te.cache || rmdir autom4te.cache

distclean: distclean-recursive distclean-local

maintainer-clean: distclean-local maintainer-clean-recursive

Makefile: Makefile.in config.status
	CONFIG_FILES=Makefile CONFIG_HEADERS="" $(SHELL) ./config.status

config.status: configure
	$(SHELL) config.status --recheck

#----------------------------------------------------------------
# These let the DejaGnu test suite run when DejaGnu isn't 
# installed yet, so run it from the srcdir and objdir.
#----------------------------------------------------------------
EXPECT = ` \
  if [ -f $${rootme}/../expect/expect ]; then \
    echo $${rootme}/../expect/expect; \
  else echo expect; fi`

RUNTESTFLAGS =
RUNTEST = ` \
  if [ -f $(srcdir)/../dejagnu/runtest ]; then \
    echo $(srcdir)/../dejagnu/runtest; \
  else echo runtest; fi`

check:
	cd $(CONFIGDIR) && $(MAKE) tktest
	rootme=`pwd`; export rootme; \
	srcdir=${srcdir}; export srcdir; \
	EXPECT=${EXPECT}; export EXPECT; \
	if [ -f $${rootme}/../expect/expect ]; then  \
	   TCL_LIBRARY=`cd $${srcdir}/../tcl/library && pwd`; \
	   export TCL_LIBRARY; \
	   TK_LIBRARY=`cd $${srcdir}/library && pwd`; \
	   export TK_LIBRARY; \
	fi; \
	$(RUNTEST) $(RUNTESTFLAGS) --tool tk --srcdir $(srcdir)/testsuite
