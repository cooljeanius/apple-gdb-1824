##Copyright 1991, 1992, 1993, 1994, 1995, 1996, 1999, 2000, 2002, 2003
##Free Software Foundation, Inc.

# Makefile for GDB documentation.
# This file is part of GDB.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place: Suite 330, Boston, MA 02111-1307, USA.

ACLOCAL_AMFLAGS = -I../m4 --install

srcdir = @srcdir@
VPATH = @srcdir@

prefix = @prefix@

datarootdir = @datarootdir@
infodir = @infodir@
docdir = @docdir@
pdfdir = @pdfdir@
htmldir = $(prefix)/html
configured_htmldir = @htmldir@
mandir = @mandir@
man1dir = $(mandir)/man1
man5dir = $(mandir)/man5

SHELL = @SHELL@

FGREP = @FGREP@
LN_S = @LN_S@
MKDIR_P = @MKDIR_P@
SED = @SED@

INSTALL = @INSTALL@
INSTALL_PROGRAM = @INSTALL_PROGRAM@
INSTALL_DATA = @INSTALL_DATA@

SYSTEM_GDBINIT = @SYSTEM_GDBINIT@

mkinstalldirs = $(SHELL) $(srcdir)/../../mkinstalldirs

# main GDB source directory:
gdbdir = $(srcdir)/..

# where to find texinfo; GDB dist should include a recent one
TEXIDIR=${gdbdir}/../texinfo

# where to find makeinfo, preferably one designed for texinfo-2
MAKEINFO=makeinfo

CONFIGURED_MAKEINFO = @MAKEINFO@
MAKEINFOFLAGS = @MAKEINFOFLAGS@
MAKEINFO_EXTRA_FLAGS = @MAKEINFO_EXTRA_FLAGS@
MAKEINFO_CMD = $(CONFIGURED_MAKEINFO) $(MAKEINFOFLAGS) $(MAKEINFO_EXTRA_FLAGS)

## automake-style verbosity control:
V = @V@
AM_V_v = $(am__v_v_@AM_V@)
am__v_v_ = $(am__v_v_@AM_DEFAULT_V@)
am__v_v_0 =
am__v_v_1 = -v

AM_V_redir = $(am__v_redir_@AM_V@)
am__v_redir_ = $(am__v_redir_@AM_DEFAULT_V@)
am__v_redir_0 = >
am__v_redir_1 = | tee

AM_V_redir_a = $(am__v_redir_a_@AM_V@)
am__v_redir_a_ = $(am__v_redir_a_@AM_DEFAULT_V@)
am__v_redir_a_0 = >>
am__v_redir_a_1 = | tee -a

# Note that texinfo 4.0's makeinfo --html can only generate a
# single file, which would be too large, so continue to use
# texi2html. -sts 2000-03-28

MAKEHTML = texi2html
MAKEHTMLFLAGS = -menu -split_chapter
MAKEHTML_LIKE_INFO = $(MAKEINFO_CMD) --html
MAKEHTMLNEWFLAGS = --verbose --force

# where to find texi2roff, ditto
TEXI2ROFF=texi2roff

# where to find texi2dvi, ditto
TEXI2DVI=texi2dvi

# Package to install the docs under
PACKAGE = @PACKAGE@

# Package version and bug-reporting URL.
PKGVERSION = @PKGVERSION@
BUGURL_TEXI = @REPORT_BUGS_TEXI@

# Where is the source dir for the READLINE library doc?  
# Traditionally readline is in .. or .
READLINE_DIR = ${gdbdir}/../readline/doc
READLINE_TEXI_INCFLAG = @READLINE_TEXI_INCFLAG@

# The GDB/MI docs come from a sibling directory ../mi
GDBMI_DIR = ${gdbdir}/mi

SET_TEXINPUTS = \
   TEXINPUTS=${TEXIDIR}:.:$(srcdir):$(READLINE_DIR):$(GDBMI_DIR):$${TEXINPUTS}

# Files which should be generated via 'info' & installed by 'install-info'
INFO_DEPS = gdb.info gdbint.info stabs.info annotate.info

# Files which should be generated via 'pdf' & installed by 'install-pdf'
PDFFILES = gdb.pdf gdbint.pdf stabs.pdf refcard.pdf annotate.pdf
# Files which should be generated via 'html' & installed by 'install-html'
HTMLFILES =  gdb/index.html stabs/index.html annotate/index.html
HTMLFILES_INSTALL = gdb stabs annotate

# There may be alternate predefined collections of switches to configure
# the GDB manual.  Normally this is not done in synch with the software
# config system, since this choice tends to be independent; most people
# want a doc config of `all' for a generic manual, regardless of sw config.
DOC_CONFIG = all

# This list of sed edits will edit the GDB reference card
# for what fonts and what papersize to use.
# By default (NO edits applied), the refcard uses:
#    - Computer Modern (CM) fonts
#    - US letter paper (8.5x11in)
# List some of the following files for alternative fonts and paper:
#  a4rc.sed     use A4 paper (297 x 210 mm)
#  psrc.sed     use PostScript fonts (Karl Berry short TeX names)
# lpsrc.sed     use PostScript fonts (full PostScript names in TeX)
# e.g. for A4, Postscript:  REFEDITS = a4rc.sed psrc.sed
#      for A4, CM fonts:    REFEDITS = a4rc.sed
#      for US, PS fonts:    REFEDITS = psrc.sed
#      for default:
REFEDITS =

# Don Knuth's TeX formatter
TEX = tex
PDFTEX = pdftex

# Program to generate Postscript files from DVI files.
DVIPS = dvips

# Main GDB manual
# Note that this unconditionally includes the readline texi files,
# even when --with-system-readline is used.  This is harmless because
# these are only used as dependencies.
GDB_DOC_SOURCE_INCLUDES = \
	$(srcdir)/fdl.texi \
	$(srcdir)/gpl.texi \
	$(srcdir)/agentexpr.texi \
	$(READLINE_DIR)/rluser.texinfo \
	$(READLINE_DIR)/inc-hist.texinfo
GDB_DOC_BUILD_INCLUDES = \
	gdb-cfg.texi \
	GDBvn.texi
GDB_DOC_FILES = \
	$(srcdir)/gdb.texinfo \
	$(srcdir)/guile.texi \
	$(srcdir)/python.texi \
	$(GDB_DOC_SOURCE_INCLUDES) \
	$(GDB_DOC_BUILD_INCLUDES)

# Internals Manual
GDBINT_DOC_SOURCE_INCLUDES = \
	$(srcdir)/fdl.texi \
	$(srcdir)/observer.texi
GDBINT_DOC_BUILD_INCLUDES = \
	gdb-cfg.texi \
	GDBvn.texi
GDBINT_DOC_FILES = \
	$(srcdir)/gdbint.texinfo \
	$(GDBINT_DOC_SOURCE_INCLUDES) \
	$(GDBINT_DOC_BUILD_INCLUDES)

# Stabs manual: All files
STABS_DOC_SOURCE_INCLUDES = \
	$(srcdir)/fdl.texi
STABS_DOC_BUILD_INCLUDES =
STABS_DOC_FILES = \
	$(srcdir)/stabs.texinfo \
	$(STABS_DOC_SOURCE_INCLUDES) \
	$(STABS_DOC_BUILD_INCLUDES)

# Annotate migration document
ANNOTATE_DOC_SOURCE_INCLUDES = \
	$(srcdir)/fdl.texi
ANNOTATE_DOC_BUILD_INCLUDES = \
	gdb-cfg.texi \
	GDBvn.texi
ANNOTATE_DOC_FILES = \
	$(srcdir)/annotate.texinfo \
	$(ANNOTATE_DOC_SOURCE_INCLUDES) \
	$(ANNOTATE_DOC_BUILD_INCLUDES)

# Options to extract the man page from gdb.texinfo
MANCONF = -Dman

TEXI2POD = perl $(srcdir)/../../etc/texi2pod.pl \
		$(MAKEINFOFLAGS) $(MAKEINFO_EXTRA_FLAGS)

POD2MAN1 = pod2man --center="GNU Development Tools" \
		   --release="gdb-`$(SED) q version.subst`" --section=1
POD2MAN5 = pod2man --center="GNU Development Tools" \
		   --release="gdb-`$(SED) q version.subst`" --section=5

# List of man pages generated from gdb.texi
MAN1S = gdb.1 gdbserver.1 gcore.1
MAN5S = gdbinit.5
MANS = $(MAN1S) $(MAN5S)

# Host-dependent makefile fragment comes in here.
@host_makefile_frag@
# End of host-dependent makefile fragment
HAVE_NATIVE_GCORE_TARGET = @HAVE_NATIVE_GCORE_TARGET@

#### Host, target, and site specific Makefile fragments come in here.
###

all:

info: $(INFO_DEPS)
dvi: gdb.dvi gdbint.dvi stabs.dvi refcard.dvi annotate.dvi
ps: gdb.ps gdbint.ps stabs.ps refcard.ps annotate.ps
html: gdb_toc.html gdbint_toc.html stabs_toc.html annotate_toc.html
html-local: $(HTMLFILES)
pdf: $(PDFFILES)
man: $(MANS)

DOXYGEN = doxygen
doxyedit = $(SED) -e 's,@srcdir\@,$(srcdir),g'

doxy:	doxy/index.html \
	doxy/gdb-api/index.html \
	doxy/gdb-xref/index.html \
	doxy/gdbserver/index.html

doxy/index.html: $(srcdir)/doxy-index.in
	-$(MKDIR_P) $(AM_V_v) doxy
	cp $(AM_V_v) $(srcdir)/doxy-index.in doxy/index.html

doxy/gdb-api/index.html: Doxyfile-gdb-api Doxyfile-base
	-$(MKDIR_P) $(AM_V_v) doxy
	$(DOXYGEN) Doxyfile-gdb-api

doxy/gdb-xref/index.html: Doxyfile-gdb-xref Doxyfile-base
	-$(MKDIR_P) $(AM_V_v) doxy
	$(DOXYGEN) Doxyfile-gdb-xref

doxy/gdbserver/index.html: Doxyfile-gdbserver Doxyfile-base
	-$(MKDIR_P) $(AM_V_v) doxy
	$(DOXYGEN) Doxyfile-gdbserver

Doxyfile-base:	$(srcdir)/Doxyfile-base.in 
	$(doxyedit) $(srcdir)/Doxyfile-base.in > Doxyfile-base

Doxyfile-gdb-api:	$(srcdir)/Doxyfile-gdb-api.in 
	$(doxyedit) $(srcdir)/Doxyfile-gdb-api.in > Doxyfile-gdb-api

Doxyfile-gdb-xref:	$(srcdir)/Doxyfile-gdb-xref.in
	$(doxyedit) $(srcdir)/Doxyfile-gdb-xref.in > Doxyfile-gdb-xref

Doxyfile-gdbserver:	$(srcdir)/Doxyfile-gdbserver.in
	$(doxyedit) $(srcdir)/Doxyfile-gdbserver.in > Doxyfile-gdbserver

all-doc: info dvi ps @MAINT@ pdf
diststuff: info man
	rm -f $(AM_V_v) gdb-cfg.texi GDBvn.texi

install-info: $(INFO_DEPS)
	$(SHELL) $(srcdir)/../../mkinstalldirs $(DESTDIR)$(infodir)
	@list='$(INFO_DEPS)'; \
	for file in $${list}; do \
	  if test -f $${file}; then d="."; else d=$(srcdir); fi; \
	  for ifile in `cd $${d} && echo $${file} $$file-[0-9] $$file-[0-9][0-9]`; do \
	    if test -f $${d}/$${ifile}; then \
	      echo " $(INSTALL_DATA) $${d}/$${ifile} $(DESTDIR)$(infodir)/$${ifile}"; \
	      $(INSTALL_DATA) $${d}/$${ifile} $(DESTDIR)$(infodir)/$${ifile}; \
	    else echo "nothing to do for $${ifile}"; fi; \
	  done; \
	done
	$(POST_INSTALL)
	@if $(SHELL) -c 'install-info --version | $(SED) 1q | $(FGREP) -s -v -i debian' >/dev/null 2>&1; then \
	  list='$(INFO_DEPS)'; \
	  for file in $${list}; do \
	    echo " install-info --info-dir=$(DESTDIR)$(infodir) $(DESTDIR)$(infodir)/$${file}";\
	    install-info --info-dir=$(DESTDIR)$(infodir) $(DESTDIR)$(infodir)/$${file} || echo "...or not";\
	  done; \
	else echo "nothing to do for $${file}"; fi

uninstall-info:
	$(PRE_UNINSTALL)
	@if $(SHELL) -c 'install-info --version | $(SED) 1q | $(FGREP) -s -v -i debian' >/dev/null 2>&1; then \
	  ii=yes; \
	else ii=""; fi; \
	list='$(INFO_DEPS)'; \
	for file in $${list}; do \
	  test -z "$${ii}" \
	    || install-info --info-dir=$(DESTDIR)$(infodir) --remove $${file}; \
	done
	$(NORMAL_UNINSTALL)
	list='$(INFO_DEPS)'; \
	for file in $${list}; do \
	  (cd $(DESTDIR)$(infodir) && rm -f $(AM_V_v) $${file} $$file-[0-9] $$file-[0-9][0-9]); \
	done

html__strip_dir = `echo $${p} | $(SED) -e 's|^.*/||'`;

install-html: html $(HTMLFILES)
	@$(NORMAL_INSTALL)
	test -z "$(htmldir)" || $(mkinstalldirs) "$(DESTDIR)$(htmldir)"
	@list='$(HTMLFILES_INSTALL)'; for p in $${list}; do \
	  if test -f "$${p}" || test -d "$${p}"; then d=""; else d="$(srcdir)/"; fi; \
	  f=$(html__strip_dir) \
	  if test -d "$${d}$${p}"; then \
	    echo " $(mkinstalldirs) '$(DESTDIR)$(htmldir)/$${f}'"; \
	    $(mkinstalldirs) "$(DESTDIR)$(htmldir)/$${f}" || exit 1; \
	    echo " $(INSTALL_DATA) '$${d}$${p}'/* '$(DESTDIR)$(htmldir)/$${f}'"; \
	    $(INSTALL_DATA) "$${d}$${p}"/* "$(DESTDIR)$(htmldir)/$${f}"; \
	  else \
	    echo " $(INSTALL_DATA) '$${d}$${p}' '$(DESTDIR)$(htmldir)/$${f}'"; \
	    $(INSTALL_DATA) "$${d}$${p}" "$(DESTDIR)$(htmldir)/$${f}"; \
	  fi; \
	done
	for i in *.html ; do \
	  if test ! -e $(DESTDIR)$(htmldir)/$${i} -a -f $${i}; then \
	    $(INSTALL_DATA) $${i} $(DESTDIR)$(htmldir)/$${i}; \
	  fi; \
	done

pdf__strip_dir = `echo $${p} | $(SED) -e 's|^.*/||'`;

install-pdf: $(PDFFILES)
	@$(NORMAL_INSTALL)
	test -z "$(pdfdir)" || $(mkinstalldirs) "$(DESTDIR)$(pdfdir)"
	@list='$(PDFFILES)'; for p in $${list}; do \
	  if test -f "$${p}"; then d=""; else d="$(srcdir)/"; fi; \
	  f=$(pdf__strip_dir) \
	  echo " $(INSTALL_DATA) '$${d}$${p}' '$(DESTDIR)$(pdfdir)/$${f}'"; \
	  $(INSTALL_DATA) "$${d}$${p}" "$(DESTDIR)$(pdfdir)/$${f}"; \
	done

install-man: install-man1 install-man5

install-man1: $(MAN1S)
	test -z "$(man1dir)" || $(mkinstalldirs) "$(DESTDIR)$(man1dir)"
	@list='$(MAN1S)'; for p in $${list}; do \
	  if test "x$(HAVE_NATIVE_GCORE_TARGET)$(HAVE_NATIVE_GCORE_HOST)" = "x" \
		  -a "$${p}" = "gcore.1"; then \
	    continue; \
	  fi; \
	  if test -f "$${p}"; then d=""; else d="$(srcdir)/"; fi; \
	  f=`echo $${p} | $(SED) -e 's|^.*/||'`; \
	  echo " $(INSTALL_DATA) '$${d}$${p}' '$(DESTDIR)$(man1dir)/$${f}'"; \
	  $(INSTALL_DATA) "$${d}$${p}" "$(DESTDIR)$(man1dir)/$${f}"; \
	done

install-man5: $(MAN5S)
	test -z "$(man5dir)" || $(mkinstalldirs) "$(DESTDIR)$(man5dir)"
	@list='$(MAN5S)'; for p in $${list}; do \
	  if test -f "$${p}"; then d=""; else d="$(srcdir)/"; fi; \
	  f=`echo $${p} | $(SED) -e 's|^.*/||'`; \
	  echo " $(INSTALL_DATA) '$${d}$${p}' '$(DESTDIR)$(man5dir)/$${f}'"; \
	  $(INSTALL_DATA) "$${d}$${p}" "$(DESTDIR)$(man5dir)/$${f}"; \
	done

uninstall-man: uninstall-man1 uninstall-man5

uninstall-man1:
	@test -n "$(man1dir)" || exit 0; \
	files=`{ l2='$(MAN1S)'; for i in $${l2}; do \
	  if test "x$(HAVE_NATIVE_GCORE_TARGET)$(HAVE_NATIVE_GCORE_HOST)" = "x" \
		  -a "$${i}" = "gcore.1"; then \
	    continue; \
	  fi; \
	  echo "$${i}"; \
	done | \
	  $(SED) -n '/\.1[a-z]*$$/p'; \
	} | $(SED) -e 's,.*/,,;h;s,.*\.,,;s,^[^1][0-9a-z]*$$,1,;x' \
	      -e 's,\.[0-9a-z]*$$,,;$(transform);G;s,\n,.,'`; \
	test -z "$${files}" || { \
	  echo " ( cd '$(DESTDIR)$(man1dir)' && rm -f $(AM_V_v)" $${files} ")"; \
	  cd "$(DESTDIR)$(man1dir)" && rm -f $(AM_V_v) $${files}; }

uninstall-man5:
	@test -n "$(man5dir)" || exit 0; \
	files=`{ l2='$(MAN5S)'; for i in $${l2}; do echo "$${i}"; done | \
	  $(SED) -n '/\.5[a-z]*$$/p'; \
	} | $(SED) -e 's,.*/,,;h;s,.*\.,,;s,^[^5][0-9a-z]*$$,5,;x' \
	      -e 's,\.[0-9a-z]*$$,,;$(transform);G;s,\n,.,'`; \
	test -z "$${files}" || { \
	  echo " ( cd '$(DESTDIR)$(man5dir)' && rm -f $(AM_V_v)" $${files} ")"; \
	  cd "$(DESTDIR)$(man5dir)" && rm -f $(AM_V_v) $${files}; }

STAGESTUFF = *.info* gdb-all.texi GDBvn.texi *.ps *.dvi *.pdf *.1 *.5

# Copy the object files from a particular stage into a subdirectory.
stage1: force
	-mkdir $(AM_V_v) stage1
	-mv $(AM_V_v) $(STAGESTUFF) stage1

stage2: force
	-mkdir $(AM_V_v) stage2
	-mv $(AM_V_v) $(STAGESTUFF) stage2

stage3: force
	-mkdir $(AM_V_v) stage3
	-mv $(AM_V_v) $(STAGESTUFF) stage3

against=stage2

comparison: force
	for i in $(STAGESTUFF) ; do cmp $${i} $(against)/$${i}; done

de-stage1: force
	-(cd stage1 ; mv -f $(AM_V_v) * ..)
	-rmdir stage1

de-stage2: force
	-(cd stage2 ; mv -f $(AM_V_v) * ..)
	-rmdir stage2

de-stage3: force
	-(cd stage3 ; mv -f $(AM_V_v) * ..)
	-rmdir stage3

# GDB QUICK REFERENCE (dvi output)
refcard.dvi : refcard.tex $(REFEDITS)
	echo "" $(AM_V_redir) tmp.sed
	for f in x $(REFEDITS); do \
		test "x$${f}" = "xx" && continue; \
		cat $(srcdir)/$${f} $(AM_V_redir_a) tmp.sed; \
	done
	$(SED) -f tmp.sed $(srcdir)/refcard.tex $(AM_V_redir) sedref.tex
	$(SET_TEXINPUTS) $(TEX) sedref.tex
	mv $(AM_V_v) sedref.dvi refcard.dvi
	rm -f $(AM_V_v) sedref.log sedref.tex tmp.sed

refcard.ps : refcard.dvi
	$(DVIPS) -t landscape -o $@ $?

refcard.pdf : refcard.tex $(REFEDITS)
	echo "" $(AM_V_redir) tmp.sed
	for f in x $(REFEDITS); do \
		test "x$${f}" = "xx" && continue; \
		cat $(srcdir)/$${f} $(AM_V_redir_a) tmp.sed; \
	done
	$(SED) -f tmp.sed $(srcdir)/refcard.tex $(AM_V_redir) sedref.tex
	$(SET_TEXINPUTS) $(PDFTEX) sedref.tex
	mv $(AM_V_v) sedref.pdf refcard.pdf
	rm -f $(AM_V_v) sedref.log sedref.tex tmp.sed

# File to record current GDB version number
# (copied from main dir version.in)
GDBvn.texi : ${gdbdir}/version.in version.subst
	if [ -e version.subst ]; then \
	  echo "@set GDBVN `$(SED) q version.subst`" $(AM_V_redir) ./GDBvn.new; \
	else \
	  echo "@set GDBVN `$(SED) q $(srcdir)/../version.in`" $(AM_V_redir) ./GDBvn.new; \
	fi
	if [ -n "$(PKGVERSION)" ]; then \
	  echo "@set VERSION_PACKAGE $(PKGVERSION)" $(AM_V_redir_a) ./GDBvn.new; \
	fi
	echo "@set BUGURL $(BUGURL_TEXI)" $(AM_V_redir_a) ./GDBvn.new
	if [ "$(BUGURL_TEXI)" = "@uref{http://www.gnu.org/software/gdb/bugs/}" ]; then \
	  echo "@set BUGURL_DEFAULT" $(AM_V_redir_a) ./GDBvn.new; \
	fi
	if test -z "$(READLINE_TEXI_INCFLAG)"; then \
	  echo "@set SYSTEM_READLINE" $(AM_V_redir_a) ./GDBvn.new; \
	fi
	if [ -n "$(SYSTEM_GDBINIT)" ]; then \
	  echo "@set SYSTEM_GDBINIT $(SYSTEM_GDBINIT)" $(AM_V_redir_a) ./GDBvn.new; \
	fi
	mv $(AM_V_v) GDBvn.new GDBvn.texi

version.subst: $(gdbdir)/version.in $(gdbdir)/../bfd/version.h
	date=`$(SED) -n -e 's/^.* BFD_VERSION_DATE \(.*\)$$/\1/p' $(gdbdir)/../bfd/version.h`; \
	$(SED) -e "s/DATE/$${date}/" < $(gdbdir)/version.in $(AM_V_redir) version.subst

# Updated atomically:
.PRECIOUS: GDBvn.texi

# Choose configuration for GDB manual (normally `all'; normally not tied
# into `configure' script because most users prefer generic version of
# manual, not one for their binary config---which may not be specifically
# defined anyways).
gdb-cfg.texi: ${srcdir}/${DOC_CONFIG}-cfg.texi
	(test "x$(LN_S)" = "xln -s" && \
	  $(LN_S) $(AM_V_v) ${srcdir}/${DOC_CONFIG}-cfg.texi gdb-cfg.texi) || \
	ln $(AM_V_v) ${srcdir}/${DOC_CONFIG}-cfg.texi gdb-cfg.texi || \
	cp $(AM_V_v) ${srcdir}/${DOC_CONFIG}-cfg.texi gdb-cfg.texi

# GDB MANUAL: texinfo source, using @set/@clear/@value/@ifset/@ifclear
# If your texinfo or makeinfo do NOT support these, get a new texinfo
# release
#
# The nonsense with GDBvn.texi gets this to run with both Sun and GNU make.
# Note that we can *generate* GDBvn.texi, but since we distribute 1 in the
# src directory for the benefit of people who do *NOT* use this Makefile,
# VPATH will often tell make not to bother building it, because the one
# in the srcdir is up to date.  (if not, then make should build one here).

# Clean these up before each run.  Avoids a catch 22 with not being
# able to re-generate these files (to fix a corruption) because these
# files contain a corruption.
GDB_TEX_TMPS = gdb.aux gdb.cp* gdb.fn* gdb.ky* gdb.log gdb.pg* gdb.toc \
	gdb.tp* gdb.vr*

# GDB MANUAL: TeX dvi file
gdb.dvi: ${GDB_DOC_FILES}
	if [ ! -f ./GDBvn.texi ]; then \
	  (test "x$(LN_S)" = "xln -s" && \
	    $(LN_S) $(AM_V_v) $(srcdir)/GDBvn.texi .) || \
	  ln $(AM_V_v) $(srcdir)/GDBvn.texi . || \
	  cp $(AM_V_v) $(srcdir)/GDBvn.texi . ; \
	else \
	  echo "avoiding doing anything with GDBvn.texi"; \
	fi
	rm -f $(AM_V_v) $(GDB_TEX_TMPS)
	if [ ! -f ./gdb.dvi ]; then \
	  if [ -n "${GDBMI_DIR}" -a -d ../../readline/doc ]; then \
	    echo "using new rules to make $@"; \
	    $(TEXI2DVI) $(READLINE_TEXI_INCFLAG) -I ${GDBMI_DIR} \
		  -I $(srcdir) $(srcdir)/gdb.texinfo; \
	  else \
	    echo "using old rules to make $@"; \
	    $(SET_TEXINPUTS) $(TEXI2DVI) $(srcdir)/gdb.texinfo; \
	  fi; \
	fi

gdb.ps: gdb.dvi
	$(DVIPS) -o $@ $?

gdb.pdf: ${GDB_DOC_FILES}
	if [ ! -f ./GDBvn.texi ]; then \
	  (test "x$(LN_S)" = "xln -s" &&  \
	    $(LN_S) $(AM_V_v) $(srcdir)/GDBvn.texi .) || \
	  ln $(AM_V_v) $(srcdir)/GDBvn.texi . || \
	  cp $(AM_V_v) $(srcdir)/GDBvn.texi . ; \
	else \
	  echo "avoiding doing anything with GDBvn.texi"; \
	fi
	rm -f $(AM_V_v) $(GDB_TEX_TMPS)
	if [ ! -f ./gdb.pdf ]; then \
	  if [ -n "${GDBMI_DIR}" -a -d ../../readline/doc ]; then \
	    echo "using new rules to make $@"; \
	    $(TEXI2DVI) --pdf $(READLINE_TEXI_INCFLAG) -I ${GDBMI_DIR} \
		  -I $(srcdir) $(srcdir)/gdb.texinfo; \
	  else \
	    echo "using old rules to make $@"; \
	    $(SET_TEXINPUTS) $(TEXI2DVI) --pdf $(srcdir)/gdb.texinfo; \
	  fi; \
	fi

# GDB MANUAL: info file
gdb.info: ${GDB_DOC_FILES}
	$(MAKEINFO) -I ${READLINE_DIR} -I ${GDBMI_DIR} -I $(srcdir) \
		-o gdb.info $(srcdir)/gdb.texinfo

# GDB MANUAL: roff translations
# Try to use a recent texi2roff.  v2 was put on prep in jan91.
# If you want an index, see texi2roff doc for postprocessing 
# and add -i to texi2roff invocations below.
# Workarounds for texi2roff-2 (probably fixed in later texi2roff's, delete
#    corresponding -e lines when later texi2roff's are current)
# + @ifinfo's deleted explicitly due to texi2roff-2 bug w nested constructs
# + @c's deleted explicitly because texi2roff sees texinfo commands in them
# + @   (that's at-BLANK) not recognized by texi2roff, turned into blank
# + @alphaenumerate is ridiculously new, turned into @enumerate

# texi2roff does NOT have a notion of include dirs, so we have to fake 
# it out for gdb manual's include files---but only if not configured
# in main sourcedir.
links2roff: $(GDB_DOC_SOURCE_INCLUDES)
	if [ ! -f gdb.texinfo ]; then \
	  (test "x$(LN_S)" = "xln -s" &&  \
	    $(LN_S) $(AM_V_v) $(GDB_DOC_SOURCE_INCLUDES) .) || \
	  ln $(AM_V_v) $(GDB_DOC_SOURCE_INCLUDES) . || \
	  cp $(AM_V_v) $(GDB_DOC_SOURCE_INCLUDES) . ; \
	fi
	touch links2roff

# gdb manual suitable for [gtn]roff -me
gdb.me: $(GDB_DOC_FILES) links2roff
	$(SED) -e '/\\input texinfo/d' \
		-e '/@c TEXI2ROFF-KILL/,/@c END TEXI2ROFF-KILL/d' \
		-e '/^@ifinfo/,/^@end ifinfo/d' \
		-e '/^@c /d' \
		-e 's/{.*,,/{/' \
		-e 's/@ / /g' \
		-e 's/^@alphaenumerate/@enumerate/g' \
		-e 's/^@end alphaenumerate/@end enumerate/g' \
		$(srcdir)/gdb.texinfo | \
	$(TEXI2ROFF) -me | \
	$(SED) -e 's/---/\\(em/g' \
	$(AM_V_redir) gdb.me 

# gdb manual suitable for [gtn]roff -ms
gdb.ms: $(GDB_DOC_FILES) links2roff
	$(SED) -e '/\\input texinfo/d' \
		-e '/@c TEXI2ROFF-KILL/,/@c END TEXI2ROFF-KILL/d' \
		-e '/^@ifinfo/,/^@end ifinfo/d' \
		-e '/^@c /d' \
		-e 's/{.*,,/{/' \
		-e 's/@ / /g' \
		-e 's/^@alphaenumerate/@enumerate/g' \
		-e 's/^@end alphaenumerate/@end enumerate/g' \
		$(srcdir)/gdb.texinfo | \
	$(TEXI2ROFF) -ms | \
	$(SED) -e 's/---/\\(em/g' \
	$(AM_V_redir) gdb.ms 

# gdb manual suitable for [tn]roff -mm
# '@noindent's removed due to texi2roff-2 mm bug; if yours is newer, 
#   try leaving them in
gdb.mm: $(GDB_DOC_FILES) links2roff
	$(SED) -e '/\\input texinfo/d' \
		-e '/@c TEXI2ROFF-KILL/,/@c END TEXI2ROFF-KILL/d' \
		-e '/^@ifinfo/,/^@end ifinfo/d' \
		-e '/^@c /d' \
		-e 's/{.*,,/{/' \
		-e '/@noindent/d' \
		-e 's/@ / /g' \
		-e 's/^@alphaenumerate/@enumerate/g' \
		-e 's/^@end alphaenumerate/@end enumerate/g' \
		$(srcdir)/gdb.texinfo | \
	$(TEXI2ROFF) -mm | \
	$(SED) -e 's/---/\\(em/g' \
	$(AM_V_redir) gdb.mm 

# GDB MANUAL: HTML file

gdb_toc.html: ${GDB_DOC_FILES}
	$(MAKEHTML) $(MAKEHTMLFLAGS) -I ${READLINE_DIR} -I ${GDBMI_DIR} -I $(srcdir) $(srcdir)/gdb.texinfo || touch $@

# Clean these up before each run.  Avoids a catch-22 with not being
# able to re-generate these files (to fix a corruption) because these
# files contain a corruption.
GDBINT_TEX_TMPS = gdbint.aux gdbint.cp* gdbint.fn* gdbint.ky* \
	gdbint.log gdbint.pg* gdbint.toc gdbint.tp* gdbint.vr*

# GDB INTERNALS MANUAL: TeX dvi file
gdbint.dvi: $(GDBINT_DOC_FILES)
	rm -f $(AM_V_v) $(GDBINT_TEX_TMPS)
	if [ ! -f ./gdbint.dvi ]; then \
	  $(SET_TEXINPUTS) $(TEXI2DVI) $(srcdir)/gdbint.texinfo; \
	fi

gdbint.ps : gdbint.dvi
	$(DVIPS) -o $@ $?

gdbint.pdf: $(GDBINT_DOC_FILES)
	rm -f $(AM_V_v) $(GDBINT_TEX_TMPS)
	if [ ! -f ./gdbint.pdf ]; then \
	  $(SET_TEXINPUTS) $(TEXI2DVI) --pdf $(srcdir)/gdbint.texinfo; \
	fi

# GDB INTERNALS MANUAL: info file

gdbint.info: $(GDBINT_DOC_FILES)
	$(MAKEINFO) -I $(srcdir) -o gdbint.info $(srcdir)/gdbint.texinfo

# GDB INTERNALS MANUAL: HTML file

gdbint_toc.html: $(GDBINT_DOC_FILES)
	$(MAKEHTML) $(MAKEHTMLFLAGS) $(srcdir)/gdbint.texinfo

gdb/index.html: ${GDB_DOC_FILES}
	if [ ! -d gdb ]; then mkdir $(AM_V_v) gdb; fi
	$(MAKEHTML_LIKE_INFO) $(MAKEHTMLNEWFLAGS) $(READLINE_TEXI_INCFLAG) -I ${GDBMI_DIR} -I $(srcdir) $(srcdir)/gdb.texinfo || touch $@

stabs.info: $(STABS_DOC_FILES)
	$(MAKEINFO) -I $(srcdir) -o stabs.info $(srcdir)/stabs.texinfo

# STABS DOCUMENTATION: HTML file

stabs_toc.html: $(STABS_DOC_FILES)
	$(MAKEHTML) $(MAKEHTMLFLAGS) $(srcdir)/stabs.texinfo

stabs/index.html: $(STABS_DOC_FILES)
	if [ ! -d stabs ]; then mkdir $(AM_V_v) stabs; fi
	$(MAKEHTML_LIKE_INFO) $(MAKEHTMLNEWFLAGS) -I $(srcdir) $(srcdir)/stabs.texinfo || touch $@

# Clean these up before each run.  Avoids a catch 22 with not being
# able to re-generate these files (to fix a corruption) because these
# files contain a corruption.
STABS_TEX_TMPS = stabs.aux stabs.cp* stabs.fn* stabs.ky* \
	stabs.log stabs.pg* stabs.toc stabs.tp* stabs.vr*

# STABS DOCUMENTATION: TeX dvi file
stabs.dvi : $(STABS_DOC_FILES)
	rm -f $(AM_V_v) $(STABS_TEX_TMPS)
	if [ ! -f ./stabs.dvi ]; then \
	  $(SET_TEXINPUTS) $(TEXI2DVI) $(srcdir)/stabs.texinfo; \
	fi

stabs.ps: stabs.dvi
	$(DVIPS) -o $@ $?

stabs.pdf: $(STABS_DOC_FILES)
	rm -f $(AM_V_v) $(STABS_TEX_TMPS)
	if [ ! -f ./stabs.pdf ]; then \
	  $(SET_TEXINPUTS) $(TEXI2DVI) --pdf $(srcdir)/stabs.texinfo; \
	fi

# Clean these up before each run.  Avoids a catch 22 with not being
# able to re-generate these files (to fix a corruption) because these
# files contain a corruption.
ANNOTATE_TEX_TMPS = annotate.aux annotate.cp* annotate.fn* annotate.ky* \
	annotate.log annotate.pg* annotate.toc annotate.tp* annotate.vr*

# ANNOTATE DOCUMENTATION: TeX dvi file
annotate.dvi : $(ANNOTATE_DOC_FILES)
	rm -f $(AM_V_v) $(ANNOTATE_TEX_TMPS)
	$(SET_TEXINPUTS) $(TEXI2DVI) $(srcdir)/annotate.texinfo

annotate.ps: annotate.dvi
	$(DVIPS) -o $@ $?

annotate.pdf: $(ANNOTATE_DOC_FILES)
	rm -f $(AM_V_v) $(ANNOTATE_TEX_TMPS)
	$(SET_TEXINPUTS) $(TEXI2DVI) --pdf $(srcdir)/annotate.texinfo

annotate.info: $(ANNOTATE_DOC_FILES)
	$(MAKEINFO) -I $(srcdir) -o annotate.info $(srcdir)/annotate.texinfo

annotate_toc.html: $(ANNOTATE_DOC_FILES)
	$(MAKEHTML) $(MAKEHTMLFLAGS) $(srcdir)/annotate.texinfo

annotate/index.html: $(ANNOTATE_DOC_FILES)
	if [ ! -d annotate ]; then mkdir $(AM_V_v) annotate; fi
	$(MAKEHTML_LIKE_INFO) $(MAKEHTMLNEWFLAGS) -I $(srcdir) $(srcdir)/annotate.texinfo || touch $@

# Man pages:
gdb.1: $(GDB_DOC_FILES)
	touch $@
	-$(TEXI2POD) $(MANCONF) -Dgdb < $(srcdir)/gdb.texinfo $(AM_V_redir) gdb.pod
	-($(POD2MAN1) gdb.pod | $(SED) -e '/^.if n .na/d' > $@.T$$$$ && \
		mv -f $(AM_V_v) $@.T$$$$ $@) || (rm -f $(AM_V_v) $@.T$$$$ && exit 1)
	rm -f $(AM_V_v) gdb.pod

gdbserver.1: $(GDB_DOC_FILES)
	touch $@
	-$(TEXI2POD) $(MANCONF) -Dgdbserver < $(srcdir)/gdb.texinfo $(AM_V_redir) gdbserver.pod
	-($(POD2MAN1) gdbserver.pod | $(SED) -e '/^.if n .na/d' >$@.T$$$$ \
		&& mv -f $(AM_V_v) $@.T$$$$ $@) || (rm -f $(AM_V_v) $@.T$$$$ && exit 1)
	rm -f $(AM_V_v) gdbserver.pod

gcore.1: $(GDB_DOC_FILES)
	touch $@
	-$(TEXI2POD) $(MANCONF) -Dgcore < $(srcdir)/gdb.texinfo $(AM_V_redir) gcore.pod
	-($(POD2MAN1) gcore.pod | $(SED) -e '/^.if n .na/d' > $@.T$$$$ && \
		mv -f $(AM_V_v) $@.T$$$$ $@) || (rm -f $(AM_V_v) $@.T$$$$ && exit 1)
	rm -f $(AM_V_v) gcore.pod

gdbinit.5: $(GDB_DOC_FILES)
	touch $@
	-$(TEXI2POD) $(MANCONF) -Dgdbinit < $(srcdir)/gdb.texinfo $(AM_V_redir) gdbinit.pod
	-($(POD2MAN5) gdbinit.pod | $(SED) -e '/^.if n .na/d' > $@.T$$$$ \
		&& mv -f $(AM_V_v) $@.T$$$$ $@) || (rm -f $(AM_V_v) $@.T$$$$ && exit 1)
	rm -f $(AM_V_v) gdbinit.pod

force:

both_makefile_frags = $(host_makefile_frag) $(target_makefile_frag)

Makefile: Makefile.in $(both_makefile_frags) config.status
	$(SHELL) ./config.status


# The "least clean" level of cleaning.  Get rid of files which are
# automatically generated files that are just intermediate files, and such:
mostlyclean:
	rm -f $(AM_V_v) gdb.mm gdb.ms gdb.me links2roff
	rm -f $(AM_V_v) $(GDB_TEX_TMPS)
	rm -f $(AM_V_v) $(GDBINT_TEX_TMPS)
	rm -f $(AM_V_v) $(STABS_TEX_TMPS)
	rm -f $(AM_V_v) $(ANNOTATE_TEX_TMPS)
	rm -f $(AM_V_v) sedref.dvi sedref.tex tmp.sed
	rm -f $(AM_V_v) version.subst

# The "normal" level of cleaning to do after builds:
clean: mostlyclean
	rm -f $(AM_V_v) gdb-cfg.texi GDBvn.texi
	rm -rf annotate || rmdir annotate
	rm -rf doxy || rmdir doxy
	rm -rf gdb || rmdir gdb
	rm -rf gdbint || rmdir gdbint
	rm -rf stabs || rmdir stabs

# The level of cleaning to use for distributions, and to verify that the
# .gitignore file ignores the correct things:
distclean: clean
	rm -f $(AM_V_v) Makefile *.status config.log autoscan.log .DS_Store
	rm -rf $(AM_V_v) autom4te.cache || rmdir autom4te.cache

# GDBvn.texi, the dvi files, the info files, and the postscript files, 
# are all part of the distribution, so it should not be removed by
# "clean" or "distclean".  Use maintainer-clean to remove them.

maintainer-clean realclean: distclean
	rm -f $(AM_V_v) GDBvn.texi *.info* *.dvi *.ps *.html *.pdf $(MANS)

install: install-info install-man

uninstall: uninstall-info uninstall-man

pdf-local:
	@echo "FIXME: pdfs are broken (in `pwd`)"
.PHONY: pdf-local

check:
