# Makefile for regression testing the GNU debugger.
# Copyright 1992, 1993, 1994, 1995, 1996, 1998, 1999, 2000, 2002, 2003,
# 2004, 2005
# Free Software Foundation, Inc.

# This file is part of GDB.

# GDB is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2, or (at your option)
# any later version.

# GDB is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place Suite 330, Boston, MA 02111-1307, USA.

VPATH = @srcdir@
srcdir = @srcdir@
prefix = @prefix@
exec_prefix = @exec_prefix@
abs_builddir = @abs_builddir@

host_alias = @host_alias@
target_alias = @target_alias@
program_transform_name = @program_transform_name@
build_canonical = @build@
host_canonical = @host@
target_canonical = @target@
target_cpu = @gdb_target_cpu@

BUILD_ARCHITECTURE = @BUILD_ARCHITECTURE@
HOST_ARCHITECTURE = @HOST_ARCHITECTURE@
TARGET_ARCHITECTURE = @TARGET_ARCHITECTURE@
C_ARCHFLAGS = -arch $(HOST_ARCHITECTURE)

SHELL = @SHELL@
SED = @SED@
EXEEXT = @EXEEXT@
SUBDIRS = @subdirs@
RPATH_ENVVAR = @RPATH_ENVVAR@
ALL_SUBDIRS = gdb.ada gdb.apple gdb.arch gdb.asm gdb.base gdb.btrace gdb.c++ \
	gdb.cell gdb.chill gdb.cp gdb.disasm gdb.dlang gdb.dwarf2 gdb.fortran \
	gdb.gdb gdb.gdbtk gdb.go gdb.guile gdb.java gdb.linespec gdb.mi \
	gdb.modula2 gdb.multi gdb.objc gdb.opencl gdb.opt gdb.pascal gdb.perf \
	gdb.reverse gdb.server gdb.stabs gdb.threads gdb.trace gdb.xml \
	$(SUBDIRS)

SUBDIRS_WITHOUT_MAKEFILES = gdb.hp gdb.python

EXPECT = `if test -f $${rootme}/../../expect/expect; then \
          echo $${rootme}/../../expect/expect ; \
          else echo expect; fi`

RUNTEST = $(RUNTEST_FOR_TARGET)

RUNTESTFLAGS =

FORCE_PARALLEL =

RUNTEST_FOR_TARGET = `\
  if test -f $${srcdir}/../../dejagnu/runtest; then \
    echo $${srcdir}/../../dejagnu/runtest; \
  else \
    if [ "x$(host_canonical)" = "x$(target_canonical)" ]; then \
      echo runtest; \
    else \
      t='$(program_transform_name)'; echo runtest | $(SED) -e '' $${t}; \
    fi; \
  fi`

#### host, target, and site specific Makefile frags come in here.

# The use of $$(x_FOR_TARGET) reduces the command line length by not
# duplicating the lengthy definition.

TARGET_FLAGS_TO_PASS = \
        "prefix=$(prefix)" \
        "exec_prefix=$(exec_prefix)" \
        "against=$(against)" \
        'CC=$$(CC_FOR_TARGET)' \
        "CC_FOR_TARGET=$(CC_FOR_TARGET)" \
        "CFLAGS=$(TESTSUITE_CFLAGS)" \
        'CXX=$$(CXX_FOR_TARGET)' \
        "CXX_FOR_TARGET=$(CXX_FOR_TARGET)" \
        "CXXFLAGS=$(CXXFLAGS)" \
        "MAKEINFO=$(MAKEINFO)" \
        "INSTALL=$(INSTALL)" \
        "INSTALL_PROGRAM=$(INSTALL_PROGRAM)" \
        "INSTALL_DATA=$(INSTALL_DATA)" \
        "LDFLAGS=$(LDFLAGS)" \
        "LIBS=$(LIBS)" \
        "RUNTEST=$(RUNTEST)" \
        "RUNTESTFLAGS=$(RUNTESTFLAGS)"

all: read1 @MAINT@ $(EXTRA_RULES) subdirs
	@echo "Nothing to be done for all..."

.NOEXPORT:
INFODIRS=doc
info:
install-info:
dvi:
html:
install-html:
pdf-local:

install:

uninstall: force

# Only make the step in the rule silent with "@" when it just prints
# a message that we would see anyways; otherwise, remove the "@":
site.exp: ./config.status Makefile
	@echo "Making a new config file..."
	-rm -fv ./tmp?
	touch site.exp
	-mv -v site.exp site.bak
	echo "## these variables are automatically generated by make ##" > ./tmp0
	echo "# Do not edit here. If you wish to override these values" >> ./tmp0
	echo "# add them to the last section" >> ./tmp0
	echo "set host_alias $(host_alias)" >> ./tmp0
	echo "set host_triplet ${host_canonical}" >> ./tmp0
	echo "set target_alias $(target_alias)" >> ./tmp0
	echo "set target_triplet ${target_canonical}" >> ./tmp0
	echo "set build_triplet ${build_canonical}" >> ./tmp0
	echo "set srcdir ${srcdir}" >> ./tmp0
	echo "set tool gdb" >> ./tmp0
	echo "set gdb_test_apple_dsym 0" >> ./tmp0
	echo "## All variables above are generated by configure. Do Not Edit ##" >> ./tmp0
	cat ./tmp0 > site.exp
	cat site.bak | $(SED) \
			-e '1,/^## All variables above are.*##/ d' >> site.exp
	-rm -fv ./tmp?

installcheck:

check: site.exp all just-check

check-read1:
	$(MAKE) READ1="1" check

just-check:
	rootme=`pwd`; export rootme; \
	srcdir=${srcdir}; export srcdir; \
	EXPECT=${EXPECT}; export EXPECT; \
	EXEEXT=${EXEEXT}; export EXEEXT; \
        $(RPATH_ENVVAR)=$${rootme}/../../expect:$${rootme}/../../libstdc++:$${rootme}/../../tk/unix:$${rootme}/../../tcl/unix:$${rootme}/../../bfd:$${rootme}/../../opcodes:$$$(RPATH_ENVVAR); \
	export $(RPATH_ENVVAR); \
	if [ -f $${rootme}/../../expect/expect ]; then  \
	  TCL_LIBRARY=$${srcdir}/../../tcl/library ; \
	  export TCL_LIBRARY; fi; \
	$(RUNTEST) $(RUNTESTFLAGS) 

subdir_do: force
	for i in $(DODIRS); do \
		if [ -d ./$${i} -a -r ./$${i}/Makefile ]; then \
			if (rootme=`pwd`/; export rootme; \
			    rootsrc=`cd $(srcdir); pwd`/; export rootsrc; \
			    cd ./$${i}; \
			    $(MAKE) $(TARGET_FLAGS_TO_PASS) $(DO)); then \
			    echo "$@ succeeded for $${i}"; \
			else \
			    echo "error: $@ failed for $${i}" >&2; \
			    exit 1; \
			fi; \
		else \
			echo "cannot recurse into $${i}"; \
		fi; \
	done

force:;

subdirs:
	for dir in ${ALL_SUBDIRS}; \
	do \
		echo "$${dir}:"; \
		if [ -d $${dir} -a -r $${dir}/Makefile ]; then \
			(rootme=`pwd`/; export rootme; \
			 rootsrc=`cd $(srcdir); pwd`/; export rootsrc; \
			 cd $${dir}; $(MAKE) $(TARGET_FLAGS_TO_PASS)); \
		else \
			echo "$@: nothing to be done for $${dir}."; \
		fi; \
	done

# 'rm -f' gets the '-v' flag here when the files that it removes can vary:
clean mostlyclean:
	-rm -fv *~ core *.o a.out xgdb *.x *.grt
	-rm -f bigcore.corefile .gdb_history zzz-gdbscript
	-rm -fv core.* *.tf *.cl tracecommandsscript copy1.txt
	-for pyscript in *.py; do \
	  if test "x$${pyscript}" != "xanalyze-racy-logs.py" && test "x$${pyscript}" != "xprint-ts.py"; then \
	    rm -fv "$${pyscript}"; \
	  else \
	    echo "$${pyscript} is protected; keeping..." && stat "$${pyscript}"; \
	  fi; \
	done
	-rm -fv *.dwo *.dwp
	-rm -rfv outputs temp cache
	-rm -f read1.so expect-read1
	-rm -rfv *.dSYM || rmdir *.dSYM
	if [ x"${ALL_SUBDIRS}" != x"" ]; then \
	    for dir in ${ALL_SUBDIRS}; \
	    do \
		    echo "$${dir}:"; \
		    if [ -d $${dir} -a -r $${dir}/Makefile ]; then \
			    (cd $${dir}; $(MAKE) clean); \
		    else \
			    echo "$@: nothing to be done for $${dir}."; \
		    fi; \
	    done ; \
	else echo "no subdirs to recurse into for target '$@'"; fi

distclean maintainer-clean realclean: clean
	echo "`pwd`: '$@' target depends on '$<'"
	-rm -fv *~ core .DS_Store gdb_cmd
	-rm -fv Makefile config.status *-init.exp
	-rm -frv *.log summary detail *.plog *.sum *.psum site.*
	-rm -frv autom4te.cache || rmdir autom4te.cache
	-rm -fv lib/pdtrace cell*.c cell*-spu.c conf*/*.awk
	-(if test -L vforked-prog.c; then unlink vforked-prog.c; \
	  elif test -w vforked-prog.c && test -w .; then rm vforked-prog.c;\
	  elif test -e vforked-prog.c; then stat vforked-prog.c; \
	  else ls ./*vfork* 2>/dev/null; fi) || find . -name vforked-prog.c -print
	if [ x"${ALL_SUBDIRS}" != x"" ]; then \
	    for dir in ${ALL_SUBDIRS}; \
	    do \
		    echo "$${dir}:"; \
		    if [ -d $${dir} -a -r $${dir}/Makefile ]; then \
			    (cd $${dir}; $(MAKE) distclean); \
		    else \
			    echo "$@: nothing to be done for $${dir}."; \
		    fi; \
	    done; \
	else echo "no subdirs to recurse into for target '$@'"; fi

Makefile : Makefile.in config.status $(host_makefile_frag) $(target_makefile_frag)
	$(SHELL) config.status

config.status: configure
	$(SHELL) config.status --recheck

TAGS: force
	find $(srcdir) -name '*.exp' -print | \
	    etags --regex='/proc[ \t]+\([^ \t]+\)/\1/' -

# Build the expect wrapper script that preloads the read1.so library.
expect-read1:
	@echo "Making expect-read1"
	@rm -f expect-read1-tmp
	@touch expect-read1-tmp
	@echo "# THIS FILE IS GENERATED -*- buffer-read-only: t -*- \n" >>expect-read1-tmp
	@echo "# vi:set ro: */\n\n" >>expect-read1-tmp
	@echo "# To regenerate this file, run:\n" >>expect-read1-tmp
	@echo "#      make clean; make/\n" >>expect-read1-tmp
	@echo "export LD_PRELOAD=`pwd`/read1.so" >>expect-read1-tmp
	@echo 'exec expect "$$@"' >>expect-read1-tmp
	@chmod +x expect-read1-tmp
	@mv expect-read1-tmp expect-read1

# Build the read1.so preload library.  This overrides the `read'
# function, making it read one byte at a time.  Running the testsuite
# with this catches racy tests.
read1.so: lib/read1.c
	$(CC) -o $@ ${srcdir}/lib/read1.c -Wall -ggdb -shared -fPIC \
	  $(CFLAGS) $(C_ARCHFLAGS)

# Build the read1 machinery:
.PHONY: read1
read1: read1.so expect-read1
