## Makefile is generated from Makefile.in (this one is for gdb)
# Copyright 1989, 1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997,
# 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005 Free Software Foundation,
# Inc.

# This file is part of GDB.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to:
#
#  The Free Software Foundation, Inc.
#  59 Temple Place - Suite 330
#  Boston, MA 02111-1307, USA.
#

prefix = @prefix@
exec_prefix = @exec_prefix@

host_alias = @host_alias@
host_cpu = @host_cpu@
target_alias = @target_alias@
target_cpu = @target_cpu@
BUILD_ARCHITECTURE = @BUILD_ARCHITECTURE@
HOST_ARCHITECTURE = @HOST_ARCHITECTURE@
TARGET_ARCHITECTURE = @TARGET_ARCHITECTURE@
program_transform_name = @program_transform_name@
bindir = @bindir@
libdir = @libdir@
tooldir = $(libdir)/$(target_alias)

datadir = @datadir@
localedir = @localedir@
mandir = @mandir@
man1dir = $(mandir)/man1
man2dir = $(mandir)/man2
man3dir = $(mandir)/man3
man4dir = $(mandir)/man4
man5dir = $(mandir)/man5
man6dir = $(mandir)/man6
man7dir = $(mandir)/man7
man8dir = $(mandir)/man8
man9dir = $(mandir)/man9
infodir = @infodir@
htmldir = $(prefix)/html
includedir = @includedir@
datarootdir = @datarootdir@
docdir = @docdir@
pdfdir = @pdfdir@

install_sh = @install_sh@

# This can be referenced by `INTLDEPS' as computed by CY_GNU_GETTEXT.
top_builddir = .

# Where build output is put.
builddir = @builddir@
analysisdir = $(builddir)/clang_static_analysis

ACLOCAL_AMFLAGS = -I./m4 -I./gnulib/m4 -I./gnulib/import/m4 --install

# Keep these in sync with the includes in acinclude.m4.
aclocal_m4_deps = \
	configure.ac \
	acx_configure_dir.m4 \
	../bfd/bfd.m4 \
	../config/acinclude.m4 \
	../config/acx.m4 \
	../config/zlib.m4 \
	../libiberty/m4/libiberty.m4 \
	m4/build-with-cxx.m4 \
	../lcmessage.m4 \
	../gettext.m4 \
	m4/ccstdc.m4

SHELL = @SHELL@
EXEEXT = @EXEEXT@

AWK = @AWK@
LN_S = @LN_S@
SED = @SED@
GREP = @GREP@

INSTALL = @INSTALL@
INSTALL_PROGRAM = @INSTALL_PROGRAM@
INSTALL_SCRIPT = @INSTALL_SCRIPT@
INSTALL_STRIP_PROGRAM = @INSTALL_STRIP_PROGRAM@
INSTALL_DATA = @INSTALL_DATA@

MKDIR_P = @MKDIR_P@
mkdir_p = @mkdir_p@
MKINSTALLDIRS = @MKINSTALLDIRS@
RUN_MKINSTALLDIRS = $(SHELL) $(srcdir)/../mkinstalldirs
RUN_MOVEIFCHANGE = $(SHELL) $(srcdir)/../move-if-change

DESTDIR =

AR = @AR@
# AR_FLAGS is now set below
RANLIB = @RANLIB@
RANLIB_FLAGS = -fq
STRIP = @STRIP@
DLLTOOL = @DLLTOOL@
WINDRES = @WINDRES@
MIG = @MIG@
REZ = @REZ@
DEREZ = @DEREZ@
REZDET = @REZDET@
REZWACK = @REZWACK@
RESMERGER = @RESMERGER@

XGETTEXT = @XGETTEXT@
GMSGFMT = @GMSGFMT@
MSGMERGE = msgmerge

PACKAGE = @PACKAGE@
CATALOGS = @CATALOGS@

VERSION = @VERSION@
PACKAGE_VERSION = @PACKAGE_VERSION@

# The name of the compiler to use.
COMPILER = @COMPILER@

# The name of the linker to use.
LINKER = @LINKER@

# These are for use with the automake-style verbosity control below:
AM_V_COMPILER = @AM_V_COMPILER@
AM_V_LINKER = @AM_V_LINKER@

# If you are compiling with GCC, make sure that either 1) You have the
# fixed include files where GCC can reach them, or 2) You use the
# -traditional flag.  Otherwise the ioctl calls in inflow.c
# will be incorrectly compiled.  The "fixincludes" script in the gcc
# distribution will fix your include files up.
CC=@CC@
CXX=@CXX@

# Dependency tracking information.
DEPMODE = @CCDEPMODE@
DEPDIR = @DEPDIR@
depcomp = $(SHELL) $(srcdir)/../depcomp

# Note that these are overridden by GNU make-specific code below if
# GNU make is used.  The overrides implement dependency tracking. (TODO)
COMPILE.pre = $(COMPILER)
COMPILE.post = -c -o $@
COMPILE = $(AM_V_COMPILER)$(COMPILE.pre) $(INTERNAL_CFLAGS) $(COMPILE.post)
POSTCOMPILE = @echo "Used $(COMPILER) to compile $< into $@."

## an alias for use when linking:
CCLD = $(CC)
## likewise:
CXXLD = $(CXX)

# Directory containing source files.
srcdir = @srcdir@
VPATH = @srcdir@:@srcdir@/macosx:@srcdir@/attic:@srcdir@/target:@srcdir@/nat
top_srcdir = @top_srcdir@

## automake-style verbosity control:
V = @V@
AM_V_v = $(am__v_v_@AM_V@)
am__v_v_ = $(am__v_v_@AM_DEFAULT_V@)
am__v_v_0 =
am__v_v_1 = -v

AM_V_P = $(am__v_P_@AM_V@)
am__v_P_ = $(am__v_P_@AM_DEFAULT_V@)
am__v_P_0 = false
am__v_P_1 = :

AM_V_GEN = $(am__v_GEN_@AM_V@)
am__v_GEN_ = $(am__v_GEN_@AM_DEFAULT_V@)
am__v_GEN_0 = @echo "  GEN     " $@;
am__v_GEN_1 = 

AM_V_at = $(am__v_at_@AM_V@)
am__v_at_ = $(am__v_at_@AM_DEFAULT_V@)
am__v_at_0 = @
am__v_at_1 =

AM_V_CC = $(am__v_CC_@AM_V@)
am__v_CC_ = $(am__v_CC_@AM_DEFAULT_V@)
am__v_CC_0 = @echo "  CC      " $@;
am__v_CC_1 = 

AM_V_CCLD = $(am__v_CCLD_@AM_V@)
am__v_CCLD_ = $(am__v_CCLD_@AM_DEFAULT_V@)
am__v_CCLD_0 = @echo "  CCLD    " $@;
am__v_CCLD_1 = 

AM_V_CXX = $(am__v_CXX_@AM_V@)
am__v_CXX_ = $(am__v_CXX_@AM_DEFAULT_V@)
am__v_CXX_0 = @echo "  CXX      " $@;
am__v_CXX_1 = 

AM_V_CXXLD = $(am__v_CXXLD_@AM_V@)
am__v_CXXLD_ = $(am__v_CXXLD_@AM_DEFAULT_V@)
am__v_CXXLD_0 = @echo "  CXXLD    " $@;
am__v_CXXLD_1 = 

AM_V_lt = $(am__v_lt_@AM_V@)
am__v_lt_ = $(am__v_lt_@AM_DEFAULT_V@)
am__v_lt_0 = --silent
am__v_lt_1 = 

AM_V_AR = $(am__v_AR_@AM_V@)
am__v_AR_ = $(am__v_AR_@AM_DEFAULT_V@)
am__v_AR_0 = @echo "  AR      " $@;
am__v_AR_1 = 

AM_V_ARFLAGS = $(am__v_ARFLAGS_@AM_V@)
am__v_ARFLAGS_ = $(am__v_ARFLAGS_@AM_DEFAULT_V@)
am__v_ARFLAGS_0 = qc
am__v_ARFLAGS_1 = qv

AM_V_MFLAG = $(am__v_MFLAG_@AM_V@)
am__v_MFLAG_ = $(am__v_MFLAG_@AM_DEFAULT_V@)
am__v_MFLAG_0 = -s
am__v_MFLAG_1 = -w

AM_V_splint = $(am__v_splint_@AM_V@)
am__v_splint_ = $(am__v_splint_@AM_DEFAULT_V@)
am__v_splint_0 =
am__v_splint_1 = +showscan +forcehints

AM_V_CLANG = $(am__v_CLANG_@AM_V@)
am__v_CLANG_ = $(am__v_CLANG_@AM_DEFAULT_V@)
am__v_CLANG_0 = @echo "  CLANG      " $@;
am__v_CLANG_1 =

AM_V_REZFLAG = $(am_v_REZFLAG_@AM_V@)
am__v_REZFLAG_ = $(am__v_REZFLAG_@AM_DEFAULT_V@)
am__v_REZFLAG_0 =
am__v_REZFLAG_1 = -progress

AR_FLAGS = $(AM_V_ARFLAGS)

# configure our bison/yacc usage:
YACC=@YACC@
YFLAGS = -d -t $(AM_V_v) @MAINT@@EXTRA_YFLAGS_SEP@ -k -Wall -Wyacc
BISON_CXX_FLAG = @BISON_CXX_FLAG@

# This is used to rebuild ada-lex.c from ada-lex.l.  If the program is
# not defined, but ada-lex.c is present, compilation will continue,
# possibly with a warning.
FLEX = flex

# configured versions:
LEX = @LEX@
LEXLIB = @LEXLIB@
LEX_OUTPUT_ROOT = @LEX_OUTPUT_ROOT@

YLWRAP = $(srcdir)/../ylwrap

# where to find makeinfo, preferably one designed for texinfo-2+
MAKEINFO=makeinfo

MAKEHTML = texi2html

MAKEHTMLFLAGS = -glossary -menu -split_chapter

# configured versions:
CONFIGURED_MAKEINFO = @MAKEINFO@
MAKEINFOFLAGS = @MAKEINFOFLAGS@
MAKEINFO_EXTRA_FLAGS = @MAKEINFO_EXTRA_FLAGS@
MAKEINFO_CMD = $(MAKEINFO) $(MAKEINFOFLAGS) $(MAKEINFO_EXTRA_FLAGS)

# Set this up with gcc if you have gnu ld and the loader will print out
# line numbers for undefined references.
CC_LD_STATIC="gcc -static"
CC_LD=$(CC)
CXX_LD=$(CXX)
COMPILER_LD=$(COMPILER)

acl_cv_wp=@acl_cv_wp@

GNULIB_BUILDDIR = build-gnulib
GNULIB_CFLAGS=${acl_cv_wp}-I$(srcdir)/gnulib/gnulib \
  ${acl_cv_wp}-I$(srcdir)/gnulib/import \
  ${acl_cv_wp}-I$(GNULIB_BUILDDIR)/import -DWITH_GNULIB_BUILDDIR

# Where is our "include" directory?  Typically $(srcdir)/../include.
# This is essentially the header file directory for the library
# routines in libiberty.
INCLUDE_DIR =  $(srcdir)/../include
@MAKE_SHOULD_RECURSE_INTO_GNULIB_TRUE@INCLUDE_CFLAGS = ${acl_cv_wp}-I$(INCLUDE_DIR) \
@MAKE_SHOULD_RECURSE_INTO_GNULIB_TRUE@ ${acl_cv_wp}-I. @MAINT@ $(GNULIB_CFLAGS)
@MAKE_SHOULD_RECURSE_INTO_GNULIB_FALSE@INCLUDE_CFLAGS = ${acl_cv_wp}-I$(INCLUDE_DIR)

# Where is the "-liberty" library?  Typically in ../libiberty.
LIBIBERTY_DIR = ../libiberty
LIBIBERTY_DEP = $(LIBIBERTY_DIR)/libiberty.a
LIBIBERTY = -L$(LIBIBERTY_DIR) -liberty
LIBIBERTY_CFLAGS = ${acl_cv_wp}-I$(LIBIBERTY_DIR)

# Configured by the --with-mmalloc option to configure.
MMALLOC_DIR = ../mmalloc
WITH_MMALLOC_DEP = $(MMALLOC_DIR)/libmmalloc.a
WITH_MMALLOC = @MMALLOC@
WITH_MMALLOC_CFLAGS = @MMALLOC_CFLAGS@
MMALLOC_CFLAGS = $(WITH_MMALLOC_CFLAGS)

# Where is the BFD library?  Typically in ../bfd.
BFD_DIR = ../bfd
BFD_DEP = $(BFD_DIR)/libbfd.la
BFD = -L../bfd -L../bfd/.libs -lbfd
BFD_SRC = $(srcdir)/$(BFD_DIR)
BFD_CFLAGS = ${acl_cv_wp}-I$(BFD_DIR) ${acl_cv_wp}-I$(BFD_SRC)

# Where is zlib?  Typically in ../zlib, but the configure script will subst
# that for us:
ZLIB = @zlibdir@ -lz
ZLIBINC = @zlibinc@

# Where is the decnumber library?  Typically in ../libdecnumber.
LIBDECNUMBER_DIR = ../libdecnumber
LIBDECNUMBER = $(LIBDECNUMBER_DIR)/libdecnumber.a
LIBDECNUMBER_SRC = $(srcdir)/$(LIBDECNUMBER_DIR)
LIBDECNUMBER_CFLAGS = ${acl_cv_wp}-I$(LIBDECNUMBER_DIR) ${acl_cv_wp}-I$(LIBDECNUMBER_SRC)

# Where is the READLINE library?  Typically in ../readline.
READLINE_DIR = ../readline
READLINE_DEP = ../readline/libreadline.a
READLINE = $(READLINE_DIR)/libreadline.a
READLINE_SRC = $(srcdir)/$(READLINE_DIR)
READLINE_CFLAGS = ${acl_cv_wp}-I$(READLINE_SRC)/..

WARN_CFLAGS = @WARN_CFLAGS@
WERROR_CFLAGS = @WERROR_CFLAGS@
WARN_LDFLAGS = @WARN_LDFLAGS@
GDB_WARN_CFLAGS = $(WARN_CFLAGS) @MAINT@@APPLE_MAINT@ $(MH_WARN_CFLAGS)
GDB_WERROR_CFLAGS = $(WERROR_CFLAGS)
GDB_WARN_LDFLAGS = $(WARN_LDFLAGS)
GDB_WARN_OBJCFLAGS = -Wno-deprecated-declarations

GDB_WARN_CFLAGS_NO_FORMAT = `echo " $(GDB_WARN_CFLAGS) " \
             | $(SED) "s/ -Wformat-nonliteral / -Wno-format-nonliteral /g"`
GDB_WARN_CFLAGS_NO_DEFS = `echo " $(GDB_WARN_CFLAGS) " \
       | $(SED) "s/ -Wold-style-definition / -Wno-old-style-definition /g"`
GDB_WARN_CFLAGS_NO_OVERLENGTH_STRINGS = `echo " $(GDB_WARN_CFLAGS) " \
       | $(SED) "s/ -Woverlength-strings / /g"`

RDYNAMIC = @RDYNAMIC@

# Where is the INTL library? Typically in ../intl.
INTL_DIR = ../intl
INTL = @INTLLIBS@
INTL_DEP = @INTLDEPS@
INTL_SRC = $(srcdir)/$(INTL_DIR)
INTL_CFLAGS = ${acl_cv_wp}-I$(INTL_DIR) ${acl_cv_wp}-I$(INTL_SRC)
INTL_LDFLAGS = -L$(INTL_DIR)

# Where is the ICONV library?  This can be empty if libc has iconv.
# (If you are having troubles with the wrong libiconv being picked up,
# you can try setting this to "/usr/lib/libiconv.dylib")
LIBICONV = @LIBICONV@

# APPLE LOCAL: location of libxml header files & libraries:
LIBXML2_CFLAGS = @LIBXML2_INCLUDES@
LIBXML2_LDFLAGS = @LIBXML2_LIBS@

# APPLE LOCAL: switch over to the pre-conformance header files.
UNIX03_UGH_CFLAGS = @UNIX03_UGH_CFLAGS@

# APPLE LOCAL:
EXCEPTIONS_OBJCFLAGS = -fobjc-exceptions

# APPLE LOCAL: location of Carbon header files and libraries

# APPLE LOCAL: We need to weak link to Carbon for the "open" command, and
# we need CoreFoundation for the plist parsing code.
CARBON_LDFLAGS = -framework CoreFoundation @CARBON_LIBS@

# APPLE LOCAL: Use DebugSymbols framework if available for dSYM finding:
DEBUG_SYMBOLS_LDFLAGS = @DEBUG_SYMBOLS_LIBS@

# APPLE LOCAL: Enable MIG checking for macosx/macosx.defs.
MIG_CHECKING = @MIG_CHECKING@

# APPLE LOCAL: 64 bit MIG generates files with mach_ as a prefix.
MACH_EXC_SERVER_PREFACE = @MACH_EXC_SERVER_PREFACE@

# APPLE LOCAL: Encode the Info.plist in the binary for the security
# framework's benefit.
ADD_INFO_PLIST = -sectcreate __TEXT __info_plist $(srcdir)/Info.plist

# APPLE LOCAL: variables for utilities used for codesigning:
CODESIGN = @CODESIGN@
CODESIGN_ALLOCATE = @CODESIGN_ALLOCATE@

# Did the user give us a --with-sysroot option?
TARGET_SYSTEM_ROOT = @TARGET_SYSTEM_ROOT@
TARGET_SYSTEM_ROOT_DEFINE = @TARGET_SYSTEM_ROOT_DEFINE@

# Did the user give us a --with-gdb-datadir option?
GDB_DATADIR = @GDB_DATADIR@

# Flags to pass to gdb when invoked with "make run".
GDBFLAGS =

# Helper code from gnulib.
## $(GNULIB_BUILDDIR) is already set above
LIBGNU = $(GNULIB_BUILDDIR)/import/libgnu.a
INCGNU = ${acl_cv_wp}-I$(srcdir)/gnulib/import ${acl_cv_wp}-I$(GNULIB_BUILDDIR)/import

# Generated headers in the gnulib directory.  These must be listed
 # so that they are generated before other files are compiled.
GNULIB_H = $(GNULIB_BUILDDIR)/import/string.h @GNULIB_STDINT_H@

#
# CLI sub directory definitons
#
SUBDIR_CLI_OBS = \
  cli-dump.o \
  cli-decode.o cli-script.o cli-cmds.o cli-setshow.o cli-utils.o \
  cli-logging.o \
  cli-interp.o
SUBDIR_CLI_SRCS = \
  cli/cli-dump.c \
  cli/cli-decode.c cli/cli-script.c cli/cli-cmds.c cli/cli-setshow.c \
  cli/cli-logging.c \
  cli/cli-interp.c \
  cli/cli-utils.c
SUBDIR_CLI_DEPS =
SUBDIR_CLI_LDFLAGS =
SUBDIR_CLI_CFLAGS =

#
# MI sub directory definitons
#
SUBDIR_MI_OBS = \
	mi-out.o mi-console.o \
	mi-cmds.o mi-cmd-env.o mi-cmd-var.o mi-cmd-break.o mi-cmd-stack.o \
	mi-cmd-file.o mi-cmd-disas.o mi-symbol-cmds.o \
	mi-interp.o \
	mi-main.o mi-parse.o mi-getopt.o mi-common.o
SUBDIR_MI_SRCS = \
	mi/mi-out.c mi/mi-console.c \
	mi/mi-cmds.c mi/mi-cmd-env.c \
	mi/mi-cmd-var.c mi/mi-cmd-break.c mi/mi-cmd-stack.c \
	mi/mi-cmd-file.c mi/mi-cmd-disas.c mi/mi-symbol-cmds.c \
	mi/mi-interp.c \
	mi/mi-main.c mi/mi-parse.c mi/mi-getopt.c mi/mi-common.c
SUBDIR_MI_DEPS =
SUBDIR_MI_LDFLAGS=
SUBDIR_MI_CFLAGS= \
	-DMI_OUT=1

#
# TUI sub directory definitions
#

# Name of the TUI program
TUI=gdbtui

SUBDIR_TUI_OBS = \
	tui-command.o \
	tui-data.o \
	tui-disasm.o \
	tui-file.o tui.o \
	tui-hooks.o \
	tui-interp.o \
	tui-io.o \
	tui-layout.o \
	tui-out.o \
	tui-regs.o \
	tui-source.o \
	tui-stack.o \
	tui-win.o \
	tui-windata.o \
	tui-wingeneral.o \
	tui-winsource.o
SUBDIR_TUI_SRCS = \
	tui/tui-command.c \
	tui/tui-data.c \
	tui/tui-disasm.c \
	tui/tui-file.c \
	tui/tui-hooks.c \
	tui/tui-interp.c \
	tui/tui-io.c \
	tui/tui-layout.c \
	tui/tui-out.c \
	tui/tui-regs.c \
	tui/tui-source.c \
	tui/tui-stack.c \
	tui/tui-win.c \
	tui/tui-windata.c \
	tui/tui-wingeneral.c \
	tui/tui-winsource.c \
	tui/tui.c
SUBDIR_TUI_DEPS =
SUBDIR_TUI_LDFLAGS=
# APPLE LOCAL - we do NOT support TUI, so do NOT let
# people accidentally wander into it.
# ^But I am not Apple so I can ignore that...
SUBDIR_TUI_CFLAGS= \
	-DTUI=1

# Opcodes currently live in one of two places. Either they are in the
# opcode library, typically ../opcodes, or they are in a header file
# in INCLUDE_DIR.
# Where is the "-lopcodes" library, with (some of) the opcode tables and
# disassemblers?
OPCODES_DIR = ../opcodes
OPCODES_SRC = $(srcdir)/$(OPCODES_DIR)
OPCODES_DEP = $(OPCODES_DIR)/libopcodes.la
OPCODES = -L../opcodes -L../opcodes/.libs -lopcodes
# Where are the other opcode tables which only have header file
# versions?
OP_INCLUDE = $(INCLUDE_DIR)/opcode
OPCODES_CFLAGS = ${acl_cv_wp}-I$(OP_INCLUDE)

# The simulator is usually nonexistent; targets that include one
# should set this to list all the .o or .a files to be linked in.
SIM =

WIN32LIBS = @WIN32LIBS@

# Where is the TCL library? Typically in ../tcl.
LIB_INSTALL_DIR = $(libdir)
# This variable is needed when doing dynamic linking.
LIB_RUNTIME_DIR = $(libdir)
TCL_DIR = ../tcl
TCL = @TCL_CC_SEARCH_FLAGS@ @TCL_BUILD_LIB_SPEC@
TCL_CFLAGS = @TCLHDIR@
GDBTKLIBS = @GDBTKLIBS@
# Extra flags that the GDBTK files need:
GDBTK_CFLAGS = @GDBTK_CFLAGS@

# Where is the TK library? Typically in ../tk.
TK = @TK_BUILD_LIB_SPEC@
TK_CFLAGS = @TKHDIR@ @TK_BUILD_INCLUDES@

# Where is Itcl? Typically in ../itcl/itcl.
ITCL_CFLAGS = @ITCLHDIR@
ITCL = @ITCLLIB@

# Where is Itk? Typically in ../itcl/itk.
ITK_CFLAGS = @ITKHDIR@
ITK = @ITKLIB@

X11_CFLAGS = @TK_XINCLUDES@ @X_CFLAGS@
X11_LDFLAGS = @X_LDFLAGS@
X11_LIBS = @X_PRE_LIBS@ @X_LIBS@ @X_EXTRA_LIBS@

WIN32LDAPP = @WIN32LDAPP@

LIBXML2_CONFIG = @LIBXML2_CONFIG@
LIBXML2_INCLUDES = @LIBXML2_INCLUDES@
LIBXML2_LIBS = @LIBXML2_LIBS@
 
LIBGUI = @LIBGUI@
GUI_CFLAGS_X = @GUI_CFLAGS_X@
IDE_CFLAGS=$(GUI_CFLAGS_X) $(IDE_CFLAGS_X)

# The version of gdbtk we are building. This should be kept
# in sync with GDBTK_VERSION and friends in gdbtk.h.
GDBTK_VERSION = 1.0
GDBTK_LIBRARY = $(datadir)/insight$(GDBTK_VERSION)

# Gdbtk requires an absolute path to the source directory or
# the testsuite will NOT run properly.
GDBTK_SRC_DIR = @GDBTK_SRC_DIR@

SUBDIR_GDBTK_OBS = \
	gdbtk.o gdbtk-bp.o gdbtk-cmds.o gdbtk-hooks.o gdbtk-interp.o \
	gdbtk-register.o gdbtk-stack.o gdbtk-varobj.o gdbtk-wrapper.o
SUBDIR_GDBTK_SRCS = \
	gdbtk/generic/gdbtk.c gdbtk/generic/gdbtk-bp.c \
	gdbtk/generic/gdbtk-cmds.c gdbtk/generic/gdbtk-hooks.c \
	gdbtk/generic/gdbtk-interp.c \
	gdbtk/generic/gdbtk-register.c gdbtk/generic/gdbtk-stack.c \
	gdbtk/generic/gdbtk-varobj.c gdbtk/generic/gdbtk-wrapper.c \
	gdbtk/generic/gdbtk-main.c
SUBDIR_GDBTK_DEPS = \
	$(LIBGUI) $(ITCL_DEPS) $(ITK_DEPS) $(TK_DEPS) $(TCL_DEPS)
SUBDIR_GDBTK_LDFLAGS= @GDBTKLIBS@
SUBDIR_GDBTK_CFLAGS= -DGDBTK @GDBTK_CFLAGS@

CONFIG_OBS = @CONFIG_OBS@
CONFIG_SRCS = @CONFIG_SRCS@
CONFIG_DEPS = @CONFIG_DEPS@
CONFIG_LDFLAGS = @CONFIG_LDFLAGS@
ENABLE_CFLAGS = @ENABLE_CFLAGS@
ENABLE_LDFLAGS = @ENABLE_LDFLAGS@
CONFIG_ALL = @CONFIG_ALL@
CONFIG_CLEAN = @CONFIG_CLEAN@
CONFIG_INSTALL = @CONFIG_INSTALL@
CONFIG_UNINSTALL = @CONFIG_UNINSTALL@

# ${acl_cv_wp}-I. for config files.
# ${acl_cv_wp}-I$(srcdir) for gdb internal headers.
# ${acl_cv_wp}-I$(srcdir)/config for more generic config files.

# It is also possible that you will need to add ${acl_cv_wp}-I/usr/include/sys
# if your system does NOT have fcntl.h in /usr/include (which is where it
# should be according to Posix).
DEFS = @DEFS@ @EXTRA_DEFS@
GDB_CFLAGS = ${acl_cv_wp}-I. ${acl_cv_wp}-I$(srcdir) \
  ${acl_cv_wp}-I$(srcdir)/config ${acl_cv_wp}-I$(srcdir)/target \
  $(DEFS) -DLOCALEDIR="\"$(localedir)\"" @MAINT@ @FCNTL_H_CFLAGS@

# M{H,T}_CFLAGS, if defined, have host- and target-dependent CFLAGS
# from the config directory.
GLOBAL_CFLAGS = $(MT_CFLAGS) $(MH_CFLAGS)

PROFILE_CFLAGS = @PROFILE_CFLAGS@

# architecture flags:
C_ARCHFLAGS = @C_ARCHFLAGS@
C_BUILDARCHFLAGS = @C_BUILDARCHFLAGS@
C_TARGARCHFLAGS = @C_TARGARCHFLAGS@

# CFLAGS is specifically reserved for setting from the command line
# when running make.  I.E.  "make CFLAGS=-Wmissing-prototypes".
CFLAGS = @CFLAGS@

# Set by configure
INTERNAL_CPPFLAGS = @CPPFLAGS@ ${acl_cv_wp}-Iattic ${acl_cv_wp}-I. \
  ${acl_cv_wp}-Itarget ${acl_cv_wp}-I$(srcdir)/target \
  ${acl_cv_wp}-Inat ${acl_cv_wp}-Icommon @MAINT@ @POSIXCHECK_CPPFLAGS@

OBJCPPFLAGS = @CPPFLAGS@
INTERNAL_OBJCPPFLAGS = @CPPFLAGS@ ${acl_cv_wp}-Iattic ${acl_cv_wp}-I. \
  ${acl_cv_wp}-Itarget ${acl_cv_wp}-I$(srcdir)/target \
  ${acl_cv_wp}-Inat ${acl_cv_wp}-Icommon @MAINT@ @POSIXCHECK_CPPFLAGS@

# Need to pass this to testsuite for "make check". Probably should be
# consistent with top-level Makefile.in and gdb/testsuite/Makefile.in
# so "make check" has the same result no matter where it is run.
CXXFLAGS = -ggdb -O1

CONFIGURED_CXXFLAGS = @CXXFLAGS@

# INTERNAL_CFLAGS is the aggregate of all other *CFLAGS macros.
INTERNAL_WARN_CFLAGS = \
	$(CFLAGS) $(C_ARCHFLAGS) $(GLOBAL_CFLAGS) $(PROFILE_CFLAGS) \
	$(GDB_CFLAGS) $(OPCODES_CFLAGS) $(READLINE_CFLAGS) $(ZLIBINC) \
	$(BFD_CFLAGS) $(INCLUDE_CFLAGS) \
	$(MMALLOC_CFLAGS) \
	$(INTL_CFLAGS) $(ENABLE_CFLAGS) \
	$(LIBDECNUMBER_CFLAGS) \
	$(LIBXML2_CFLAGS) \
	$(MIG_CHECKING) \
	$(UNIX03_UGH_CFLAGS) \
	$(GDB_WARN_CFLAGS)
INTERNAL_CFLAGS = $(INTERNAL_WARN_CFLAGS) $(GDB_WERROR_CFLAGS)
INTERNAL_WARN_OBJCFLAGS = \
	$(CFLAGS) $(C_ARCHFLAGS) $(GLOBAL_CFLAGS) $(PROFILE_CFLAGS) \
	$(GDB_CFLAGS) $(OPCODES_CFLAGS) $(READLINE_CFLAGS) $(ZLIBINC) \
	$(BFD_CFLAGS) $(INCLUDE_CFLAGS) \
	$(MMALLOC_CFLAGS) \
	$(INTL_CFLAGS) $(ENABLE_CFLAGS) \
	$(LIBDECNUMBER_CFLAGS) \
	$(LIBXML2_CFLAGS) \
	$(MIG_CHECKING) \
	$(UNIX03_UGH_CFLAGS) \
	$(GDB_WARN_OBJCFLAGS) \
	$(EXCEPTIONS_OBJCFLAGS) \
	$(OBJCFLAGS)
INTERNAL_OBJCFLAGS = $(INTERNAL_WARN_OBJCFLAGS) $(GDB_WERROR_CFLAGS)

# LDFLAGS is specifically reserved for setting from the command line
# when running make.
LDFLAGS = @LDFLAGS@

LIBSQLITE3 = -lsqlite3

# Profiling options need to go here to work.
# I think it is perfectly reasonable for a user to set -pg in CFLAGS
# and have it work; that is why CFLAGS is here.
# PROFILE_CFLAGS is _not_ included, however, because we use monstartup.
INTERNAL_LDFLAGS = $(CFLAGS) $(C_ARCHFLAGS) $(GLOBAL_CFLAGS) $(MH_LDFLAGS) $(LDFLAGS) $(CONFIG_LDFLAGS) $(INTL_LDFLAGS) $(GDB_WARN_LDFLAGS)

# If your system is missing alloca(), or, more likely, it is there but
# it does NOT work, then refer to libiberty.

# Libraries and corresponding dependencies for compiling gdb.
# {X,T}M_CLIBS, defined in *config files, have host/target-dependent libs.
# LIBIBERTY appears twice on purpose (but why though?).
# If you have the Cygnus libraries installed,
# you can use 'CLIBS=$(INSTALLED_LIBS)' 'CDEPS='
INSTALLED_LIBS=-lbfd -lreadline -lopcodes -liberty \
	$(XM_CLIBS) $(TM_CLIBS) $(NAT_CLIBS) $(GDBTKLIBS) @LIBS@ \
	-lintl -liberty
CLIBS = $(SIM) $(READLINE) $(OPCODES) $(BFD) $(ZLIB) $(INTL) $(LIBIBERTY) \
	$(XM_CLIBS) $(TM_CLIBS) $(NAT_CLIBS) $(GDBTKLIBS) @LIBS@ \
	$(LIBICONV) \
        $(CARBON_LDFLAGS) \
	$(DEBUG_SYMBOLS_LDFLAGS) \
	$(MMALLOC) $(WITH_MMALLOC) $(WIN32LIBS) $(LIBSQLITE3)

CDEPS = $(XM_CDEPS) $(TM_CDEPS) $(NAT_CDEPS) $(SIM) $(BFD_DEP) \
	$(READLINE_DEP) $(OPCODES_DEP) $(MMALLOC_DEP) $(INTL_DEP) \
	$(LIBIBERTY_DEP) $(CONFIG_DEPS) $(LIBIBERTY_DEP) $(WIN32LIBS)

ADD_FILES = $(XM_ADD_FILES) $(TM_ADD_FILES) $(NAT_ADD_FILES)
ADD_DEPS = $(XM_ADD_FILES) $(TM_ADD_FILES) $(NAT_ADD_FILES)

DIST=gdb

CXREF_FLAGS_1 = $(GDB_CFLAGS) $(OPCODES_CFLAGS) $(READLINE_CFLAGS) \
	$(BFD_CFLAGS) $(INCLUDE_CFLAGS) \
	$(INTL_CFLAGS) $(LIBXML2_CFLAGS) $(MIG_CHECKING) \
	$(UNIX03_UGH_CFLAGS)

CXREF_FLAGS = `echo $(CXREF_FLAGS_1) | $(SED) "s/-Wp,//g"`

LINT=/usr/5bin/lint
LINT_CONFIGURED=@LINT@
LINTFLAGS= $(CXREF_FLAGS) @MAINT@ @LINT_OPTS@

CLANG_ANALYZER = @CLANG_ANALYZER@

RUN_CLANG_ANALYZER = $(CLANG_ANALYZER) $(DEFS) $(INCLUDE_CFLAGS) \
  $(CXREF_FLAGS) $(INTERNAL_CPPFLAGS) $(MYCPPFLAGS) $(MT_CFLAGS) \
  $(C_ARCHFLAGS) $(MMALLOC_CFLAGS) $(TCL_CFLAGS) $(TK_CFLAGS) \
  $(ITCL_CFLAGS) $(ITK_CFLAGS) $(X11_CFLAGS) $(IDE_CFLAGS) \
  -DGDBTK_LIBRARY=\"$(GDBTK_LIBRARY)\" -DSRC_DIR=\"$(GDBTK_SRC_DIR)\" \
  -DDEBUG -D_DEBUG -Dlint ${acl_cv_wp}-I. --analyze

RUNTEST = `if [ -f $${rootsrc}/../dejagnu/runtest ]; then \
		echo $${rootsrc}/../dejagnu/runtest; else echo runtest; \
	   fi`

RUNTESTFLAGS=

# This is ser-unix.o for any system which supports a v7/BSD/SYSV/POSIX
# interface to the serial port. Hopefully if get ported to OS/2, VMS,
# etc., then there will be (as part of the C library or perhaps as
# part of libiberty) a POSIX interface.  But at least for now the
# host-dependent makefile fragment might need to use something else
# besides ser-unix.o
SER_HARDWIRE = @SER_HARDWIRE@

# The `remote' debugging target is supported for most architectures,
# but not all (e.g. 960)
REMOTE_OBS = remote.o dcache.o remote-utils.o tracepoint.o ax-general.o ax-gdb.o remote-fileio.o

# This is remote-sim.o if a simulator is to be linked in.
SIM_OBS = @DEFAULT_SIM_OB@

###########################################################################
## Host-dependent Makefile fragment comes in here:
@host_makefile_frag@
## End of host-dependent makefile fragment.
###########################################################################
## Target-dependent Makefile fragment comes in here:
@target_makefile_frag@
## End of target-dependent makefile fragment.
###########################################################################

# Possibly ignore the simulator. If the simulator is being ignored,
# these expand into SIM= and SIM_OBJ=, overriding the entries from
# target_makefile_frag
#
@IGNORE_SIM@
@IGNORE_SIM_OBS@

FLAGS_TO_PASS = \
	"prefix=$(prefix)" \
	"exec_prefix=$(exec_prefix)" \
	"infodir=$(infodir)" \
	"libdir=$(libdir)" \
	"mandir=$(mandir)" \
	"datadir=$(datadir)" \
	"includedir=$(includedir)" \
	"against=$(against)" \
	"DESTDIR=$(DESTDIR)" \
	"AR=$(AR)" \
	"AR_FLAGS=$(AR_FLAGS)" \
	"CC=$(CC)" \
	"CFLAGS=$(CFLAGS) $(C_ARCHFLAGS)" \
	"CXX=$(CXX)" \
	"CXXFLAGS=$(CXXFLAGS)" \
	"DLLTOOL=$(DLLTOOL)" \
	"LDFLAGS=$(LDFLAGS)" \
	"RANLIB=$(RANLIB)" \
	"MAKEINFO=$(MAKEINFO)" \
	"MAKEHTML=$(MAKEHTML)" \
	"MAKEHTMLFLAGS=$(MAKEHTMLFLAGS)" \
	"INSTALL=$(INSTALL)" \
	"INSTALL_PROGRAM=$(INSTALL_PROGRAM)" \
	"INSTALL_DATA=$(INSTALL_DATA)" \
	"RUNTEST=$(RUNTEST)" \
	"RUNTESTFLAGS=$(RUNTESTFLAGS)"

# Flags that we pass when building the testsuite.

# empty for native, $(target_alias)/ for cross
target_subdir = @target_subdir@

CC_FOR_TARGET = ` \
  if [ -f $${rootme}/../gcc/xgcc ]; then \
    if [ -f $${rootme}/../$(target_subdir)newlib/Makefile ]; then \
      echo $${rootme}/../gcc/xgcc -B$${rootme}/../gcc/ -idirafter $${rootme}/$(target_subdir)newlib/targ-include -idirafter $${rootsrc}/../$(target_subdir)newlib/libc/include -nostdinc -B$${rootme}/../$(target_subdir)newlib/; \
    else \
      echo $${rootme}/../gcc/xgcc -B$${rootme}/../gcc/; \
    fi; \
  else \
    if [ "x$(host_canonical)" = "x$(target_canonical)" ]; then \
      echo "$(CC)"; \
    else \
      t='$(program_transform_name)'; echo gcc | $(SED) -e '' $${t}; \
    fi; \
  fi`

UNCONFIGURED_CXX = gcc
CXX_FOR_TARGET = ` \
  if [ -f $${rootme}/../gcc/xgcc ]; then \
    if [ -f $${rootme}/../$(target_subdir)newlib/Makefile ]; then \
      echo $${rootme}/../gcc/xgcc -B$${rootme}/../gcc/ -idirafter $${rootme}/$(target_subdir)newlib/targ-include -idirafter $${rootsrc}/../$(target_subdir)newlib/libc/include -nostdinc -B$${rootme}/../$(target_subdir)newlib/; \
    else \
      echo $${rootme}/../gcc/xgcc -B$${rootme}/../gcc/; \
    fi; \
  else \
    if [ "x$(host_canonical)" = "x$(target_canonical)" ]; then \
      echo $(CXX); \
    else \
      t='$(program_transform_name)'; echo gcc | $(SED) -e '' $${t}; \
    fi; \
  fi`

# The use of $$(x_FOR_TARGET) reduces the command line length by not
# duplicating the lengthy definition.
TARGET_FLAGS_TO_PASS = \
	"prefix=$(prefix)" \
	"exec_prefix=$(exec_prefix)" \
	"against=$(against)" \
	'CC=$$(CC_FOR_TARGET)' \
	"CC_FOR_TARGET=$(CC_FOR_TARGET)" \
	"CFLAGS=$(CFLAGS) $(C_ARCHFLAGS)" \
	'CXX=$$(CXX_FOR_TARGET)' \
	"CXX_FOR_TARGET=$(CXX_FOR_TARGET)" \
	"CXXFLAGS=$(CXXFLAGS)" \
	"INSTALL=$(INSTALL)" \
	"INSTALL_PROGRAM=$(INSTALL_PROGRAM)" \
	"INSTALL_DATA=$(INSTALL_DATA)" \
	"MAKEINFO=$(MAKEINFO)" \
	"MAKEHTML=$(MAKEHTML)" \
	"RUNTEST=$(RUNTEST)" \
	"RUNTESTFLAGS=$(RUNTESTFLAGS)"

# All source files that go into linking GDB.
# Links made at configuration time should not be specified here, since
# SFILES is used in building the distribution archive.

# APPLE LOCAL begin subroutine inlining:
SFILES = ada-exp.y ada-lang.c ada-typeprint.c ada-valprint.c \
  ax-general.c ax-gdb.c \
  bcache.c \
  bfd-target.c \
  block.c blockframe.c breakpoint.c buildsym.c \
  c-exp.y c-lang.c c-typeprint.c c-valprint.c \
  charset.c cli-out.c coffread.c coff-pe-read.c \
  complaints.c completer.c corefile.c \
  cp-abi.c cp-support.c cp-namespace.c cp-valprint.c \
  cp-name-parser.y \
  dbxread.c demangle.c dictionary.c disasm.c doublest.c dummy-frame.c \
  dwarfread.c dwarf2expr.c dwarf2loc.c dwarf2read.c dwarf2read-repository.c \
  dwarf2-frame.c \
  elfread.c environ.c eval.c event-loop.c event-top.c expprint.c \
  f-exp.y f-lang.c f-typeprint.c f-valprint.c findvar.c frame.c \
  frame-base.c \
  frame-unwind.c \
  gdbarch.c arch-utils.c gdbtypes.c gnu-v2-abi.c gnu-v3-abi.c \
  hpacc-abi.c \
  inf-loop.c \
  infcall.c \
  infcmd.c inflow.c infrun.c \
  inlining.c \
  interps.c \
  jv-exp.y jv-lang.c jv-valprint.c jv-typeprint.c \
  kod.c kod-cisco.c \
  language.c linespec.c \
  m2-exp.y m2-lang.c m2-typeprint.c m2-valprint.c \
  macrotab.c macroexp.c macrocmd.c macroscope.c main.c maint.c \
  mdebugread.c memattr.c mem-break.c minsyms.c mipsread.c \
  nlmread.c \
  objc-exp.y objc-lang.c \
  objfiles.c osabi.c observer.c \
  p-exp.y p-lang.c p-typeprint.c p-valprint.c parse.c printcmd.c \
  regcache.c reggroups.c remote.c remote-fileio.c \
  scm-exp.c scm-lang.c scm-valprint.c \
  sentinel-frame.c \
  serial.c ser-base.c ser-unix.c \
  solib.c solib-null.c source.c \
  stabsread.c stack.c std-regs.c symfile.c symfile-mem.c symmisc.c \
  symtab.c \
  target/target.c thread.c top.c tracepoint.c \
  trad-frame.c \
  tramp-frame.c \
  typeprint.c \
  ui-out.c utils.c ui-file.h ui-file.c \
  user-regs.c \
  valarith.c valops.c valprint.c value.c varobj.c \
  wrapper.c target/i386-amd64-shared-tdep.c target/x86-shared-tdep.c \
  xmodem.c @MAINT@@APPLE_MAINT@@EXTRA_YFLAGS_SEP@ go-exp.y
# APPLE LOCAL end subroutine inlining

LINTFILES = $(SFILES) $(YYFILES) $(CONFIG_SRCS) init.c

# "system" headers.  Using these in dependencies is a rather personal
# choice. (-rich, summer 1993)
# (Why would we not want to depend on them?  If one of these changes in a
# non-binary-compatible way, it is a real pain to remake the right stuff
# without these dependencies -kingdon, 13 Mar 1994)
ansidecl_h = $(INCLUDE_DIR)/ansidecl.h
aout_aout64_h =	$(INCLUDE_DIR)/aout/aout64.h
aout_stabs_gnu_h =	$(INCLUDE_DIR)/aout/stabs_gnu.h
getopt_h =	$(INCLUDE_DIR)/getopt.h
floatformat_h =	$(INCLUDE_DIR)/floatformat.h $(ansidecl_h)
bfd_h =		$(BFD_DIR)/bfd.h $(ansidecl_h) $(symcat_h)
__bfd_bfd_h = $(bfd_h)
bfdlink_h = $(INCLUDE_DIR)/bfdlink.h
coff_sym_h =	$(INCLUDE_DIR)/coff/sym.h
coff_symconst_h =	$(INCLUDE_DIR)/coff/symconst.h
coff_ecoff_h =	$(INCLUDE_DIR)/coff/ecoff.h
coff_internal_h =	$(INCLUDE_DIR)/coff/internal.h
dis_asm_h =	$(INCLUDE_DIR)/dis-asm.h $(bfd_h)
elf_reloc_macros_h =	$(INCLUDE_DIR)/elf/reloc-macros.h
elf_sh_h =	$(INCLUDE_DIR)/elf/sh.h $(elf_reloc_macros_h)
elf_arm_h =	$(INCLUDE_DIR)/elf/arm.h $(elf_reloc_macros_h)
elf_bfd_h = $(BFD_SRC)/elf-bfd.h $(bfd_h) $(elf_common_h) \
  $(elf_internal_h) $(elf_external_h) $(bfdlink_h)
elf_common_h = $(INCLUDE_DIR)/elf/common.h
elf_dwarf2_h = $(INCLUDE_DIR)/elf/dwarf2.h
elf_external_h = $(INCLUDE_DIR)/elf/external.h
elf_frv_h =	$(INCLUDE_DIR)/elf/frv.h $(elf_reloc_macros_h)
elf_internal_h = $(INCLUDE_DIR)/elf/internal.h
filenames_h = $(INCLUDE_DIR)/filenames.h
gnulib_regex_h = $(INCLUDE_DIR)/gnulib_regex.h
libaout_h =	$(BFD_SRC)/libaout.h $(bfdlink_h)
libiberty_h =	$(INCLUDE_DIR)/libiberty.h $(ansidecl_h)
libbfd_h =	$(BFD_SRC)/libbfd.h $(hashtab_h)
remote_sim_h =	$(INCLUDE_DIR)/gdb/remote-sim.h
demangle_h =    $(INCLUDE_DIR)/demangle.h $(libiberty_h)
obstack_h =     $(INCLUDE_DIR)/obstack.h
opcode_cgen_h = $(INCLUDE_DIR)/opcode/cgen.h
opcode_m68hc11_h = $(INCLUDE_DIR)/opcode/m68hc11.h
readline_h = $(READLINE_SRC)/readline.h $(rlstdc_h) $(rltypedefs_h) \
  $(readline_tilde_h) $(readline_keymaps_h) $(readline_tilde_h)
readline_chardefs_h = $(READLINE_SRC)/chardefs.h
readline_keymaps_h = $(READLINE_SRC)/keymaps.h $(rlstdc_h) \
  $(readline_chardefs_h) $(rltypedefs.h)
readline_tilde_h =	$(READLINE_SRC)/tilde.h
readline_history_h =	$(READLINE_SRC)/history.h
rlstdc_h = $(READLINE_SRC)/rlstdc.h
rltypedefs_h = $(READLINE_SRC)/rltypedefs.h
regex_internal_h = $(INCLUDE_DIR)/regex_internal.h
regex_quote_h = $(INCLUDE_DIR)/regex-quote.h
frv_desc_h =	$(OPCODES_SRC)/frv-desc.h $(opcode_cgen_h)
opcodes_frv_desc_h = $(frv_desc_h)
sh_opc_h = 	$(OPCODES_SRC)/sh-opc.h $(bfd_h)
gdb_callback_h = $(INCLUDE_DIR)/gdb/callback.h $(bfd_h)
gdb_sim_arm_h =	$(INCLUDE_DIR)/gdb/sim-arm.h
gdb_sim_d10v_h = $(INCLUDE_DIR)/gdb/sim-d10v.h
gdb_sim_frv_h = $(INCLUDE_DIR)/gdb/sim-frv.h
gdb_sim_ppc_h =	$(INCLUDE_DIR)/gdb/sim-ppc.h
gdb_sim_sh_h =	$(INCLUDE_DIR)/gdb/sim-sh.h
splay_tree_h =  $(INCLUDE_DIR)/splay-tree.h $(ansidecl_h)
safe_ctype_h =  $(INCLUDE_DIR)/safe-ctype.h
symcat_h = $(INCLUDE_DIR)/symcat.h
hashtab_h =	$(INCLUDE_DIR)/hashtab.h $(ansidecl_h)
mmalloc_h = $(MMALLOC_DIR)/mmalloc.h $(ansidecl_h)
mmprivate_h = $(MMALLOC_DIR)/mmprivate.h $(config_h) $(mmalloc_h)
mach_o_h = $(BFD_SRC)/mach-o.h $(ansidecl_h) $(bfd_h)
xsym_h = $(BFD_SRC)/xsym.h $(bfd_h)
xregex_h = $(INCLUDE_DIR)/xregex.h $(xregex2_h)
xregex2_h = $(INCLUDE_DIR)/xregex2.h

#
# ${BUILD}/ headers
#

config_h = config.h
exc_request_U_h = exc_request_U.h
exc_request_S_h = exc_request_S.h
msg_reply_S_h = msg_reply_S.h
msg_U_h = msg_U.h
notify_S_h = notify_S.h
observer_h = observer.h
observer_inc = observer.inc
process_reply_S_h = process_reply_S.h

#
# config/ headers
#

xm_h =		@xm_h@
tm_h =		@tm_h@
nm_h =		@nm_h@

#
# gdb/ headers
#

ada_lang_h = ada-lang.h $(value_h) $(gdbtypes_h) $(breakpoint_h) \
  $(expression_h)
ada_lex_c = ada-lex.c $(gdb_string_h)
alphabsd_tdep_h = alphabsd-tdep.h
alpha_tdep_h = alpha-tdep.h
amd64_nat_h = amd64-nat.h
amd64_tdep_h = amd64-tdep.h $(i386_tdep_h)
annotate_h = annotate.h $(ansidecl_h) $(symtab_h) $(gdbtypes_h)
arch_utils_h = arch-utils.h $(ansidecl_h)
arm_tdep_h = arm-tdep.h $(defs_h) $(gdbarch_h) $(reggroups_h)
auxv_h = auxv.h
ax_gdb_h = ax-gdb.h
ax_h = ax.h $(doublest_h)
bcache_h = bcache.h $(ansidecl_h)
bfd_target_h = bfd-target.h $(defs_h)
block_h = block.h $(defs_h) $(bfd_h)
breakpoint_h = breakpoint.h $(ansidecl_h) $(frame_h) $(value_h) \
  $(gdb_events_h)
bsd_kvm_h = bsd-kvm.h
bsd_uthread_h = bsd-uthread.h
buildsym_h = buildsym.h
call_cmds_h = call-cmds.h $(ansidecl_h)
charset_h = charset.h
c_lang_h = c-lang.h $(value_h) $(macroexp_h) $(language_h) $(parser_defs_h)
checkpoint_h = checkpoint.h
cleanups_h = cleanups.h
cli_out_h = cli-out.h
coff_pe_read_h = coff-pe-read.h
coff_solib_h = coff-solib.h
command_h = command.h $(ansidecl_h)
complaints_h = complaints.h
completer_h = completer.h
cp_abi_h = cp-abi.h
cp_support_h = cp-support.h $(symtab_h)
db_access_functions_h = db-access-functions.h $(objfiles_h)
dcache_h = dcache.h
defs_h = defs.h $(config_h) $(ansidecl_h) $(gdb_locale_h) \
  $(gdb_signals_h) $(libiberty_h) $(bfd_h) $(ui_file_h) \
  $(xm_h) $(nm_h) $(tm_h) $(fopen_bin_h) $(gdbarch_h)
dictionary_h = dictionary.h
disasm_h = disasm.h
doublest_h = doublest.h $(ansidecl_h) $(floatformat_h)
dummy_frame_h = dummy-frame.h
dwarf2expr_h = dwarf2expr.h $(dwarf2loc_h)
dwarf2_frame_h = dwarf2-frame.h
dwarf2loc_h = dwarf2loc.h $(dwarf2read_h)
dwarf2read_h = dwarf2read.h $(bfd_h) $(buildsym_h) $(elf_dwarf2_h) \
  $(hashtab_h) $(db_access_functions_h)
dwarfread_h = dwarfread.h $(buildsym_h)
environ_h = environ.h
eval_h = eval.h
event_loop_h = event-loop.h
event_top_h = event-top.h
exceptions_h = exceptions.h $(ansidecl_h) $(ui_out_h)
exec_h = exec.h $(target_h)
expression_h = expression.h $(symtab_h) $(doublest_h)
fbsd_nat_h = fbsd-nat.h
f_lang_h = f-lang.h $(language_h)
fix_and_continue_h = fix-and-continue.h
fork_child_h = fork-child.h
frame_base_h = frame-base.h
frame_h = frame.h
frame_unwind_h = frame-unwind.h $(frame_h) $(value_h)
frv_tdep_h = frv-tdep.h
gdbarch_h = gdbarch.h
gdb_assert_h = gdb_assert.h
gdbcmd_h = gdbcmd.h $(ansidecl_h) $(command_h) $(ui_out_h)
gdbcore_h = gdbcore.h $(ansidecl_h) $(bfd_h)
gdb_curses_h = gdb_curses.h
gdb_dirent_h = gdb_dirent.h
gdb_events_h = gdb-events.h $(ansidecl_h)
gdb_h = gdb.h
gdb_locale_h = gdb_locale.h $(config_h)
gdb_obstack_h = gdb_obstack.h $(obstack_h)
gdb_proc_service_h = gdb_proc_service.h $(gregset_h)
gdb_ptrace_h = gdb_ptrace.h
gdb_regex_h = gdb_regex.h $(xregex_h)
gdb_stabs_h = gdb-stabs.h
gdb_stat_h = gdb_stat.h
gdb_string_h = gdb_string.h
gdb_thread_db_h = gdb_thread_db.h
gdbthread_h = gdbthread.h $(breakpoint_h) $(frame_h) $(inlining_h)
gdbtypes_h = gdbtypes.h
gdb_vfork_h = gdb_vfork.h
gdb_wait_h = gdb_wait.h
glibc_tdep_h = glibc-tdep.h
gnu_nat_h = gnu-nat.h
gnu_v2_abi_h = gnu-v2-abi.h $(gdbtypes_h) $(cp_abi_h)
go_lang_h = go-lang.h $(gdbtypes_h) $(symtab_h) $(value_h)
gregset_h = gregset.h
hpacc_abi_h = hpacc-abi.h $(cp_abi_h)
hppa_tdep_h = hppa-tdep.h
i386bsd_nat_h = i386bsd-nat.h
i386_amd64_shared_tdep_h = target/i386-amd64-shared-tdep.h
i386_linux_tdep_h = i386-linux-tdep.h
i386_tdep_h = i386-tdep.h $(ansidecl_h)
i387_tdep_h = i387-tdep.h
ia64_tdep_h = ia64-tdep.h
infcall_h = infcall.h
inf_child_h = inf-child.h $(symtab_h) $(target_h)
infcmd_h = infcmd.h $(checkpoint_h)
inferior_h = inferior.h $(breakpoint_h) $(target_h) $(frame_h)
inf_loop_h = inf-loop.h
inflow_h = inflow.h $(terminal_h)
inftarg_h = inftarg.h
inf_ptrace_h = inf-ptrace.h
inf_ttrace_h = inf-ttrace.h
# APPLE LOCAL begin subroutine inlining:
inlining_h = inlining.h $(frame_h) $(bfd_h)
# APPLE LOCAL end subroutine inlining
interps_h = interps.h $(exceptions_h)
jv_lang_h = jv-lang.h $(parser_defs_h) $(language_h)
kod_h = kod.h
language_h = language.h $(expression_h)
libunwind_h = ## FIXME: where is this?
libunwind_frame_h = libunwind-frame.h $(libunwind_h)
linespec_h = linespec.h
linux_nat_h = linux-nat.h $(target_h)
m2_lang_h = m2-lang.h $(language_h)
m32r_tdep_h = m32r-tdep.h
m68k_tdep_h = m68k-tdep.h
m88k_tdep_h = m88k-tdep.h
macroexp_h = macroexp.h
macroscope_h = macroscope.h $(macrotab_h) $(symtab_h)
macrotab_h = macrotab.h
main_h = main.h $(ansidecl_h)
maint_h = maint.h
mdebugread_h = mdebugread.h $(coff_sym_h) $(coff_symconst_h)
mem_break_h = mem-break.h
memattr_h = memattr.h
minsyms_h = minsyms.h $(ansidecl_h)
mips_mdebug_tdep_h = mips-mdebug-tdep.h
mipsnbsd_tdep_h = mipsnbsd-tdep.h
mips_tdep_h = mips-tdep.h $(ansidecl_h)
mn10300_tdep_h = mn10300-tdep.h
monitor_h = monitor.h $(ansidecl_h)
nbsd_tdep_h = nbsd-tdep.h
nto_tdep_h = nto-tdep.h $(defs_h) $(solist_h) $(osabi_h) $(regset_h)
objc_lang_h = objc-lang.h $(language_h)
objfiles_h = objfiles.h $(ansidecl_h) $(gdb_obstack_h) $(symfile_h) \
  $(inlining_h)
ocd_h = ocd.h
osabi_h = osabi.h
osdata_h = osdata.h $(vec_h)
parser_defs_h = parser-defs.h $(doublest_h)
p_lang_h = p-lang.h $(parser_defs_h) $(language_h)
ppcnbsd_tdep_h = ppcnbsd-tdep.h
ppcobsd_tdep_h = ppcobsd-tdep.h
ppc_tdep_h = ppc-tdep.h
printcmd_h = printcmd.h
proc_utils_h = proc-utils.h
regcache_h = regcache.h $(ansidecl_h)
reggroups_h = reggroups.h
regset_h = regset.h
remote_fileio_h = remote-fileio.h
remote_h = remote.h $(ansidecl_h)
remote_utils_h = remote-utils.h $(target_h)
rs6000_tdep_h = rs6000-tdep.h
s390_tdep_h = s390-tdep.h
scm_lang_h = scm-lang.h $(parser_defs_h) $(language_h) $(scm_tags_h)
scm_tags_h = scm-tags.h
sentinel_frame_h = sentinel-frame.h
serial_h = serial.h $(ansidecl_h)
ser_base_h = ser-base.h
ser_unix_h = ser-unix.h
shnbsd_tdep_h = shnbsd-tdep.h
sh_tdep_h = sh-tdep.h
sim_regno_h = sim-regno.h
solib_h = solib.h
solib_pa64_h = solib-pa64.h
solib_som_h = solib-som.h
solib_svr4_h = solib-svr4.h
solist_h = solist.h
source_h = source.h
sparc64_tdep_h = sparc64-tdep.h $(sparc_tdep_h)
sparc_nat_h = sparc-nat.h
sparc_tdep_h = sparc-tdep.h
srec_h = srec.h
stabsread_h = stabsread.h
stack_h = stack.h
symfile_h = symfile.h $(ansidecl_h) $(symtab_h)
symmisc_h = symmisc.h
symtab_h = symtab.h $(defs_h) $(ansidecl_h)
target_h = target.h $(bfd_h) $(symtab_h) $(dcache_h) $(memattr_h)
terminal_h = terminal.h
top_h = top.h
tracepoint_h = tracepoint.h $(ansidecl_h)
trad_frame_h = trad-frame.h $(frame_h)
tramp_frame_h = tramp-frame.h $(frame_h)
typeprint_h = typeprint.h
ui_file_h = ui-file.h
ui_out_h = ui-out.h
user_regs_h = user-regs.h
utils_h = utils.h $(ansidecl_h) $(cleanups_h) $(exceptions_h) \
  $(common_print_utils_h)
valprint_h = valprint.h
value_h = value.h $(ansidecl_h) $(doublest_h) $(gdb_regex_h) $(frame_h) \
  $(symtab_h) $(gdbtypes_h) $(expression_h)
varobj_h = varobj.h $(symtab_h) $(gdbtypes_h)
vax_tdep_h = vax-tdep.h
vec_h = vec.h $(gdb_string_h) $(gdb_assert_h)
version_h = version.h
wince_stub_h = wince-stub.h
wrapper_h = wrapper.h $(gdb_h) $(varobj_h)
# APPLE LOCAL header:
x86_shared_tdep_h = x86-shared-tdep.h
# END APPLE LOCAL header
xcoffsolib_h = xcoffsolib.h
xmodem_h = xmodem.h

#
# gdb/cli/ headers
#

cli_srcdir = $(srcdir)/cli
cli_cmds_h = $(cli_srcdir)/cli-cmds.h
cli_decode_h = $(cli_srcdir)/cli-decode.h $(command_h)
cli_dump_h = $(cli_srcdir)/cli-dump.h
cli_interp_h = $(cli_srcdir)/cli-interp.h $(ui_out_h)
cli_logging_h = $(cli_srcdir)/cli-logging.h
cli_script_h = $(cli_srcdir)/cli-script.h
cli_setshow_h = $(cli_srcdir)/cli-setshow.h
cli_utils_h = $(cli_srcdir)/cli-utils.h

##
# gdb/common/ headers
#

common_srcdir = $(srcdir)/common
common_print_utils_h = $(common_srcdir)/print-utils.h

###
# gdb/gdbtk/generic headers
#

gdbtk_c_srcdir = $(srcdir)/gdbtk/generic
gdbtk_cmds_h = $(gdbtk_c_srcdir)/gdbtk-cmds.h
gdbtk_wrapper_h = $(gdbtk_c_srcdir)/gdbtk-wrapper.h
gdbtk_h = $(gdbtk_c_srcdir)/gdbtk.h

#
# gdb/macosx/ headers
#

macosxsrcdir = $(srcdir)/macosx
arm_macosx_nat_exec_h = $(macosxsrcdir)/arm-macosx-nat-exec.h $(target_h)
arm_macosx_thread_status_h = $(macosxsrcdir)/arm-macosx-thread-status.h
arm_macosx_regnums_h = $(macosxsrcdir)/arm-macosx-regnums.h
arm_macosx_tdep_h = $(macosxsrcdir)/arm-macosx-tdep.h $(defs_h) \
  $(arm_macosx_thread_status_h) $(arm_macosx_regnums_h) $(macosx_tdep_h)
cached_symfile_h = $(macosxsrcdir)/cached-symfile.h $(defs_h)
core_macho_h = $(macosxsrcdir)/core-macho.h $(target_h) 
darwin_kernel_h = $(macosxsrcdir)/darwin-kernel.h $(target_h)
i386_macosx_nat_exec_h = $(macosxsrcdir)/i386-macosx-nat-exec.h \
  $(defs_h) $(target_h)
i386_macosx_tdep_h = $(macosxsrcdir)/i386-macosx-tdep.h \
  $(i386_macosx_thread_status_h)
i386_macosx_thread_status_h = $(macosxsrcdir)/i386-macosx-thread-status.h
kdp_protocol_h = $(macosxsrcdir)/kdp-protocol.h $(ansidecl_h)
kdp_transactions_h = $(macosxsrcdir)/kdp-transactions.h $(kdp_udp_h)
kdp_udp_h = $(macosxsrcdir)/kdp-udp.h $(kdp_protocol_h)
macosx_bundle_utils_h = $(macosxsrcdir)/macosx-bundle-utils.h
macosx_fat_utils_h = $(macosxsrcdir)/macosx-fat-utils.h $(bfd_h)
macosx_nat_cfm_io_h = $(macosxsrcdir)/macosx-nat-cfm-io.h $(symtab_h) \
  $(macosx_nat_dyld_info_h) $(macosx_nat_dyld_path_h)
macosx_nat_cfm_h = $(macosxsrcdir)/macosx-nat-cfm.h
macosx_nat_cfmthread_h = $(macosxsrcdir)/macosx-nat-cfmthread.h \
  $(defs_h) $(macosx_nat_mutils_h) $(macosx_nat_threads_h) \
  $(macosx_nat_cfm_h)
macosx_nat_cmds_load_h = $(macosxsrcdir)/macosx-nat-cmds-load.h
macosx_nat_dyld_h = $(macosxsrcdir)/macosx-nat-dyld.h $(defs_h) \
  $(macosx_nat_mutils_h) $(macosx_nat_threads_h)
macosx_nat_dyld_info_h = $(macosxsrcdir)/macosx-nat-dyld-info.h $(defs_h)
macosx_nat_dyld_io_h = $(macosxsrcdir)/macosx-nat-dyld-io.h $(symtab_h)
macosx_nat_dyld_path_h = $(macosxsrcdir)/macosx-nat-dyld-path.h $(defs_h)
macosx_nat_dyld_process_h = $(macosxsrcdir)/macosx-nat-dyld-process.h \
  $(defs_h)
macosx_nat_excthread_h = $(macosxsrcdir)/macosx-nat-excthread.h \
  $(defs_h) $(macosx_nat_mutils_h) $(macosx_nat_threads_h)
macosx_nat_inferior_h = $(macosxsrcdir)/macosx-nat-inferior.h \
  $(macosx_nat_threads_h) $(macosx_nat_sigthread_h) \
  $(macosx_nat_excthread_h) $(macosx_nat_dyld_h) \
  $(macosx_nat_dyld_info_h) $(defs_h) $(target_h) $(checkpoint_h)
macosx_nat_inferior_debug_h = $(macosxsrcdir)/macosx-nat-inferior-debug.h \
  $(defs_h)
macosx_nat_inferior_stubs_h = $(macosxsrcdir)/macosx-nat-inferior-stubs.h \
  $(defs_h) $(target_h)
macosx_nat_inferior_util_h = $(macosxsrcdir)/macosx-nat-inferior-util.h \
  $(macosx_nat_inferior_h) $(inferior_h)
macosx_nat_info_h = $(macosxsrcdir)/macosx-nat-info.h
macosx_nat_infthread_h = $(macosxsrcdir)/macosx-nat-infthread.h
macosx_nat_mutils_h = $(macosxsrcdir)/macosx-nat-mutils.h $(defs_h) \
  $(memattr_h) $(target_h) $(inferior_h) $(macosx_nat_utils_h)
macosx_nat_sigthread_h = $(macosxsrcdir)/macosx-nat-sigthread.h \
  $(defs_h) $(macosx_nat_mutils_h) $(macosx_nat_threads_h)
macosx_nat_threads_h = $(macosxsrcdir)/macosx-nat-threads.h
macosx_nat_utils_h = $(macosxsrcdir)/macosx-nat-utils.h
macosx_nat_watchpoint_h = $(macosxsrcdir)/macosx-nat-watchpoint.h \
  $(defs_h) $(target_h)
macosx_nat_h = $(macosxsrcdir)/macosx-nat.h
macosx_self_backtrace_h = $(macosxsrcdir)/macosx-self-backtrace.h
macosx_tdep_h = $(macosxsrcdir)/macosx-tdep.h $(defs_h) $(symtab_h)
macosx_xdep_h = $(macosxsrcdir)/macosx-xdep.h
macosx_defs = $(macosxsrcdir)/macosx.defs $(config_h)
nm_arm_macosx_h = $(macosxsrcdir)/nm-arm-macosx.h $(nm_macosx_h)
nm_i386_macosx_h = $(macosxsrcdir)/nm-i386-macosx.h $(nm_macosx_h)
nm_macos_h = $(macosxsrcdir)/nm-macos.h
nm_macosx_h = $(macosxsrcdir)/nm-macosx.h
nm_ppc_macosx_h = $(macosxsrcdir)/nm-ppc-macosx.h $(nm_macosx_h)
ppc_macosx_frameinfo_h = $(macosxsrcdir)/ppc-macosx-frameinfo.h $(defs_h)
ppc_macosx_regnums_h = $(macosxsrcdir)/ppc-macosx-regnums.h
ppc_macosx_regs_h = $(macosxsrcdir)/ppc-macosx-regs.h \
  $(ppc_macosx_thread_status_h)
ppc_macosx_tdep_h = $(macosxsrcdir)/ppc-macosx-tdep.h $(defs_h) \
  $(reggroups_h)
ppc_macosx_thread_status_h = $(macosxsrcdir)/ppc-macosx-thread-status.h
remote_kdp_h = $(macosxsrcdir)/remote-kdp.h $(defs_h) $(target_h)
symread_h = $(macosxsrcdir)/symread.h $(objfiles_h) $(gdbtypes_h)
tm_arm_macosx_h = $(macosxsrcdir)/tm-arm-macosx.h $(tm_macosx_h)
tm_arm_h = $(macosxsrcdir)/tm-arm.h
tm_i386_macosx_h = $(macosxsrcdir)/tm-i386-macosx.h
tm_macos_h = $(macosxsrcdir)/tm-macos.h
tm_macosx_h = $(macosxsrcdir)/tm-macosx.h $(macosx_tdep_h)
tm_ppc_macosx_h = $(macosxsrcdir)/tm-ppc-macosx.h
xm_arm_macosx_h = $(macosxsrcdir)/xm-arm-macosx.h $(xm_macosx_h)
xm_i386_macosx_h = $(macosxsrcdir)/xm-i386-macosx.h $(xm_macosx_h)
xm_macosx_h = $(macosxsrcdir)/xm-macosx.h
xm_ppc_macosx_h = $(macosxsrcdir)/xm-ppc-macosx.h $(xm_macosx_h)

#
# gdb/mi/ headers
#

mi_srcdir = $(srcdir)/mi
mi_cmd_break_h = $(mi_srcdir)/mi-cmd-break.h $(defs_h)
mi_cmd_stack_h = $(mi_srcdir)/mi-cmd-stack.h $(gdb_regex_h)
mi_cmds_h = $(mi_srcdir)/mi-cmds.h
mi_common_h = $(mi_srcdir)/mi-common.h
mi_console_h = $(mi_srcdir)/mi-console.h
mi_getopt_h = $(mi_srcdir)/mi-getopt.h
mi_interp_h = $(mi_srcdir)/mi-interp.h
mi_main_h = $(mi_srcdir)/mi-main.h
mi_out_h = $(mi_srcdir)/mi-out.h $(ui_out_h)
mi_parse_h = $(mi_srcdir)/mi-parse.h $(remote_h)

#
# gdb/tui/ headers
#

tui_srcdir = $(srcdir)/tui
tui_command_h = $(tui_srcdir)/tui-command.h
tui_data_h = $(tui_srcdir)/tui-data.h $(tui_h) $(gdb_curses_h)
tui_disasm_h = $(tui_srcdir)/tui-disasm.h $(tui_h) $(tui_data_h)
tui_file_h = $(tui_srcdir)/tui-file.h
tui_h = $(tui_srcdir)/tui.h
tui_hooks_h = $(tui_srcdir)/tui-hooks.h
tui_io_h = $(tui_srcdir)/tui-io.h
tui_layout_h = $(tui_srcdir)/tui-layout.h $(tui_h) $(tui_data_h)
tui_regs_h = $(tui_srcdir)/tui-regs.h $(tui_data_h)
tui_source_h = $(tui_srcdir)/tui-source.h $(tui_data_h)
tui_stack_h = $(tui_srcdir)/tui-stack.h
tui_windata_h = $(tui_srcdir)/tui-windata.h $(tui_data_h)
tui_wingeneral_h = $(tui_srcdir)/tui-wingeneral.h
tui_win_h = $(tui_srcdir)/tui-win.h $(tui_data_h)
tui_winsource_h = $(tui_srcdir)/tui-winsource.h $(tui_data_h)

# Header files that need to have srcdir added.  Note that in the cases
# where we use a macro like $(gdbcmd_h), things are carefully arranged
# so that each .h file is listed exactly once (M-x tags-search works
# wrong if TAGS has files twice).  Because this is tricky to get
# right, it is probably easiest just to list .h files here directly.

HFILES_NO_SRCDIR = bcache.h buildsym.h call-cmds.h coff-solib.h defs.h \
  exceptions.h \
  environ.h $(gdbcmd_h) gdb.h gdbcore.h \
  gdb-stabs.h $(inferior_h) language.h minimon.h monitor.h \
  objfiles.h parser-defs.h serial.h solib.h \
  symfile.h symfile-mem.h stabsread.h target.h terminal.h typeprint.h \
  xcoffsolib.h \
  macrotab.h macroexp.h macroscope.h \
  ada-lang.h c-lang.h f-lang.h \
  jv-lang.h \
  m2-lang.h p-lang.h \
  complaints.h valprint.h \
  gdbthread.h \
  dcache.h remote-utils.h top.h solib-som.h

# Header files that already have srcdir in them, or which are in objdir.

HFILES_WITH_SRCDIR = $(bfd_h)


# GDB "info" files, which should be included in their entirety
INFOFILES = gdb.info*

REMOTE_EXAMPLES = m68k-stub.c i386-stub.c sparc-stub.c rem-multi.shar

# {X,T,NAT}DEPFILES are something of a pain in that it is hard to
# default their values the way we do for SER_HARDWIRE; in the future
# maybe much of the stuff now in {X,T,NAT}DEPFILES will go into other
# variables analogous to SER_HARDWIRE which get defaulted in this
# Makefile.in

# APPLE LOCAL need XDEPFILES still
DEPFILES = $(TDEPFILES) $(SER_HARDWIRE) $(NATDEPFILES) $(XDEPFILES) \
	   $(REMOTE_OBS) $(SIM_OBS) $(CONFIG_OBS)

SOURCES = $(SFILES) $(ALLDEPFILES) $(YYFILES) $(CONFIG_SRCS)
# Do NOT include YYFILES (*.c) because we already include *.y in SFILES,
# and it is more useful to see it in the .y file.
TAGFILES_NO_SRCDIR = $(SFILES) $(HFILES_NO_SRCDIR) $(ALLDEPFILES) \
	$(SUBDIR_CLI_SRCS)
TAGFILES_WITH_SRCDIR = $(HFILES_WITH_SRCDIR)

COMMON_OBS = $(BASE_OBS) $(YYOBJ) $(DEPFILES)

# APPLE LOCAL begin subroutine inlining:
BASE_OBS = \
  version.o \
  annotate.o \
  auxv.o \
  bfd-target.o \
  blockframe.o breakpoint.o findvar.o regcache.o \
  charset.o disasm.o dummy-frame.o \
  source.o value.o eval.o valops.o valarith.o valprint.o printcmd.o \
  block.o symtab.o symfile.o symmisc.o linespec.o dictionary.o \
  infcall.o \
  infcmd.o infrun.o \
  inlining.o \
  expprint.o environ.o stack.o thread.o \
  exceptions.o \
  inf-child.o \
  interps.o \
  main.o \
  macrotab.o macrocmd.o macroexp.o macroscope.o \
  event-loop.o event-top.o inf-loop.o completer.o \
  gdbarch.o arch-utils.o gdbtypes.o osabi.o copying.o \
  memattr.o mem-break.o target.o parse.o language.o buildsym.o \
  std-regs.o \
  signals.o \
  kod.o kod-cisco.o \
  gdb-events.o \
  exec.o bcache.o objfiles.o observer.o minsyms.o maint.o demangle.o \
  dbxread.o coffread.o coff-pe-read.o elfread.o \
  dwarfread.o dwarf2read.o dwarf2read-repository.o mipsread.o stabsread.o \
  corefile.o \
  dwarf2expr.o dwarf2loc.o dwarf2-frame.o \
  ada-lang.o c-lang.o f-lang.o objc-lang.o \
  ui-out.o cli-out.o \
  varobj.o wrapper.o \
  jv-lang.o jv-valprint.o jv-typeprint.o \
  m2-lang.o p-lang.o p-typeprint.o p-valprint.o \
  scm-exp.o scm-lang.o scm-valprint.o \
  sentinel-frame.o \
  complaints.o typeprint.o \
  ada-typeprint.o c-typeprint.o f-typeprint.o m2-typeprint.o \
  ada-valprint.o c-valprint.o cp-valprint.o f-valprint.o m2-valprint.o \
  nlmread.o serial.o mdebugread.o top.o utils.o \
  ui-file.o \
  user-regs.o \
  frame.o frame-unwind.o doublest.o \
  frame-base.o \
  gnu-v2-abi.o gnu-v3-abi.o hpacc-abi.o cp-abi.o cp-support.o \
  cp-namespace.o \
  reggroups.o regset.o \
  trad-frame.o \
  tramp-frame.o \
  fix-and-continue.o \
  checkpoint.o \
  solib.o solib-null.o \
  i386-amd64-shared-tdep.o \
  x86-shared-tdep.o
# APPLE LOCAL end subroutine inlining

TSOBS = inflow.o

# The configure script does not add gnulib to subdirs by default yet:
@MAKE_SHOULD_RECURSE_INTO_GNULIB_TRUE@SUBDIRS = @subdirs@ @MAINT@ gnulib
@MAKE_SHOULD_RECURSE_INTO_GNULIB_FALSE@SUBDIRS = @subdirs@
@MAKE_SHOULD_RECURSE_INTO_GNULIB_TRUE@CLEANDIRS = $(SUBDIRS) @MAINT@ gnulib
@MAKE_SHOULD_RECURSE_INTO_GNULIB_FALSE@CLEANDIRS = $(SUBDIRS)
UNUSED_SUBDIRS = @unused_subdirs@

# List of subdirectories in the build tree that must exist.
# This is used to force build failures in existing trees when
# a new directory is added.
# The format here is for the `case' shell command.
REQUIRED_SUBDIRS = doc | testsuite | $(GNULIB_BUILDDIR) | data-directory

# For now, shortcut the "configure GDB for fewer languages" stuff.
YYFILES = c-exp.c \
	cp-name-parser.c \
	objc-exp.c \
	ada-exp.c \
	jv-exp.c \
	f-exp.c \
	m2-exp.c \
	p-exp.c @MAINT@@APPLE_MAINT@@EXTRA_YFLAGS_SEP@ go-exp.c
YYOBJ = c-exp.o \
	cp-name-parser.o \
	objc-exp.o \
	ada-exp.o \
	jv-exp.o \
	f-exp.o \
	m2-exp.o \
	p-exp.o @MAINT@@APPLE_MAINT@@EXTRA_YFLAGS_SEP@ go-exp.o

# Things which need to be built when making a distribution.

DISTSTUFF = $(YYFILES)

# All generated files which can be included by another file.
generated_files = config.h observer.h observer.inc ada-lex.c jit-reader.h \
        $(GNULIB_H) $(NAT_GENERATED_FILES) gcore

# Prevent Sun make from putting in the machine type.  Setting
# TARGET_ARCH to nothing works for SunOS 3, 4.0, but not for 4.1.
.c.o:
	$(COMPILE) $<
	$(POSTCOMPILE)

## Old rule was: $(AM_V_CC)$(CC) -c $(INTERNAL_CFLAGS) $<

all: gdb$(EXEEXT) $(CONFIG_ALL)
	$(AM_V_at)$(MAKE) $(AM_V_MFLAG) $(FLAGS_TO_PASS) DO=all \
	  "DODIRS=`echo $(SUBDIRS) | $(SED) 's/testsuite//'`" subdir_do
.PHONY: all-tui
all-tui: $(TUI)$(EXEEXT)

# Convenience rule to handle recursion.
$(LIBGNU) $(GNULIB_H): all-lib
all-lib: $(GNULIB_BUILDDIR)/Makefile
	$(AM_V_at)$(MAKE) $(AM_V_MFLAG) $(FLAGS_TO_PASS) DO=all DODIRS=$(GNULIB_BUILDDIR) subdir_do
.PHONY: all-lib

installcheck:

# The check target can not use subdir_do, because subdir_do does not
# use TARGET_FLAGS_TO_PASS.
check: force
	@if [ -f testsuite/Makefile ]; then \
	  rootme=`pwd`; export rootme; \
	  rootsrc=`cd $(srcdir); pwd`; export rootsrc; \
	  cd testsuite; \
	  $(MAKE) $(AM_V_MFLAG) $(TARGET_FLAGS_TO_PASS) check; \
	else echo "no Makefile for testsuite"; fi

# The idea is to parallelize testing of multilibs, for example:
#   make -j3 check//sh-hms-sim/{-m1,-m2,-m3,-m3e,-m4}/{,-nofpu}
# will run 3 concurrent sessions of check, eventually testing all 10
# combinations.  GNU make is required for the % pattern to work, as is
# a shell that expands alternations within braces.  If GNU make is not
# used, this rule will harmlessly fail to match.
check//%: force
	@if [ -f testsuite/config.status ]; then \
	  rootme=`pwd`; export rootme; \
	  rootsrc=`cd $(srcdir); pwd`; export rootsrc; \
	  target=`echo "$@" | $(SED) 's,//.*,,'`; \
	  variant=`echo "$@" | $(SED) 's,^[^/]*//,,'`; \
	  vardots=`echo "$${variant}" | $(SED) 's,/,.,g'`; \
	  testdir=testsuite.$${vardots}; \
	  if [ ! -f $${testdir}/Makefile ]; then \
	    (cd testsuite && find . -name config.status) | \
	    $(SED) s,/config.status$$,, | sort | while read subdir; do \
	      $(RUN_MKINSTALLDIRS) $${testdir}/$${subdir} && \
	      (cd $${testdir}/$${subdir} && \
	       $(SHELL) $${rootme}/testsuite/$${subdir}/config.status \
		 --recheck && \
	       $(SHELL) ./config.status); done; \
	  else echo "no Makefile in $${testdir}"; fi && cd $${testdir} && \
	  $(MAKE) $(AM_V_MFLAG) $(TARGET_FLAGS_TO_PASS) \
	    RUNTESTFLAGS="--target_board=$${variant} $(RUNTESTFLAGS)" \
	    "$${target}"; \
	else echo "testsuite is not configured"; fi

info dvi install-info clean-info html install-html pdf-local: force
	$(AM_V_at)$(MAKE) $(AM_V_MFLAG) $(FLAGS_TO_PASS) DO=$@ "DODIRS=$(SUBDIRS)" subdir_do
.PHONY: info dvi install-info clean-info html install-html pdf-local

pdf: pdf-local
.PHONY: pdf

# FIXME: add a configure check for how to call `pack` properly:
gdb.z: gdb.1
	nroff -man $(srcdir)/gdb.1 | col -b > gdb.t
	pack gdb.t gdb.t.z; rm -f gdb.t
	mv $(AM_V_v) gdb.t.z gdb.z

# Traditionally "install" depends on "all". But it may be useful
# not to; for example, if the user has made some trivial change to a
# source file and does NOT care about rebuilding or just wants to save the
# time it takes for make to check that all is up to date.
# install-only is intended to address that need.
install: all install-only
install-only: $(CONFIG_INSTALL)
	transformed_name=`t='$(program_transform_name)'; \
			  echo "gdb" | $(SED) -e "$${t}"`; \
		if test "x$${transformed_name}" = "x"; then \
		  transformed_name=gdb; \
		else \
		  echo "transformed_name is $${transformed_name}"; \
		fi; \
		$(RUN_MKINSTALLDIRS) $(DESTDIR)$(bindir); \
		$(INSTALL_PROGRAM) gdb$(EXEEXT) \
		    $(DESTDIR)$(bindir)/$${transformed_name}$(EXEEXT); \
		$(RUN_MKINSTALLDIRS) \
			$(DESTDIR)$(man1dir); \
		$(INSTALL_DATA) $(srcdir)/gdb.1 \
			$(DESTDIR)$(man1dir)/$${transformed_name}.1
	$(AM_V_at)$(MAKE) $(AM_V_MFLAG) DO=install "DODIRS=$(SUBDIRS)" $(FLAGS_TO_PASS) subdir_do
.PHONY: install-tui
install-tui:
	transformed_name=`t='$(program_transform_name)'; \
			  echo "$(TUI)" | $(SED) -e "$${t}"`; \
		if test "x$${transformed_name}" = "x"; then \
		  transformed_name=$(TUI); \
		else \
		  echo "transformed_name is $${transformed_name}"; \
		fi; \
		$(RUN_MKINSTALLDIRS) $(DESTDIR)$(bindir); \
		$(INSTALL_PROGRAM) $(TUI)$(EXEEXT) \
			$(DESTDIR)$(bindir)/$$transformed_name$(EXEEXT); \
		$(RUN_MKINSTALLDIRS) \
			$(DESTDIR)$(man1dir); \
		$(INSTALL_DATA) $(srcdir)/gdb.1 \
			$(DESTDIR)$(man1dir)/$${transformed_name}.1


uninstall: force $(CONFIG_UNINSTALL)
	transformed_name=`t='$(program_transform_name)'; \
			  echo "gdb" | $(SED) -e $${t}`; \
	  if test "x$${transformed_name}" = "x"; then \
	    transformed_name=gdb; \
	  else \
	    echo "transformed_name is $${transformed_name}"; \
	  fi; \
	rm -f $(AM_V_v) $(DESTDIR)$(bindir)/$${transformed_name}$(EXEEXT) \
	      $(DESTDIR)$(man1dir)/$${transformed_name}.1
	$(AM_V_at)$(MAKE) $(AM_V_MFLAG) DO=uninstall "DODIRS=$(SUBDIRS)" $(FLAGS_TO_PASS) subdir_do
.PHONY: uninstall-tui
uninstall-tui:
	transformed_name=`t='$(program_transform_name)'; \
			  echo $(TUI) | $(SED) -e $${t}` ; \
	  if test "x$${transformed_name}" = "x"; then \
	    transformed_name=$(TUI); \
	  else \
	    echo "transformed_name is $${transformed_name}"; \
	  fi; \
	rm -f $(AM_V_v) $(DESTDIR)$(bindir)/$${transformed_name}$(EXEEXT) \
	      $(DESTDIR)$(man1dir)/$${transformed_name}.1

# The C++ name parser can be built standalone for testing.
test-cp-name-parser.o: cp-name-parser.c $(safe_ctype_h) $(libiberty_h) \
  $(demangle_h) $(cp_support_h)
	$(AM_V_CC)$(COMPILER) -c $(INTERNAL_CFLAGS) -DTEST_CPNAMES \
	  -o test-cp-name-parser.o cp-name-parser.c

test-cp-name-parser$(EXEEXT): test-cp-name-parser.o $(LIBIBERTY_DEP)
	$(AM_V_CCLD)$(COMPILER_LD) $(INTERNAL_LDFLAGS) \
	  -o test-cp-name-parser$(EXEEXT) test-cp-name-parser.o \
	  $(LIBIBERTY)

local_cxxfilt: test-cp-name-parser$(EXEEXT)
.PHONY: local_cxxfilt

# We do this by grepping through sources. If that turns out to be too slow,
# we could just require every .o file to have an initialization routine
# of a given name (top.o -> _initialize_top, etc.).
#
# Formatting conventions: The name of the _initialize_* routines must start
# in column zero, and must not be inside #if.
#
# Note that the set of files with init functions might change, or the names
# of the functions might change, so this files needs to depend on all the
# object files that will be linked into gdb.

# FIXME: There is a problem with this approach - init.c may force
# unnecessary files to be linked in.

# FIXME: cagney/2002-06-09: gdb/564: gdb/563: Force the order so that
# the first call is to _initialize_gdbtypes (implemented by explicitly
# putting that function's name first in the init.l-tmp file). This is
# a hack to ensure that all the architecture dependant global
# builtin_type_* variables are initialized before anything else
# (per-architecture code is called in the same order that it is
# registered). The ``correct fix'' is to have all the builtin types
# made part of the architecture and initialize them on-demand (using
# gdbarch_data) just like everything else. The catch is that other
# modules still take the address of these builtin types forcing them
# to be variables, sigh!

# NOTE: cagney/2003-03-18: The sed pattern ``s|^\([^ /]...'' is
# anchored on the first column and excludes the ``/'' character so
# that it does NOT add the $(srcdir) prefix to any file that already
# has an absolute path. It turns out that $(DEC)'s True64 make
# automatically adds the $(srcdir) prefixes when it encounters files
# in sub-directories such as cli/ and mi/.

# NOTE: cagney/2004-02-08: The ``case "$$fs" in'' eliminates
# duplicates. Files in the gdb/ directory can end up appearing in
# COMMON_OBS (as a .o file) and CONFIG_SRCS (as a .c file).

INIT_FILES = $(COMMON_OBS) $(TSOBS)
init.c: $(INIT_FILES) @MAINT@ Makefile.in
	@echo "Making init.c"
	@if [ "x$(AM_V_P)" != "xfalse" ]; then \
	  echo "Using $(INIT_FILES)"; \
	fi
	@rm -f init.c-tmp init.l-tmp
	@touch init.c-tmp
	@echo "gdbtypes" > init.l-tmp
	$(AM_V_at)-echo "$(INIT_FILES)" | \
	tr ' ' '\012' | \
	$(SED) \
	    -e '/^gdbtypes.[co]$$/d' \
	    -e '/^init.[co]$$/d' \
	    -e '/xdr_ld.[co]$$/d' \
	    -e '/xdr_ptrace.[co]$$/d' \
	    -e '/xdr_rdb.[co]$$/d' \
	    -e '/udr.[co]$$/d' \
	    -e '/udip2soc.[co]$$/d' \
	    -e '/udi2go32.[co]$$/d' \
	    -e '/version.[co]$$/d' \
	    -e '/^[a-z0-9A-Z_]*_[SU].[co]$$/d' \
	    -e '/[a-z0-9A-Z_]*-exp.tab.[co]$$/d' \
	    -e 's/\.[co]$$/.c/' \
	    -e 's,signals\.c,signals/signals\.c,' \
	    -e 's,/target\.[co],/target/target\.c,' \
	    -e 's|^\([^  /][^     ]*\)|$(srcdir)/\1|g' | \
	while read f; do \
	  if [ "x$${f}" = "x./target.c" ]; then \
	    f=./target/target.c; \
	  fi; \
	  if [ "x$(AM_V_P)" != "xfalse" ]; then \
	    echo "reading $${f} for init.c" 1>&2; \
	  fi; \
	  pathname=""; \
	  if [ ! -z "$${f}" ]; then \
	    filebase=`basename "$${f}"`; \
	  elif [ -z "$${f}" ]; then \
	    if [ "x$(AM_V_P)" != "xfalse" ]; then \
	      echo "reading 'f' failed" 1>&2; \
	    fi; \
	  fi; \
	  if [ ! -z "$${filebase}" ]; then \
	  for prefix in . tui mi cli macosx signals target nat gdbtk/generic; do \
	    if [ -f $(srcdir)/$${prefix}/$${filebase} ]; then \
	      pathname="$(srcdir)/$${prefix}/$${filebase}"; \
	    fi; \
	    if [ -f $${prefix}/$${filebase} ]; then \
	      pathname="$${prefix}/$${filebase}"; \
	    fi; \
	  done; \
	  if [ -z "$${pathname}" ]; then \
	    echo "unable to locate $${filebase}" 1>&2; \
	    pathname=/dev/null; \
	    exit 1; \
	  fi; \
	  $(GREP) '^_initialize_[a-z_0-9A-Z]* *(' $${pathname} 2>/dev/null; \
	  fi; \
	done | \
	$(SED) -e 's/^.*://' -e 's/^\([a-z_0-9A-Z]*\).*/\1/' | \
	( echo "_initialize_gdbtypes"; $(GREP) -v '^_initialize_gdbtypes$$' ) > init.l-tmp
	@echo '/* Do not modify this file.  */' >>init.c-tmp
	@echo '/* It is created automatically by the Makefile.  */'>>init.c-tmp
	@echo '#include "defs.h"      /* For initialize_file_ftype.  */' >>init.c-tmp
	@echo '#include "call-cmds.h" /* For initialize_all_files.  */' >>init.c-tmp
	@$(SED) -e 's/\(.*\)/extern initialize_file_ftype \1;/' <init.l-tmp >>init.c-tmp
	@echo 'void' >>init.c-tmp
	@echo 'initialize_all_files (void)' >>init.c-tmp
	@echo '{' >>init.c-tmp
	@$(SED) -e 's/\(.*\)/  \1 ();/' <init.l-tmp >>init.c-tmp
	@echo '}' >>init.c-tmp
	@rm -f init.l-tmp
	@mv $(AM_V_v) init.c-tmp init.c

.PRECIOUS: init.c

init.o: init.c $(defs_h) $(call_cmds_h)

LIBTOOL = @LIBTOOL@
TAG_FOR_LIBTOOL = @TAG_FOR_LIBTOOL@
LINK = $(LIBTOOL) $(AM_V_lt) $(TAG_FOR_LIBTOOL) $(LIBTOOLFLAGS) --mode=link $(LINKER)

TMPDIR = /tmp

# Removing the old gdb 1st works better if running, at least on SunOS.
gdb$(EXEEXT): gdb.o libgdb.a $(CONFIG_OBS) $(ADD_DEPS) $(CDEPS) $(TDEPLIBS)
	$(AM_V_at)$(MAKE) $(AM_V_MFLAG) version.o
	$(AM_V_at)rm -f $(AM_V_v) gdb$(EXEEXT)
	$(AM_V_at)rm -f -r $(AM_V_v) gdb$(EXEEXT).dSYM
	$(AM_V_LINKER)$(LINK) $(INTERNAL_LDFLAGS) $(WIN32LDAPP) \
		$(ADD_INFO_PLIST) \
		-o gdb$(EXEEXT) gdb.o $(CONFIG_OBS) libgdb.a \
		$(TDEPLIBS) $(TUI_LIBRARY) $(CLIBS) $(LOADLIBES)
	@echo "stripping __objcInit from $@";
	$(AM_V_at)echo "__objcInit" > $(TMPDIR)/macosx-syms-to-remove;
	$(AM_V_at)-if [ -f .libs/gdb$(EXEEXT) ]; then \
	  $(STRIP) -R $(TMPDIR)/macosx-syms-to-remove -X .libs/gdb$(EXEEXT); \
	  if test "x`whoami`" = "xroot"; then \
	    chgrp procmod .libs/gdb$(EXEEXT) && chmod g+s .libs/gdb$(EXEEXT); \
	  fi; \
	else \
	  $(STRIP) -R $(TMPDIR)/macosx-syms-to-remove -X gdb$(EXEEXT); \
	  if test "x`whoami`" = "xroot"; then \
	    chgrp procmod gdb$(EXEEXT) && chmod g+s gdb$(EXEEXT); \
	  fi; \
	fi
	$(AM_V_at)rm -f $(AM_V_v) $(TMPDIR)/macosx-syms-to-remove;


$(TUI)$(EXEEXT): tui-main.o libgdb.a $(ADD_DEPS) $(CDEPS) $(TDEPLIBS)
	$(AM_V_at)rm -f $(AM_V_v) $(TUI)$(EXEEXT)
	$(AM_V_at)rm -f -r $(AM_V_v) $(TUI)$(EXEEXT).dSYM
	$(AM_V_LINKER)$(LINK) $(INTERNAL_LDFLAGS) $(WIN32LDAPP) \
	  $(ADD_INFO_PLIST) \
	  -o $(TUI)$(EXEEXT) tui-main.o libgdb.a \
	  $(TDEPLIBS) $(TUI_LIBRARY) $(CLIBS) $(LOADLIBES)
	@echo "stripping __objcInit from $@";
	echo "__objcInit" > $(TMPDIR)/macosx-syms-to-remove;
	-if [ -f .libs/$(TUI)$(EXEEXT) ]; then \
	  $(STRIP) -R $(TMPDIR)/macosx-syms-to-remove -X .libs/$(TUI)$(EXEEXT); \
	else \
	  $(STRIP) -R $(TMPDIR)/macosx-syms-to-remove -X $(TUI)$(EXEEXT); \
	fi
	$(AM_V_at)rm -f $(AM_V_v) $(TMPDIR)/macosx-syms-to-remove;

nlm:	force
	rootme=`pwd`; export rootme; $(MAKE) $(AM_V_MFLAG) $(TARGET_FLAGS_TO_PASS) \
	  DO=all DODIRS=nlm subdir_do

# Create a library of the gdb object files and build GDB by linking
# against that.
#
# init.o is very important.  It pulls in the rest of GDB.
LIBGDB_OBS= $(COMMON_OBS) $(TSOBS) $(ADD_FILES) init.o
libgdb.a: $(LIBGDB_OBS)
	$(AM_V_at)rm -f libgdb.a || echo "Building libgdb.a from scratch"
	$(AM_V_AR)$(AR) $(AR_FLAGS) libgdb.a $(LIBGDB_OBS)
	$(RANLIB) $(RANLIB_FLAGS) libgdb.a

libgdb_a: libgdb.a
	stat libgdb.a && du libgdb.a
.PHONY: libgdb_a

# A Mach 3.0 program to force gdb back to command level:
stop-gdb$(EXEEXT): stop-gdb.o
	$(AM_V_CCLD)${CC_LD} $(GLOBAL_CFLAGS) $(LDFLAGS) \
	  -o stop-gdb$(EXEEXT) stop-gdb.o $(CLIBS) $(LOADLIBES)

stopgdb: stop-gdb$(EXEEXT)
.PHONY: stopgdb

# This is useful when debugging GDB, because some Unices do NOT let you
# run GDB on itself without copying the executable. So "make gdb1" will
# make gdb and put a copy in gdb1, and you can run it with "gdb gdb1".
# Removing gdb1 before the copy is the right thing if gdb1 is open
# in another process.
gdb1$(EXEEXT): gdb$(EXEEXT)
	$(AM_V_at)rm -f $(AM_V_v) gdb1$(EXEEXT)
	cp $(AM_V_v) gdb$(EXEEXT) gdb1$(EXEEXT)

# Put the proper machine-specific files first, so M-. on a machine
# specific routine gets the one for the correct machine.  (FIXME: those
# files go in twice; we should be removing them from the main list).

# TAGS depends on all the files that go into it so you can rebuild TAGS
# with `make TAGS' and not have to say `rm TAGS' first.

TAGS: $(TAGFILES_NO_SRCDIR) $(TAGFILES_WITH_SRCDIR)
	@echo "Making TAGS"
	@etags $(srcdir)/$(DEPRECATED_TM_FILE) \
	  $(srcdir)/$(XM_FILE) \
	  $(srcdir)/$(NAT_FILE) \
	`(for i in $(DEPFILES) $(TAGFILES_NO_SRCDIR); do \
	    j=$${i/\.o/\.c}; \
	    if [ -f $(srcdir)/$${j} ]; then \
	      echo $(srcdir)/$${j}; \
	    elif [ -f $(srcdir)/target/$${j} ]; then \
	      echo $(srcdir)/target/$${j}; \
	    elif [ -f $(srcdir)/nat/$${j} ]; then \
	      echo $(srcdir)/nat/$${j}; \
	    elif [ -f $(srcdir)/cli/$${j} ]; then \
	      echo $(srcdir)/cli/$${j}; \
	    elif [ -f $(srcdir)/mi/$${j} ]; then \
	      echo $(srcdir)/mi/$${j}; \
	    elif [ -f $(srcdir)/attic/$${j} ]; then \
	      echo $(srcdir)/attic/$${j}; \
	    elif [ -f $(srcdir)/tui/$${j} ]; then \
	      echo $(srcdir)/tui/$${j}; \
	    else echo $(macosxsrcdir)/$${j}; fi; \
	done; for i in $(TAGFILES_WITH_SRCDIR); do \
		echo $${i}; \
	done)` \
	`find $(srcdir)/config -name '*.h' -print`

tags: TAGS

# Give the `clean' target an extra `:' so people can add additional
# clean rules to their makefile fragments
# 'rm -f' gets the '-v' flag here when the files that it removes can vary:
clean mostlyclean:: $(CONFIG_CLEAN)
	$(AM_V_at)$(MAKE) $(AM_V_MFLAG) $(FLAGS_TO_PASS) DO=clean "DODIRS=$(SUBDIRS)" subdir_do
	-for dir in $(CLEANDIRS); do \
	  if test -d $${dir} && test -e $${dir}/Makefile; then \
	    cd $${dir} && $(MAKE) $(AM_V_MFLAG) $(FLAGS_TO_PASS) clean; \
	  else \
	    echo "skipping cleaning $${dir}"; \
	  fi; \
	done
	-if test "x$(CLEANDIRS)" != "x$(UNUSED_SUBDIRS)"; then \
	  for dir in $(UNUSED_SUBDIRS); do \
	    if test -d $${dir} && test -e $${dir}/Makefile; then \
	      if test "x$${dir}" = "xgnulib"; then \
	        if test -e $${dir}/import/Makefile; then \
	          echo "$${dir} exists and it and its subdir both have Makefiles; attempting to clean it..."; \
	          cd $${dir} && $(MAKE) $(AM_V_MFLAG) $(FLAGS_TO_PASS) clean; \
	        else \
	          echo "skipping cleaning $${dir}; no Makefile in its import subdir"; \
	        fi; \
	      else \
	        echo "$${dir} exists and has a Makefile; attempting to clean it..."; \
	        cd $${dir} && $(MAKE) $(AM_V_MFLAG) $(FLAGS_TO_PASS) clean; \
	      fi; \
	    else \
	      if test ! -d $${dir}; then \
	        echo "Skipping cleaning nonexistent $${dir}"; \
	      elif test ! -e $${dir}/Makefile; then \
	        echo "Skipping cleaning $${dir} (missing Makefile)"; \
	      else \
	        echo "Skipping cleaning $${dir} for unknown reason"; \
	      fi; \
	    fi; \
	  done; \
	else \
	  echo "CLEANDIRS and UNUSED_SUBDIRS are the same"; \
	fi
	rm -f $(AM_V_v) *.o *.a $(ADD_FILES) *~ *.gcda *.sarif
	rm -f init.c-tmp init.l-tmp version.c-tmp init.c version.c
	rm -f $(AM_V_v) gdb$(EXEEXT) core make.log
	rm -f $(AM_V_v) gdb[0-9]$(EXEEXT)
	rm -f stop-gdb$(EXEEXT)
	if test -e $(TUI)$(EXEEXT); then $(MAKE) $(AM_V_MFLAG) clean-tui; fi
	if test -e insight$(EXEEXT); then $(MAKE) $(AM_V_MFLAG) clean-gdbtk; fi
	rm -f $(AM_V_v) test-cp-name-parser$(EXEEXT)
	rm -f $(AM_V_v) *.rsrc
	-rm -f $(AM_V_v) gnulib/*.o gdbserver/*.o mi/*.o
	-rm -rf $(AM_V_v) *.dSYM || rmdir *.dSYM
	rm -f $(AM_V_v) stamp-clang stamp-splint

.PHONY: clean-tui
clean-tui:
	rm -f $(AM_V_v) $(TUI)$(EXEEXT) || echo "$(TUI)$(EXEEXT) missing"
	$(AM_V_at)rm -f -r $(AM_V_v) $(TUI)$(EXEEXT).dSYM

# This used to depend on c-exp.c m2-exp.c TAGS
# I believe this is wrong; the makefile standards for distclean just
# describe removing files; the only sort of "re-create a distribution"
# functionality described is if the distributed files are unmodified.
# NB: While GDBSERVER might be configured on native systems, it is NOT
# always included in SUBDIRS. Remove the gdbserver files explictly.
distclean:: clean clean-tui clean-gdbtk @MAINT@ clean-po
	$(AM_V_at)$(MAKE) $(AM_V_MFLAG) $(FLAGS_TO_PASS) DO=distclean "DODIRS=$(SUBDIRS)" \
	  subdir_do
	-for dir in $(UNUSED_SUBDIRS); do \
	  if test -d $${dir} && test -e $${dir}/Makefile; then \
	    if test "x$${dir}" = "xgnulib"; then \
	      if test -e $${dir}/import/Makefile; then \
	        echo "$${dir} exists and it and its subdir both have Makefiles; attempting to make it be distclean..."; \
	        cd $${dir} && $(MAKE) $(AM_V_MFLAG) $(FLAGS_TO_PASS) distclean; \
	      else \
	        echo "skipping making $${dir} be distclean; no Makefile in its import subdir"; \
	      fi; \
	    else \
	      echo "$${dir} exists and has a Makefile; attempting to make it be distclean..."; \
	      cd $${dir} && $(MAKE) $(AM_V_MFLAG) $(FLAGS_TO_PASS) distclean; \
	    fi; \
	  else \
	    if test ! -d $${dir}; then \
	      echo "Skipping making nonexistent $${dir} be distclean"; \
	    elif test ! -e $${dir}/Makefile; then \
	      echo "Skipping making $${dir} be distclean (missing Makefile)"; \
	    else \
	      echo "Skipping making $${dir} be distclean for unknown reason"; \
	    fi; \
	  fi; \
	done
	rm -f gdbserver/config.status gdbserver/config.log
	rm -f gdbserver/tm.h gdbserver/xm.h gdbserver/nm.h
	rm -f gdbserver/Makefile gdbserver/config.cache
	rm -f data-directory/Makefile
	rm -f nm.h tm.h xm.h config.status config.h stamp-h .gdbinit
	rm -f $(AM_V_v) stamp-h* stamp-*1 gdb-gdb.gdb gcore ./*/*~
	rm -f $(AM_V_v) stamp-clang stamp-splint
	rm -f $(AM_V_v) gdbserver/stamp-*
	rm -f y.output yacc.acts yacc.tmp y.tab.h
	rm -f config.log config.cache
	rm -f Makefile
	-rm -f .DS_Store config/.DS_Store m4/.DS_Store macosx/.DS_Store
	-rm -f macosx/gdb-ng_patches/.DS_Store XcodePlugins/.DS_Store
	-rm -f autoscan.log macosx/gdb.log
	-rm -rf .libs || rmdir .libs
	-rm -rf autom4te.cache || rmdir autom4te.cache
	-rm -rf gdbserver/autom4te.cache || rmdir gdbserver/autom4te.cache
	-rm -rf rdi-share/autom4te.cache || rmdir rdi-share/autom4te.cache
	-rm -rf nlm/autom4te.cache || rmdir nlm/autom4te.cache
	-rm -rf multi-ice/autom4te.cache || rmdir multi-ice/autom4te.cache
	-rm -rf gdbtk/autom4te.cache || rmdir gdbtk/autom4te.cache
	-rm -rf gnulib/autom4te.cache || rmdir gnulib/autom4te.cache
	-rm -rf $(GNULIB_BUILDDIR) || rmdir $(GNULIB_BUILDDIR)
	-rm -rf gdbserver/build-gnulib || rmdir gdbserver/build-gnulib
	-find . -name .DS_Store -delete
	if test -d clang_static_analysis && test -w clang_static_analysis; then \
	  find clang_static_analysis -name '*.plist' -delete; \
	fi

# As with the 'clean' target, give the 'maintainer-clean' target an extra ':',
# so people can add additional maintainer-clean rules to their Makefile frags:
maintainer-clean:: local-maintainer-clean do-maintainer-clean distclean
realclean: maintainer-clean

local-maintainer-clean: mostlyclean @MAINT@ clean-tui clean-gdbtk
	@echo "This command is intended for maintainers to use;"
	@echo "it deletes files that may require special tools to rebuild."
	rm -f c-exp.c cp-name-parser.c ada-lex.c ada-exp.c \
	  objc-exp.c jv-exp.tab f-exp.c m2-exp.c \
	  p-exp.c @MAINT@@APPLE_MAINT@@EXTRA_YFLAGS_SEP@ go-exp.c
	rm -f $(AM_V_v) TAGS $(INFOFILES)
	rm -f $(AM_V_v) $(YYFILES)
	rm -f nm.h tm.h xm.h
	-(test -w $(TMPDIR) && rm -f $(AM_V_v) $(TMPDIR)/cfg_stat.sh)
	-rm -f config.status || \
	  (test -w $(TMPDIR) && mv -f $(AM_V_v) config.status $(TMPDIR)/cfg_stat.sh)

do-maintainer-clean:
	$(AM_V_at)$(MAKE) $(AM_V_MFLAG) $(FLAGS_TO_PASS) DO=maintainer-clean \
		"DODIRS=$(SUBDIRS)" subdir_do

diststuff: $(DISTSTUFF) $(PACKAGE).pot $(CATALOGS)
	$(AM_V_at)cd doc; $(MAKE) $(AM_V_MFLAG) $(MFLAGS) diststuff

subdir_do: force
	$(AM_V_at)for i in $(DODIRS); do \
	  if [ "x$${i}" = "xgnulib" -o "x$${i}" = "xbuild-gnulib" ]; then \
	   if [ -f ./$${i}/Makefile -a -f ./$${i}/import/Makefile ]; then \
	     if [ -n "$${CPP}" -a -x ./$${i}/configure ]; then \
	       unset CPP; \
	     fi; \
	     if (cd ./$${i}; \
	       $(MAKE) $(AM_V_MFLAG) $(FLAGS_TO_PASS) $(DO)); then \
	       echo "'$@' ($(DO)) succeeded for '$${i}'"; \
	     else \
	       echo "gdb/Makefile: '$@' ($(DO)) failed for '$${i}'" >&2; \
	       exit 1; \
	     fi; \
	   else echo "at least one Makefile missing for '$${i}'"; fi; \
	  else \
	    if [ -f ./$${i}/Makefile ]; then \
	      if [ -n "$${CPP}" -a -x ./$${i}/configure ]; then \
	        unset CPP; \
	      fi; \
	      if (cd ./$${i}; \
	        $(MAKE) $(AM_V_MFLAG) $(FLAGS_TO_PASS) $(DO)); then \
	        echo "'$@' ($(DO)) succeeded for '$${i}'"; \
	      else \
	        echo "gdb/Makefile: '$@' ($(DO)) failed for '$${i}'" >&2; \
	        exit 1; \
	      fi; \
	    else echo "no Makefile for '$${i}'"; fi; \
	  fi; \
	done

Makefile: Makefile.in config.status @frags@
	$(SHELL) config.status
	$(AM_V_at)if test Makefile -ot Makefile.in; then touch Makefile; fi
	$(AM_V_at)if test ! -e stamp-h || test stamp-h -ot config.status; then \
	  touch stamp-h; \
	fi

gnulib/Makefile: gnulib/Makefile.in config.status @frags@
	CONFIG_FILES="gnulib/Makefile" \
	  CONFIG_COMMANDS="depfiles" \
	  CONFIG_HEADERS="" \
	  CONFIG_LINKS="" \
	  $(SHELL) config.status

$(GNULIB_BUILDDIR)/Makefile: gnulib/Makefile.in config.status @frags@
	@if test -d $(GNULIB_BUILDDIR); then \
	  cd $(GNULIB_BUILDDIR); CONFIG_FILES="Makefile" \
	  CONFIG_COMMANDS="depfiles" \
	  CONFIG_HEADERS="" \
	  CONFIG_LINKS="" \
	  $(SHELL) config.status; \
	else echo "skipping missing $(GNULIB_BUILDDIR)"; fi

am--refresh:
	@echo "in `pwd`: making '$@'"
.PHONY: am--refresh

config.h: stamp-h
	@echo "this target, '$@' just makes its dep, '$<'"
stamp-h: config.h.in config.status
	$(SHELL) config.status
	$(AM_V_at)if test ! -e stamp-h || test stamp-h -ot config.h.in; then \
	  touch stamp-h; \
	fi

AUTOTOOLS_FORCE_FLAG = @MAINT@ --force
## TODO: add more dependencies here:
config.h.in: @MAINT@ configure.ac
	if test -x "`which autoheader`"; then \
	  echo "running autoheader" && autoheader $(AUTOTOOLS_FORCE_FLAG); \
	elif test -r config.in && test ! -e config.h.in && test -w .; then \
	  mv $(AM_V_v) config.in config.h.in; \
	else \
	  echo "unsure what to do, so just touching $@" && touch $@; \
	fi

config.status: configure configure.tgt configure.host
	if test -n "$(CPP)"; then unset CPP; fi; \
	if test -r config.status && test -x config.status; then \
	  $(SHELL) config.status --recheck; \
	else \
	  if test -r ./configure && test -x ./configure; then \
	    CONFIG_SHELL=$(SHELL) $(SHELL) ./configure --no-create --no-recursion; \
	  fi; \
	fi
	$(AM_V_at)if test config.status -ot configure; then touch config.status; fi

# a compromise between the built-in rule and the automake rule:
configure: @MAINT@ configure.ac configure.sh
	if test -x "`which autoconf`"; then \
	  echo "running autoconf" && autoconf $(AUTOTOOLS_FORCE_FLAG); \
	elif test -e configure.sh; then \
	  echo "using backup $@ script"; \
	  cat configure.sh >$@; \
	  chmod a+x $@; \
	else \
	  echo "unsure what to do, so just touching $@" && touch $@; \
	fi

force:

# Documentation!
# GDB QUICK REFERENCE (TeX dvi file, CM fonts)
doc/refcard.dvi:
	$(AM_V_at)cd doc; $(MAKE) $(AM_V_MFLAG) refcard.dvi $(FLAGS_TO_PASS)

# GDB QUICK REFERENCE (PostScript output, common PS fonts)
doc/refcard.ps:
	$(AM_V_at)cd doc; $(MAKE) $(AM_V_MFLAG) refcard.ps $(FLAGS_TO_PASS)

ps: doc/refcard.ps
	$(AM_V_at)cd doc; $(MAKE) $(AM_V_MFLAG) dvi $(FLAGS_TO_PASS)
.PHONY: ps

# GDB MANUAL: TeX dvi file
doc/gdb.dvi:
	$(AM_V_at)cd doc; $(MAKE) $(AM_V_MFLAG) gdb.dvi $(FLAGS_TO_PASS)

dvi-local: doc/gdb.dvi doc/refcard.dvi
	$(AM_V_at)cd doc; $(MAKE) $(AM_V_MFLAG) dvi $(FLAGS_TO_PASS)
.PHONY: dvi-local

# GDB MANUAL: info file
doc/gdb.info:
	$(AM_V_at)cd doc; $(MAKE) $(AM_V_MFLAG) gdb.info $(FLAGS_TO_PASS)

# Make copying.c from COPYING
$(srcdir)/copying.c: @MAINTAINER_MODE_TRUE@ \
  $(srcdir)/COPYING $(srcdir)/copying.awk @MAINT@ Makefile.in
	$(AWK) -f $(srcdir)/copying.awk \
		< $(srcdir)/COPYING > $(srcdir)/copying.tmp
	mv $(AM_V_v) $(srcdir)/copying.tmp $(srcdir)/copying.c

version.c: version.in @MAINT@ Makefile
	$(AM_V_at)rm -f version.c-tmp
	echo '#include "version.h"' >> version.c-tmp
	if test -n "$(VERSION)"; then \
	  echo 'const char version[] = "$(VERSION)";' >> version.c-tmp; \
	else \
	  echo 'const char version[] = "'"`$(SED) q ${srcdir}/version.in`"'";' >> version.c-tmp; \
	fi
	if test -n "$(GDB_RC_VERSION)"; then \
	  echo 'const char rc_version[] = "$(GDB_RC_VERSION)";' >> version.c-tmp; \
	else \
	  echo 'const char rc_version[] = "unknown";' >> version.c-tmp; \
	fi
	echo 'const char host_name[] = "$(host_alias)";' >> version.c-tmp
	echo 'const char target_name[] = "$(target_alias)";' >> version.c-tmp
	echo 'const char build_date[] = "$(shell date -u)";' >> version.c-tmp 
	$(RUN_MOVEIFCHANGE) version.c-tmp version.c
version.o: version.c $(version_h)
	$(COMPILE) $<
	$(POSTCOMPILE)

observer.h: observer.sh doc/observer.texi
	${srcdir}/observer.sh h ${srcdir}/doc/observer.texi observer.h

observer.inc: observer.sh doc/observer.texi
	${srcdir}/observer.sh inc ${srcdir}/doc/observer.texi observer.inc

lint: $(LINTFILES)
	$(LINT) $(INCLUDE_CFLAGS) $(LINTFLAGS) $(LINTFILES) \
	   `echo $(DEPFILES) | uniq | $(SED) 's/\.o /\.c /g'`

## it might be tempting to add -Dlint here but that triggers warnings in
## generated code:
SPLINTFLAGS = $(LINTFLAGS) $(AM_V_splint) +posix-lib -weak -unrecogcomments \
  +matchanyintegral -redef -fixedformalarray +ignoresigns -sysunrecog \
  -type -retvalother -unrecog -stackref -initallelements -castfcnptr \
  +oldstyle +noret +firstcase +incondefslib +overload +nestedextern +imptype \
  +nullterminated +macroparens +sefparams +sefuncon +bufferoverflow \
  +multithreaded +portability +superuser +toctou \
  +its4mostrisky +its4veryrisky +its4risky +legacy \
  -Imacosx `echo $(MMALLOC_CFLAGS) | $(SED) "s/-Wp,//g"`
INCLUDE_CFLAGS_FOR_SPLINT = `echo $(INCLUDE_CFLAGS) | $(SED) "s/-Wp,//g"`
configured_lint: stamp-splint
stamp-splint: $(LINTFILES)
	set -e; for f in \
	   `echo $(LINTFILES) | uniq | $(SED) 's/\.y /\.c /g'` \
	   `echo "$(DEPFILES) init.c" | uniq | $(SED) 's/\.o /\.c /g'`; do \
	  echo ""; \
	  echo "attempting to splint $${f}"; \
	  if test -e $${f}; then \
	    $(LINT_CONFIGURED) $(INCLUDE_CFLAGS_FOR_SPLINT) $(SPLINTFLAGS) \
	      -DIN_TOP_SRCDIR $${f}; \
	  elif test -e ${srcdir}/mi/$${f}; then \
	    $(LINT_CONFIGURED) $(INCLUDE_CFLAGS_FOR_SPLINT) $(SPLINTFLAGS) \
	      -DIN_MI_SUBDIR ${srcdir}/mi/$${f}; \
	  elif test -e ${srcdir}/cli/$${f}; then \
	    $(LINT_CONFIGURED) $(INCLUDE_CFLAGS_FOR_SPLINT) $(SPLINTFLAGS) \
	      -DIN_CLI_SUBDIR ${srcdir}/cli/$${f}; \
	  elif test -e ${srcdir}/macosx/$${f}; then \
	    $(LINT_CONFIGURED) $(INCLUDE_CFLAGS_FOR_SPLINT) $(SPLINTFLAGS) \
	      -DIN_MACOSX_SUBDIR ${srcdir}/macosx/$${f}; \
	  elif test -e ${srcdir}/gdbtk/generic/$${f}; then \
	    $(LINT_CONFIGURED) $(INCLUDE_CFLAGS_FOR_SPLINT) $(SPLINTFLAGS) \
	      $(X11_CFLAGS) $(IDE_CFLAGS) \
	      -DGDBTK_LIBRARY=\"$(GDBTK_LIBRARY)\" \
	      -DSRC_DIR=\"$(GDBTK_SRC_DIR)\" \
	      ${srcdir}/gdbtk/generic/$${f}; \
	  fi; \
	  echo "done with $${f}"; \
	done; \
	touch $@

.PHONY: configured_lint

# clang analysis output:
.SUFFIXES: .c .plist
.c.plist:
	$(AM_V_at)if test ! -d $(analysisdir); then $(MKDIR_P) $(analysisdir); fi
	$(AM_V_CLANG)$(RUN_CLANG_ANALYZER) -Wall -Wextra \
	  -o $(analysisdir)/$@ $<

# To actually run clang:
lint-local: stamp-clang stamp-gcc-analysis
stamp-clang: $(LINTFILES) $(DEPFILES)
	$(MAKE) $(AM_V_MFLAG) `echo "$(LINTFILES) init.c" | uniq | $(SED) 's/\.c /\.plist /g' | $(SED) 's/\.y /\.plist /g'`
	$(MAKE) $(AM_V_MFLAG) `echo "$(DEPFILES) init.o" | uniq | $(SED) 's/\.o /\.plist /g'`
	$(AM_V_at)if test ! -e $@ || test $@ -ot Makefile; then touch $@; fi
.PHONY: lint-local

# GCC analysis output (TODO: check that GCC is capable of doing this in configure)
.SUFFIXES: .c .sarif
.c.sarif:
	$(AM_V_COMPILER)$(COMPILE.pre) $(INTERNAL_CFLAGS) -fanalyzer \
	  -Wanalyzer-too-complex -fdiagnostics-format=sarif-file \
	  -c -o /dev/null $<

stamp-gcc-analysis: $(LINTFILES) $(DEPFILES)
	$(MAKE) $(AM_V_MFLAG) `echo "$(LINTFILES) init.c" | uniq | $(SED) 's/\.c /\.sarif /g' | $(SED) 's/\.y /\.sarif /g'`
	$(MAKE) $(AM_V_MFLAG) `echo "$(DEPFILES) init.o" | uniq | $(SED) 's/\.o /\.sarif /g'`
	$(AM_V_at)if test ! -e $@ || test $@ -ot Makefile; then touch $@; fi

# cxref has many of the same limitations as splint, so reuse the same
# preprocessor define that splint uses:
gdb.cxref.bz2: $(SFILES)
	if test ! -d doc/cxref; then $(MKDIR_P) doc/cxref; fi
	cxref -Odoc/cxref -Ngdb.cxref -R. -xref -I. -Imacosx $(CXREF_FLAGS) \
	  `echo $(SFILES) | $(SED) 's/\.y /\.c /g'` -DS_SPLINT_S -warn-xref \
	  -U__BLOCKS__ -index -latex -html -rtf -sgml -raw -no-comments \
	  -DRUNNING_CXREF >gdb.cxref
	bzip2 -f gdb.cxref

cxref: gdb.cxref.bz2
.PHONY: cxref

# TODO: add more doc subdir targets here

force_update:

# GNU Make has an annoying habit of putting *all* the Makefile variables
# into the environment, unless you include this target as a circumvention.
# Rumor is that this will be fixed (and this target can be removed)
# in GNU Make 4.0.
.NOEXPORT:

# GNU Make 3.63 has a different problem: it keeps tacking command line
# overrides onto the definition of $(MAKE).  This variable setting
# will remove them.
MAKEOVERRIDES=

ALLDEPFILES = \
  aix-thread.c \
  alpha-nat.c alphabsd-nat.c \
  alpha-tdep.c alpha-linux-tdep.c alphabsd-tdep.c alphanbsd-tdep.c \
  alpha-osf1-tdep.c alphafbsd-tdep.c alpha-mdebug-tdep.c \
  amd64-nat.c amd64-tdep.c \
  amd64bsd-nat.c amd64fbsd-nat.c amd64fbsd-tdep.c \
  amd64nbsd-nat.c amd64nbsd-tdep.c \
  amd64obsd-nat.c amd64obsd-tdep.c \
  amd64-linux-nat.c amd64-linux-tdep.c \
  amd64-sol2-tdep.c \
  arm-linux-nat.c arm-linux-tdep.c arm-tdep.c \
  armnbsd-nat.c armnbsd-tdep.c \
  avr-tdep.c \
  bsd-uthread.c bsd-kvm.c \
  coff-solib.c \
  core-regset.c core-aout.c corelow.c \
  dcache.c exec.c \
  fbsd-nat.c \
  fork-child.c \
  glibc-tdep.c \
  go32-nat.c h8300-tdep.c \
  hppa-tdep.c hppa-hpux-tdep.c hppa-hpux-nat.c \
  hppa-linux-tdep.c hppa-linux-nat.c \
  hppabsd-nat.c hppabsd-tdep.c \
  hpread.c \
  i386-tdep.c i386v-nat.c i386-linux-nat.c \
  i386v4-nat.c i386-cygwin-tdep.c \
  i386bsd-nat.c i386bsd-tdep.c i386fbsd-nat.c i386fbsd-tdep.c \
  i386nbsd-nat.c i386nbsd-tdep.c i386obsd-nat.c i386obsd-tdep.c \
  i387-tdep.c \
  i386-linux-tdep.c i386-nat.c \
  i386-sol2-nat.c i386-sol2-tdep.c \
  i386gnu-nat.c i386gnu-tdep.c \
  ia64-linux-nat.c ia64-linux-tdep.c ia64-tdep.c \
  inf-ptrace.c inf-ttrace.c \
  infptrace.c inftarg.c irix4-nat.c irix5-nat.c \
  libunwind-frame.c \
  lynx-nat.c m3-nat.c \
  m68hc11-tdep.c \
  m32r-tdep.c \
  m32r-linux-nat.c m32r-linux-tdep.c \
  m68k-tdep.c \
  m68kbsd-nat.c m68kbsd-tdep.c \
  m88k-tdep.c m88kbsd-nat.c \
  mcore-tdep.c \
  mips-linux-nat.c mips-linux-tdep.c \
  mips-irix-tdep.c \
  mips-tdep.c mipsm3-nat.c mipsv4-nat.c \
  mipsnbsd-nat.c mipsnbsd-tdep.c \
  mips64obsd-nat.c mips64obsd-tdep.c \
  nbsd-tdep.c \
  ns32k-tdep.c solib-osf.c \
  somread.c solib-som.c $(HPREAD_SOURCE) \
  ppc-sysv-tdep.c ppc-linux-nat.c ppc-linux-tdep.c \
  ppcnbsd-nat.c ppcnbsd-tdep.c \
  ppcobsd-nat.c ppcobsd-tdep.c \
  procfs.c \
  remote-e7000.c \
  remote-hms.c remote-m32r-sdi.c remote-mips.c \
  remote-rdp.c remote-sim.c \
  remote-st.c remote-utils.c dcache.c \
  rs6000-nat.c rs6000-tdep.c \
  s390-tdep.c s390-nat.c \
  ser-go32.c ser-pipe.c ser-tcp.c \
  sh-tdep.c sh64-tdep.c shnbsd-tdep.c shnbsd-nat.c \
  solib-irix.c solib-svr4.c solib-sunos.c \
  sparc-linux-tdep.c sparc-nat.c sparc-sol2-nat.c sparc-sol2-tdep.c \
  sparc-tdep.c sparc-sol2-nat.c sparc-sol2-tdep.c sparc64-linux-nat.c \
  sparc64-linux-tdep.c sparc64-nat.c sparc64-sol2-tdep.c \
  sparc64-tdep.c sparc64fbsd-nat.c sparc64fbsd-tdep.c \
  sparc64nbsd-nat.c sparc64nbsd-tdep.c sparc64obsd-tdep.c \
  sparcnbsd-nat.c sparcnbsd-tdep.c sparcobsd-tdep.c \
  symm-tdep.c symm-nat.c \
  v850-tdep.c \
  vax-nat.c vax-tdep.c vaxbsd-nat.c vaxnbsd-tdep.c \
  win32-nat.c \
  xcoffread.c xcoffsolib.c \
  xstormy16-tdep.c

# Some files need explict build rules (due to -Werror problems) or due
# to sub-directory fun-and-games.

# Provide explicit rule/dependency - works for more makes.
copying.o: $(srcdir)/copying.c @MAINT@ $(defs_h) $(command_h) $(gdbcmd_h)
	$(AM_V_COMPILER)$(COMPILER) -c $(INTERNAL_CFLAGS) \
	  $(GDB_WARN_CFLAGS_NO_OVERLENGTH_STRINGS) $(srcdir)/copying.c
	$(POSTCOMPILE)

hpux-thread.o: $(srcdir)/hpux-thread.c @MAINT@ $(defs_h)
	$(AM_V_CC)$(CC) -c $(INTERNAL_CFLAGS) \
	  ${acl_cv_wp}-I$(srcdir)/osf-share \
	  ${acl_cv_wp}-I$(srcdir)/osf-share/HP800 \
	  ${acl_cv_wp}-I/usr/include/dce $(srcdir)/hpux-thread.c
	$(POSTCOMPILE)

# main.o needs an explicit build rule to get TARGET_SYSTEM_ROOT and BINDIR.
main.o: main.c @MAINT@ $(defs_h)
	$(AM_V_COMPILER)$(COMPILER) -c $(INTERNAL_CFLAGS) \
	  $(TARGET_SYSTEM_ROOT_DEFINE) -DBINDIR=\"$(bindir)\" \
	  $(srcdir)/main.c
	$(POSTCOMPILE)

# maybe some special flags will help this one along:
standalone.o: standalone.c $(gdb_stat_h) $(defs_h) $(signals_h) $(symtab_h) \
  $(frame_h) $(inferior_h) $(wait_h)
	$(AM_V_COMPILER)$(COMPILER) -c $(INTERNAL_CFLAGS) \
	  -ffreestanding -std=gnu89 -fms-extensions -flax-vector-conversions \
	  $(srcdir)/standalone.c
	$(POSTCOMPILE)

# FIXME: cagney/2004-09-16: "gnu-v3-abi.c", with a GCC 3.4 compiler,
# gets a "assignment from incompatible pointer type" warning. The
# return types - "enum gnu_v3_dtor_kinds" vs "enum ctor_kinds" -
# conflict.
gnu-v3-abi.o: $(srcdir)/gnu-v3-abi.c @MAINT@ $(defs_h)
	$(AM_V_COMPILER)$(COMPILER) -c $(INTERNAL_WARN_CFLAGS) \
	  $(NO_WERROR_CFLAGS) $(srcdir)/gnu-v3-abi.c
	$(POSTCOMPILE)

# FIXME: cagney/2003-08-10: "monitor.c" gets -Wformat-nonliteral
# errors. It turns out that that is the least of monitor.c's
# problems. The function print_vsprintf appears to be using
# va_arg(long) to extract CORE_ADDR parameters - something that
# definitly will not work. "monitor.c" needs to be rewritten so that
# it does NOT use format strings and instead uses callbacks.
monitor.o: $(srcdir)/monitor.c @MAINT@ $(defs_h)
	$(AM_V_CC)$(CC) -c $(INTERNAL_WARN_CFLAGS) $(NO_WERROR_CFLAGS) \
	  $(srcdir)/monitor.c
	$(POSTCOMPILE)

# FIXME: cagney/2003-08-10: Do not try to build "printcmd.c" with
# -Wformat-nonliteral. It needs to be overhauled so that it does NOT
# pass user input strings as the format parameter to host printf
# function calls.
printcmd.o: $(srcdir)/printcmd.c $(printcmd_h) @MAINT@ $(defs_h)
	$(AM_V_COMPILER)$(COMPILER) -c $(INTERNAL_WARN_CFLAGS) \
	  $(NO_WERROR_CFLAGS) $(srcdir)/printcmd.c
	$(POSTCOMPILE)

# FIXME: Procfs.o gets -Wformat errors because things like pid_t do not
# match output format strings.
procfs.o: $(srcdir)/procfs.c @MAINT@ $(defs_h)
	$(AM_V_CC)$(CC) -c $(INTERNAL_WARN_CFLAGS) $(NO_WERROR_CFLAGS) \
	  $(srcdir)/procfs.c
	$(POSTCOMPILE)

# FIXME: Thread-db.o gets warnings because the definitions of the register
# sets are different from kernel to kernel.
linux-thread-db.o: $(srcdir)/linux-thread-db.c @MAINT@ $(defs_h)
	$(AM_V_CC)$(CC) -c $(INTERNAL_WARN_CFLAGS) $(NO_WERROR_CFLAGS) \
	  $(srcdir)/linux-thread-db.c
	$(POSTCOMPILE)

v850ice.o: $(srcdir)/v850ice.c @MAINT@ $(defs_h)
	$(AM_V_CC)$(CC) -c $(INTERNAL_CFLAGS) $(IDE_CFLAGS) \
	  $(ITCL_CFLAGS) $(TCL_CFLAGS) $(TK_CFLAGS) $(X11_CFLAGS) \
	  $(GDBTK_CFLAGS) $(srcdir)/v850ice.c
	$(POSTCOMPILE)

# ada-exp.c can appear in srcdir, for releases; or in ., for
# development builds.
ADA_EXP_C = `if test -f ada-exp.c; then echo ada-exp.c; else echo $(srcdir)/ada-exp.c; fi`

# likewise with go-exp.c:
GO_EXP_C = `if test -f go-exp.c; then echo go-exp.c; else echo $(srcdir)/go-exp.c; fi`

# Some versions of flex give output that triggers
# -Wold-style-definition.
ada-exp.o: ada-exp.c
	$(AM_V_COMPILER)$(COMPILE.pre) $(INTERNAL_CFLAGS) \
	  $(GDB_WARN_CFLAGS_NO_DEFS) $(COMPILE.post) $(ADA_EXP_C)
	$(POSTCOMPILE)

go-exp.o: go-exp.c
	$(AM_V_COMPILER)$(COMPILE.pre) $(INTERNAL_CFLAGS) \
	  $(GDB_WARN_CFLAGS_NO_DEFS) $(COMPILE.post) $(GO_EXP_C)
	$(POSTCOMPILE)

# Message files.  Based on code in gcc/Makefile.in.

# Rules for generating translated message descriptions.  Disabled by
# autoconf if the tools are not available.

.SUFFIXES: .po .gmo .pox .pot
.PHONY: all-po install-po uninstall-po clean-po update-po $(PACKAGE).pot

all-po: $(CATALOGS)

# This notation should be acceptable to all Make implementations used
# by people who are interested in updating .po files.
update-po: $(CATALOGS:.gmo=.pox)

# N.B. We do not attempt to copy these into $(srcdir).  The snapshot
# script does that.
.po.gmo:
	-test -d po || mkdir $(AM_V_v) po
	$(GMSGFMT) --statistics -o $@ $<

# The new .po has to be gone over by hand, so we deposit it into
# build/po with a different extension.  If build/po/$(PACKAGE).pot
# exists, use it (it was just created), else use the one in srcdir.
.po.pox:
	-test -d po || mkdir $(AM_V_v) po
	$(MSGMERGE) $< `if test -f po/$(PACKAGE).pot; \
			then echo po/$(PACKAGE).pot; \
			else echo $(srcdir)/po/$(PACKAGE).pot; fi` -o $@

# This rule has to look for .gmo modules in both srcdir and the cwd,
# and has to check that we actually have a catalog for each language,
# in case they were NOT built or included with the distribution.
install-po:
	$(RUN_MKINSTALLDIRS) $(DESTDIR)$(datadir)
	cats="$(CATALOGS)"; for cat in $${cats}; do \
	  lang=`basename $${cat} | $(SED) 's/\.gmo$$//'`; \
	  if [ -f $${cat} ]; then echo "'$${cat}' exists as a file"; \
	  elif [ -f $(srcdir)/$${cat} ]; then cat=$(srcdir)/$${cat}; \
	  else continue; \
	  fi; \
	  dir=$(localedir)/$${lang}/LC_MESSAGES; \
	  echo $(RUN_MKINSTALLDIRS) $(DESTDIR)$${dir}; \
	  $(RUN_MKINSTALLDIRS) $(DESTDIR)$${dir} || exit 1; \
	  echo $(INSTALL_DATA) $${cat} $(DESTDIR)$${dir}/$(PACKAGE).mo; \
	  $(INSTALL_DATA) $${cat} $(DESTDIR)$${dir}/$(PACKAGE).mo; \
	done
uninstall-po:
	cats="$(CATALOGS)"; for cat in $${cats}; do \
	  lang=`basename $${cat} | $(SED) 's/\.gmo$$//'`; \
	  if [ -f $${cat} ]; then echo "'$${cat}' exists as a file"; \
	  elif [ -f $(srcdir)/$${cat} ]; then cat=$(srcdir)/$${cat}; \
	  else continue; \
	  fi; \
	  dir=$(localedir)/$${lang}/LC_MESSAGES; \
	  rm -f $(AM_V_v) $(DESTDIR)$${dir}/$(PACKAGE).mo; \
	done
# Delete po/*.gmo only if we are not building in the source directory.
clean-po:
	-if [ ! -f Makefile.in ]; then rm -f $(AM_V_v) po/*.gmo; fi

# Rule for regenerating the message template (gdb.pot).  Instead of
# forcing everyone to edit POTFILES.in, which proved impractical, this
# rule has no dependencies and always regenerates gdb.pot.  This is
# relatively harmless since the .po files do not directly depend on
# it. The .pot file is left in the build directory.  Since GDB's
# Makefile lacks a cannonical list of sources (missing xm, tm and nm
# files) force this rule.
$(PACKAGE).pot: po/$(PACKAGE).pot
po/$(PACKAGE).pot: force
	-test -d po || mkdir $(AM_V_v) po
	$(SHELL) -e $(srcdir)/po/gdbtext $(XGETTEXT) $(PACKAGE) . $(srcdir)


#
# YACC/LEX dependencies
#
# LANG-exp.c is generated in objdir from LANG-exp.y if it does NOT
# exist in srcdir, then compiled in objdir to LANG-exp.o. If we
# said LANG-exp.c rather than ./c-exp.c some makes would
# sometimes re-write it into $(srcdir)/c-exp.c. Remove bogus
# decls for malloc/realloc/free which conflict with everything else.
# Strictly speaking c-exp.c should therefore depend on
# Makefile.in, but that was a pretty big annoyance.
# It might be worth trying that again, though.
# Also beware of whether or not the "$(YACC)" make variable is
# quoted or not.
#

.SUFFIXES: .y .l
.y.c:
	$(AM_V_at)touch $<
	@if [ "x$(AM_V_P)" != "xfalse" ]; then \
	  echo YACC command is "$(YACC)"; \
	fi
	$(SHELL) $(YLWRAP) $< y.tab.c $@.tmp -- $(YACC) $(YFLAGS)
	-$(SED) -e '/extern.*malloc/d' \
	     -e '/extern.*realloc/d' \
	     -e '/extern.*free/d' \
	     -e '/include.*malloc.h/d' \
	     -e 's/\([^x]\)malloc/\1xmalloc/g' \
	     -e 's/\([^x]\)realloc/\1xrealloc/g' \
	     -e 's/\([^x]\)free/\1xfree/g' \
	     -e '/^#line.*y.tab.c/d' \
	  < $@.tmp > $@.new
	-rm -f $(AM_V_v) $@.tmp
	mv $(AM_V_v) $@.new ./$*.c
.l.c:
	if [ "$(FLEX)" ] && $(FLEX) --version >/dev/null 2>&1; then \
	    touch $< && \
	    $(FLEX) -o$@ $< && \
	    rm -f $(AM_V_v) $@.new && \
	    $(SED) -e '/extern.*malloc/d' \
	        -e '/extern.*realloc/d' \
	        -e '/extern.*free/d' \
	        -e '/include.*malloc.h/d' \
	        -e 's/\([^x]\)malloc/\1xmalloc/g' \
	        -e 's/\([^x]\)realloc/\1xrealloc/g' \
		-e 's/yy_flex_xrealloc/yyxrealloc/g' \
	        -e 's/\([^x]\)free/\1xfree/g' \
	      < $@ > $@.new && \
	    rm -f $(AM_V_v) $@ && \
	    mv $(AM_V_v) $@.new $@; \
	elif [ -f $@ ]; then \
	    echo "Warning: $*.c older than $*.l and flex not available."; \
	else \
	    echo "$@ missing and flex not available."; \
	    false; \
	fi

.PRECIOUS: ada-exp.c ada-lex.c
.PRECIOUS: c-exp.c
.PRECIOUS: f-exp.c
.PRECIOUS: jv-exp.c
.PRECIOUS: m2-exp.c
.PRECIOUS: objc-exp.c
.PRECIOUS: p-exp.c
.PRECIOUS: go-exp.c

#
# gdb/ dependencies
#

abug-rom.o: abug-rom.c $(defs_h) $(gdbcore_h) $(target_h) $(monitor_h) \
  $(serial_h) $(regcache_h) $(m68k_tdep_h)
ada-exp.o: ada-exp.c $(defs_h) $(gdb_string_h) $(expression_h) $(value_h) \
  $(parser_defs_h) $(language_h) $(ada_lang_h) $(bfd_h) $(symfile_h) \
  $(objfiles_h) $(frame_h) $(block_h) $(ada_lex_c)
ada-lang.o: ada-lang.c $(defs_h) $(gdb_string_h) $(demangle_h) \
  $(gdb_regex_h) $(frame_h) $(symtab_h) $(gdbtypes_h) $(gdbcmd_h) \
  $(expression_h) $(parser_defs_h) $(language_h) $(c_lang_h) \
  $(inferior_h) $(symfile_h) $(objfiles_h) $(breakpoint_h) $(gdbcore_h) \
  $(hashtab_h) $(gdb_obstack_h) $(ada_lang_h) $(completer_h) \
  $(gdb_stat_h) $(ui_out_h) $(block_h) $(infcall_h) $(dictionary_h) \
  $(exceptions_h)
ada-typeprint.o: ada-typeprint.c $(defs_h) $(gdb_obstack_h) $(bfd_h) \
  $(symtab_h) $(gdbtypes_h) $(expression_h) $(value_h) $(gdbcore_h) \
  $(target_h) $(command_h) $(gdbcmd_h) $(language_h) $(demangle_h) \
  $(c_lang_h) $(typeprint_h) $(ada_lang_h) $(gdb_string_h)
ada-valprint.o: ada-valprint.c $(defs_h) $(gdb_string_h) $(symtab_h) \
  $(gdbtypes_h) $(expression_h) $(value_h) $(demangle_h) $(valprint_h) \
  $(language_h) $(annotate_h) $(ada_lang_h) $(c_lang_h) $(infcall_h) \
  $(exceptions_h)
aix-thread.o: aix-thread.c $(defs_h) $(gdb_assert_h) $(gdbthread_h) \
  $(target_h) $(inferior_h) $(regcache_h) $(gdbcmd_h) $(ppc_tdep_h) \
  $(gdb_string_h)
alphabsd-nat.o: alphabsd-nat.c $(defs_h) $(inferior_h) $(regcache_h) \
  $(alpha_tdep_h) $(alphabsd_tdep_h) $(inf_ptrace_h) $(gregset_h)
alphabsd-tdep.o: alphabsd-tdep.c $(defs_h) $(alpha_tdep_h) \
  $(alphabsd_tdep_h)
alphafbsd-tdep.o: alphafbsd-tdep.c $(defs_h) $(value_h) $(osabi_h) \
  $(alpha_tdep_h)
alpha-linux-tdep.o: alpha-linux-tdep.c $(defs_h) $(frame_h) \
  $(gdb_assert_h) $(osabi_h) $(solib_svr4_h) $(alpha_tdep_h)
alpha-mdebug-tdep.o: alpha-mdebug-tdep.c $(defs_h) $(frame_h) \
  $(frame_unwind_h) $(frame_base_h) $(symtab_h) $(gdbcore_h) \
  $(block_h) $(gdb_assert_h) $(alpha_tdep_h) $(mdebugread_h)
alpha-nat.o: alpha-nat.c $(defs_h) $(gdb_string_h) $(inferior_h) \
  $(gdbcore_h) $(target_h) $(regcache_h) $(alpha_tdep_h) $(gregset_h)
alphanbsd-tdep.o: alphanbsd-tdep.c $(defs_h) $(gdbcore_h) $(frame_h) \
  $(regcache_h) $(value_h) $(osabi_h) $(gdb_string_h) $(alpha_tdep_h) \
  $(alphabsd_tdep_h) $(nbsd_tdep_h) $(solib_svr4_h)
alpha-osf1-tdep.o: alpha-osf1-tdep.c $(defs_h) $(frame_h) $(gdbcore_h) \
  $(value_h) $(osabi_h) $(gdb_string_h) $(objfiles_h) $(alpha_tdep_h)
alpha-tdep.o: alpha-tdep.c $(defs_h) $(doublest_h) $(frame_h) \
  $(frame_unwind_h) $(frame_base_h) $(dwarf2_frame_h) $(inferior_h) \
  $(symtab_h) $(value_h) $(gdbcmd_h) $(gdbcore_h) $(dis_asm_h) \
  $(symfile_h) $(objfiles_h) $(gdb_string_h) $(linespec_h) $(regcache_h) \
  $(reggroups_h) $(arch_utils_h) $(osabi_h) $(block_h) $(infcall_h) \
  $(elf_bfd_h) $(alpha_tdep_h)
amd64bsd-nat.o: amd64bsd-nat.c $(defs_h) $(inferior_h) $(regcache_h) \
  $(target_h) $(gdb_assert_h) $(amd64_tdep_h) $(amd64_nat_h) \
  $(inf_ptrace_h)
amd64fbsd-nat.o: amd64fbsd-nat.c $(defs_h) $(inferior_h) $(regcache_h) \
  $(target_h) $(gdb_assert_h) $(fbsd_nat_h) $(amd64_tdep_h) \
  $(amd64_nat_h) $(bsd_kvm_h)
amd64fbsd-tdep.o: amd64fbsd-tdep.c $(defs_h) $(arch_utils_h) $(frame_h) \
  $(gdbcore_h) $(regcache_h) $(osabi_h) $(gdb_assert_h) $(gdb_string_h) \
  $(amd64_tdep_h) $(bsd_uthread_h) $(solib_svr4_h)
amd64-linux-nat.o: amd64-linux-nat.c $(defs_h) $(inferior_h) $(gdbcore_h) \
  $(regcache_h) $(linux_nat_h) $(gdb_assert_h) $(gdb_string_h) \
  $(gdb_proc_service_h) $(gregset_h) $(amd64_tdep_h) $(i386_linux_tdep_h) \
  $(amd64_nat_h)
amd64-linux-tdep.o: amd64-linux-tdep.c $(defs_h) $(frame_h) $(gdbcore_h) \
  $(regcache_h) $(osabi_h) $(symtab_h) $(gdb_string_h) $(amd64_tdep_h) \
  $(solib_svr4_h)
amd64-nat.o: amd64-nat.c $(defs_h) $(gdbarch_h) $(regcache_h) \
  $(gdb_assert_h) $(gdb_string_h) $(i386_tdep_h) $(amd64_tdep_h)
amd64nbsd-nat.o: amd64nbsd-nat.c $(defs_h) $(target_h) $(gdb_assert_h) \
  $(amd64_tdep_h) $(amd64_nat_h)
amd64nbsd-tdep.o: amd64nbsd-tdep.c $(defs_h) $(arch_utils_h) $(frame_h) \
  $(gdbcore_h) $(osabi_h) $(symtab_h) $(gdb_assert_h) $(amd64_tdep_h) \
  $(nbsd_tdep_h) $(solib_svr4_h)
amd64obsd-nat.o: amd64obsd-nat.c $(defs_h) $(gdbcore_h) $(regcache_h) \
  $(target_h) $(gdb_assert_h) $(amd64_tdep_h) $(amd64_nat_h) $(bsd_kvm_h)
amd64obsd-tdep.o: amd64obsd-tdep.c $(defs_h) $(frame_h) $(gdbcore_h) \
  $(symtab_h) $(objfiles_h) $(osabi_h) $(regset_h) $(target_h) \
  $(gdb_assert_h) $(gdb_string_h) $(amd64_tdep_h) $(i387_tdep_h) \
  $(solib_svr4_h)
amd64-sol2-tdep.o: amd64-sol2-tdep.c $(defs_h) $(frame_h) $(gdbcore_h) \
  $(regcache_h) $(osabi_h) $(symtab_h) $(gdb_string_h) $(amd64_tdep_h) \
  $(solib_svr4_h)
amd64-tdep.o: amd64-tdep.c $(defs_h) $(arch_utils_h) $(block_h) \
  $(dummy_frame_h) $(exceptions_h) $(frame_h) $(frame_base_h) \
  $(frame_unwind_h) $(inferior_h) $(gdbcmd_h) $(gdbcore_h) \
  $(objfiles_h) $(regcache_h) $(regset_h) $(symfile_h) \
  $(complaints_h) $(gdb_assert_h) $(amd64_tdep_h) $(i387_tdep_h) \
  $(x86_shared_tdep_h) $(i386_amd64_shared_tdep_h)
annotate.o: annotate.c $(defs_h) $(annotate_h) $(value_h) $(target_h) \
  $(gdbtypes_h) $(breakpoint_h) $(ansidecl_h)
arch-utils.o: arch-utils.c $(defs_h) $(config_h) $(arch_utils_h) \
  $(buildsym_h) $(gdbcmd_h) $(inferior_h) $(gdb_string_h) $(regcache_h) \
  $(gdb_assert_h) $(sim_regno_h) $(gdbcore_h) $(osabi_h) $(libbfd_h) \
  $(version_h) $(floatformat_h)
arm-linux-nat.o: arm-linux-nat.c $(defs_h) $(inferior_h) $(gdbcore_h) \
  $(gdb_string_h) $(regcache_h) $(arm_tdep_h) $(gregset_h)
arm-linux-tdep.o: arm-linux-tdep.c $(defs_h) $(target_h) $(value_h) \
  $(gdbtypes_h) $(floatformat_h) $(gdbcore_h) $(frame_h) $(regcache_h) \
  $(doublest_h) $(solib_svr4_h) $(osabi_h) $(arm_tdep_h) $(glibc_tdep_h)
armnbsd-nat.o: armnbsd-nat.c $(defs_h) $(gdbcore_h) $(inferior_h) \
  $(regcache_h) $(target_h) $(gdb_string_h) $(arm_tdep_h) $(inf_ptrace_h)
armnbsd-tdep.o: armnbsd-tdep.c $(defs_h) $(osabi_h) $(gdb_string_h) \
  $(arm_tdep_h) $(nbsd_tdep_h) $(solib_svr4_h)
arm-tdep.o: arm-tdep.c $(defs_h) $(frame_h) $(inferior_h) $(gdbcmd_h) \
  $(gdbcore_h) $(gdb_string_h) $(dis_asm_h) $(regcache_h) $(reggroups_h) \
  $(doublest_h) $(value_h) $(arch_utils_h) $(osabi_h) $(frame_unwind_h) \
  $(frame_base_h) $(trad_frame_h) $(objfiles_h) $(dwarf2_frame_h) \
  $(arm_tdep_h) $(gdb_sim_arm_h) $(elf_bfd_h) $(coff_internal_h) \
  $(elf_arm_h) $(gdb_assert_h) $(bfd_in2_h) $(libcoff_h)
auxv.o: auxv.c $(defs_h) $(target_h) $(gdbtypes_h) $(command_h) \
  $(inferior_h) $(valprint_h) $(gdb_assert_h) $(auxv_h) $(elf_common_h)
avr-tdep.o: avr-tdep.c $(defs_h) $(frame_h) $(frame_unwind_h) \
  $(frame_base_h) $(trad_frame_h) $(gdbcmd_h) $(gdbcore_h) $(inferior_h) \
  $(symfile_h) $(arch_utils_h) $(regcache_h) $(gdb_string_h) $(dis_asm_h)
ax-gdb.o: ax-gdb.c $(defs_h) $(symtab_h) $(symfile_h) $(gdbtypes_h) \
  $(value_h) $(expression_h) $(command_h) $(gdbcmd_h) $(frame_h) \
  $(target_h) $(ax_h) $(ax_gdb_h) $(gdb_string_h) $(block_h) $(regcache_h)
ax-general.o: ax-general.c $(defs_h) $(ax_h) $(value_h) $(gdb_string_h)
bcache.o: bcache.c $(defs_h) $(gdb_obstack_h) $(bcache_h) $(gdb_string_h) \
  $(gdb_assert_h)
bfd-target.o: bfd-target.c $(defs_h) $(target_h) $(bfd_target_h) \
  $(gdb_assert_h) $(gdb_string_h)
block.o: block.c $(defs_h) $(block_h) $(symtab_h) $(symfile_h) \
  $(gdb_obstack_h) $(cp_support_h) $(inferior_h)
blockframe.o: blockframe.c $(defs_h) $(symtab_h) $(bfd_h) $(objfiles_h) \
  $(frame_h) $(gdbcore_h) $(value_h) $(target_h) $(inferior_h) \
  $(annotate_h) $(regcache_h) $(gdb_assert_h) $(dummy_frame_h) \
  $(command_h) $(gdbcmd_h) $(block_h)
# APPLE LOCAL begin subroutine inlining:
breakpoint.o: breakpoint.c $(defs_h) $(symtab_h) $(frame_h) \
  $(breakpoint_h) $(gdbtypes_h) $(expression_h) $(gdbcore_h) $(gdbcmd_h) \
  $(value_h) $(command_h) $(inferior_h) $(gdbthread_h) $(target_h) \
  $(language_h) $(gdb_string_h) $(demangle_h) $(annotate_h) $(symfile_h) \
  $(objfiles_h) $(source_h) $(linespec_h) $(completer_h) $(gdb_h) \
  $(ui_out_h) $(cli_script_h) $(cli_out_h) $(gdb_assert_h) $(block_h) \
  $(wrapper_h) $(solib_h) $(solist_h) $(observer_h) $(exceptions_h) \
  $(gdb_regex_h) $(gdb_events_h) $(readline_tilde_h) $(mi_common_h) \
  $(inlining_h) $(objc_lang_h) $(srcdir)/config/i386/nm-i386.h
# APPLE LOCAL end subroutine inlining
bsd-kvm.o: bsd-kvm.c $(defs_h) $(cli_cmds_h) $(command_h) $(frame_h) \
  $(regcache_h) $(target_h) $(value_h) $(gdbcore_h) $(gdb_assert_h) \
  $(readline_h) $(bsd_kvm_h)
bsd-uthread.o: bsd-uthread.c $(defs_h) $(gdbcore_h) $(gdbthread_h) \
  $(inferior_h) $(objfiles_h) $(observer_h) $(regcache_h) $(solib_h) \
  $(solist_h) $(symfile_h) $(target_h) $(gdb_assert_h) $(gdb_obstack_h) \
  $(bsd_uthread_h)
buildsym.o: buildsym.c $(defs_h) $(bfd_h) $(gdb_obstack_h) $(symtab_h) \
  $(symfile_h) $(objfiles_h) $(gdbtypes_h) $(gdb_assert_h) \
  $(complaints_h) $(gdb_string_h) $(expression_h) $(bcache_h) \
  $(filenames_h) $(macrotab_h) $(demangle_h) $(block_h) $(cp_support_h) \
  $(dictionary_h) $(inlining_h) $(buildsym_h) $(stabsread_h)
c-exp.o: c-exp.c $(defs_h) $(gdb_string_h) $(expression_h) $(value_h) \
  $(parser_defs_h) $(language_h) $(c_lang_h) $(bfd_h) $(symfile_h) \
  $(objfiles_h) $(charset_h) $(block_h) $(cp_support_h) $(objc_lang_h)
charset.o: charset.c $(defs_h) $(charset_h) $(gdbcmd_h) $(gdb_assert_h) \
  $(gdb_string_h)
c-lang.o: c-lang.c $(defs_h) $(symtab_h) $(gdbtypes_h) $(expression_h) \
  $(parser_defs_h) $(language_h) $(c_lang_h) $(valprint_h) \
  $(macroscope_h) $(gdb_assert_h) $(charset_h) $(gdb_string_h) \
  $(demangle_h) $(cp_support_h)
# APPLE LOCAL checkpoints:
checkpoint.o: checkpoint.c $(defs_h) $(symtab_h) $(target_h) $(frame_h) \
  $(command_h) $(gdbcmd_h) $(regcache_h) $(inferior_h) $(checkpoint_h) \
  $(macosx_nat_inferior_h)
# END APPLE LOCAL target
cli-out.o: cli-out.c $(defs_h) $(ui_out_h) $(cli_out_h) $(gdb_string_h) \
  $(gdb_assert_h) $(mi_console_h)
coff-pe-read.o: coff-pe-read.c $(coff_pe_read_h) $(bfd_h) $(defs_h) \
  $(gdbtypes_h) $(symtab_h) $(symfile_h) $(objfiles_h)
coffread.o: coffread.c $(defs_h) $(symtab_h) $(gdbtypes_h) $(demangle_h) \
  $(breakpoint_h) $(bfd_h) $(gdb_obstack_h) $(gdb_string_h) \
  $(coff_internal_h) $(libcoff_h) $(objfiles_h) $(buildsym_h) \
  $(gdb_stabs_h) $(stabsread_h) $(complaints_h) $(target_h) \
  $(gdb_assert_h) $(block_h) $(dictionary_h) $(coff_pe_read_h)
coff-solib.o: coff-solib.c $(defs_h) $(frame_h) $(bfd_h) $(gdbcore_h) \
  $(symtab_h) $(symfile_h) $(objfiles_h)
complaints.o: complaints.c $(defs_h) $(complaints_h) $(gdb_assert_h) \
  $(command_h) $(gdbcmd_h)
completer.o: completer.c $(defs_h) $(symtab_h) $(gdbtypes_h) \
  $(expression_h) $(filenames_h) $(language_h) $(cli_decode_h) \
  $(gdbcmd_h) $(readline_h) $(completer_h)
copying.o: copying.c $(defs_h) $(command_h) $(gdbcmd_h)
core-aout.o: core-aout.c $(defs_h) $(gdbcore_h) $(value_h) $(regcache_h) \
  $(gdb_dirent_h) $(gdb_stat_h)
corefile.o: corefile.c $(defs_h) $(gdb_string_h) $(inferior_h) \
  $(symtab_h) $(command_h) $(gdbcmd_h) $(bfd_h) $(target_h) $(gdbcore_h) \
  $(dis_asm_h) $(gdb_stat_h) $(completer_h) $(symfile_h) $(objfiles_h) \
  $(objc_lang_h) $(exceptions_h)
corelow.o: corelow.c $(defs_h) $(arch_utils_h) $(gdb_string_h) $(frame_h) \
  $(inferior_h) $(symtab_h) $(command_h) $(bfd_h) $(target_h) \
  $(gdbcore_h) $(gdbthread_h) $(regcache_h) $(regset_h) $(symfile_h) \
  $(exec_h) $(readline_h) $(observer_h) $(gdb_assert_h) $(exceptions_h) \
  $(solib_h) $(inlining_h)
core-regset.o: core-regset.c $(defs_h) $(command_h) $(gdbcore_h) \
  $(inferior_h) $(target_h) $(gdb_string_h) $(gregset_h)
cp-abi.o: cp-abi.c $(defs_h) $(value_h) $(cp_abi_h) $(command_h) \
  $(gdbcmd_h) $(ui_out_h) $(gdb_string_h)
cp-name-parser.o: cp-name-parser.c $(safe_ctype_h) $(libiberty_h) \
  $(demangle_h) $(cp_support_h)
cp-namespace.o: cp-namespace.c $(defs_h) $(cp_support_h) $(gdb_obstack_h) \
  $(symtab_h) $(symfile_h) $(gdb_assert_h) $(block_h) $(objfiles_h) \
  $(gdbtypes_h) $(dictionary_h) $(command_h) $(frame_h)
cp-support.o: cp-support.c $(defs_h) $(cp_support_h) $(gdb_string_h) \
  $(demangle_h) $(gdb_assert_h) $(gdbcmd_h) $(dictionary_h) $(objfiles_h) \
  $(frame_h) $(symtab_h) $(block_h) $(complaints_h) $(gdbtypes_h)
cpu32bug-rom.o: cpu32bug-rom.c $(defs_h) $(gdbcore_h) $(target_h) \
  $(monitor_h) $(serial_h) $(regcache_h) $(m68k_tdep_h)
cp-valprint.o: cp-valprint.c $(defs_h) $(gdb_obstack_h) $(symtab_h) \
  $(gdbtypes_h) $(expression_h) $(value_h) $(command_h) $(gdbcmd_h) \
  $(demangle_h) $(annotate_h) $(gdb_string_h) $(c_lang_h) $(target_h) \
  $(cp_abi_h) $(valprint_h) $(cp_support_h) $(language_h)
cris-tdep.o: cris-tdep.c $(defs_h) $(frame_h) $(frame_unwind_h) \
  $(frame_base_h) $(trad_frame_h) $(dwarf2_frame_h) $(symtab_h) \
  $(inferior_h) $(gdbtypes_h) $(gdbcore_h) $(gdbcmd_h) $(target_h) \
  $(value_h) $(opcode_cris_h) $(arch_utils_h) $(regcache_h) \
  $(gdb_assert_h) $(objfiles_h) $(solib_h) $(solib_svr4_h) \
  $(gdb_string_h) $(dis_asm_h)
c-typeprint.o: c-typeprint.c $(defs_h) $(gdb_obstack_h) $(bfd_h) \
  $(symtab_h) $(gdbtypes_h) $(expression_h) $(value_h) $(gdbcore_h) \
  $(target_h) $(language_h) $(demangle_h) $(c_lang_h) $(typeprint_h) \
  $(cp_abi_h) $(gdb_string_h)
c-valprint.o: c-valprint.c $(defs_h) $(gdb_string_h) $(symtab_h) \
  $(gdbtypes_h) $(expression_h) $(value_h) $(valprint_h) $(language_h) \
  $(c_lang_h) $(cp_abi_h) $(target_h)
d10v-tdep.o: d10v-tdep.c $(defs_h) $(frame_h) $(frame_unwind_h) \
  $(frame_base_h) $(symtab_h) $(gdbtypes_h) $(gdbcmd_h) $(gdbcore_h) \
  $(gdb_string_h) $(value_h) $(inferior_h) $(dis_asm_h) $(symfile_h) \
  $(objfiles_h) $(language_h) $(arch_utils_h) $(regcache_h) $(remote_h) \
  $(floatformat_h) $(gdb_sim_d10v_h) $(sim_regno_h) $(disasm_h) \
  $(trad_frame_h) $(gdb_assert_h)
dbug-rom.o: dbug-rom.c $(defs_h) $(gdbcore_h) $(target_h) $(monitor_h) \
  $(serial_h) $(regcache_h) $(m68k_tdep_h)
dbxread.o: dbxread.c $(defs_h) $(gdb_string_h) $(gdb_obstack_h) \
  $(gdb_stat_h) $(symtab_h) $(breakpoint_h) $(command_h) $(gdbcmd_h) \
  $(target_h) $(gdbcore_h) $(libaout_h) $(objfiles_h) $(buildsym_h) \
  $(stabsread_h) $(gdb_stabs_h) $(demangle_h) $(complaints_h) $(cp_abi_h) \
  $(mach_o_h) $(block_h) $(macosx_nat_dyld_h) $(gdb_assert_h) \
  $(gdb_string_h) $(aout_aout64_h) $(aout_stab_gnu_h)
dcache.o: dcache.c $(defs_h) $(dcache_h) $(gdbcmd_h) $(gdb_string_h) \
  $(gdbcore_h) $(target_h)
demangle.o: demangle.c $(defs_h) $(command_h) $(gdbcmd_h) $(demangle_h) \
  $(gdb_string_h)
dictionary.o: dictionary.c $(defs_h) $(gdb_obstack_h) $(symtab_h) \
  $(buildsym_h) $(gdb_assert_h) $(dictionary_h)
dink32-rom.o: dink32-rom.c $(defs_h) $(gdbcore_h) $(target_h) \
  $(monitor_h) $(serial_h) $(symfile_h) $(inferior_h) $(regcache_h)
disasm.o: disasm.c $(defs_h) $(target_h) $(value_h) $(ui_out_h) \
  $(gdb_string_h) $(disasm_h) $(gdbcore_h) $(dis_asm_h) $(gdb_assert_h)
doublest.o: doublest.c $(defs_h) $(doublest_h) $(floatformat_h) \
  $(gdb_assert_h) $(gdb_string_h) $(gdbtypes_h)
dsrec.o: dsrec.c $(defs_h) $(serial_h) $(srec_h) $(gdb_assert_h) \
  $(gdb_string_h)
dummy-frame.o: dummy-frame.c $(defs_h) $(dummy_frame_h) $(regcache_h) \
  $(frame_h) $(inferior_h) $(gdb_assert_h) $(frame_unwind_h) $(command_h) \
  $(gdbcmd_h) $(gdb_string_h) $(inlining_h)
dve3900-rom.o: dve3900-rom.c $(defs_h) $(gdbcore_h) $(target_h) \
  $(monitor_h) $(serial_h) $(inferior_h) $(command_h) $(gdb_string_h) \
  $(regcache_h) $(mips_tdep_h)
dwarf2expr.o: dwarf2expr.c $(defs_h) $(symtab_h) $(gdbtypes_h) $(value_h) \
  $(gdbcore_h) $(elf_dwarf2_h) $(dwarf2expr_h) $(exceptions_h) \
  $(dwarf2_frame_h) $(dwarf2loc_h) $(objfiles_h)
dwarf2-frame.o: dwarf2-frame.c $(defs_h) $(dwarf2expr_h) $(elf_dwarf2_h) \
  $(frame_h) $(frame_base_h) $(frame_unwind_h) $(gdbcore_h) $(gdbtypes_h) \
  $(symtab_h) $(objfiles_h) $(regcache_h) $(value_h) $(dwarf2read_h) \
  $(gdb_assert_h) $(gdb_string_h) $(complaints_h) $(dwarf2_frame_h)
dwarf2loc.o: dwarf2loc.c $(defs_h) $(ui_out_h) $(value_h) $(frame_h) \
  $(gdbcore_h) $(target_h) $(inferior_h) $(ax_h) $(ax_gdb_h) \
  $(regcache_h) $(objfiles_h) $(exceptions_h) $(elf_dwarf2_h) \
  $(dwarf2expr_h) $(dwarf2loc_h) $(dwarf2read_h) $(gdb_string_h) \
  $(macosx_tdep_h)
# APPLE LOCAL begin subroutine inlining:
dwarf2read.o: dwarf2read.c $(defs_h) $(bfd_h) $(symtab_h) $(gdbtypes_h) \
  $(objfiles_h) $(elf_dwarf2_h) $(buildsym_h) $(demangle_h) \
  $(expression_h) $(filenames_h) $(macrotab_h) $(language_h) \
  $(complaints_h) $(bcache_h) $(dwarf2expr_h) $(dwarf2loc_h) \
  $(cp_support_h) $(hashtab_h) $(command_h) $(gdbcmd_h) $(gdb_string_h) \
  $(gdb_assert_h) $(db_access_functions_h) $(symfile_h) $(inlining_h) \
  $(block_h) $(gdbcore_h) $(dwarf2read_h) $(objc_lang_h)
dwarf2read-repository.o: dwarf2read-repository.c $(defs_h) $(dwarf2read_h) \
  $(gdb_assert_h) $(elf_dwarf2_h)
# APPLE LOCAL end subroutine inlining
dwarfread.o: dwarfread.c $(defs_h) $(symtab_h) $(gdbtypes_h) $(objfiles_h) \
  $(elf_dwarf_h) $(buildsym_h) $(demangle_h) $(expression_h) $(language_h) \
  $(complaints_h) $(gdb_string_h) $(dwarfread_h)
elfread.o: elfread.c $(defs_h) $(bfd_h) $(gdb_string_h) $(elf_bfd_h) \
  $(elf_mips_h) $(symtab_h) $(symfile_h) $(objfiles_h) $(buildsym_h) \
  $(stabsread_h) $(gdb_stabs_h) $(complaints_h) $(demangle_h)
environ.o: environ.c $(defs_h) $(environ_h) $(gdb_string_h)
eval.o: eval.c $(defs_h) $(gdb_string_h) $(symtab_h) $(gdbtypes_h) \
  $(value_h) $(expression_h) $(target_h) $(frame_h) $(language_h) \
  $(f_lang_h) $(cp_abi_h) $(infcall_h) $(objc_lang_h) $(block_h) \
  $(parser_defs_h) $(cp_support_h) $(eval_h)
event-loop.o: event-loop.c $(defs_h) $(event_loop_h) $(event_top_h) \
  $(interps_h) $(ui_out_h) $(gdb_string_h) $(exceptions_h) $(gdb_assert_h)
event-top.o: event-top.c $(defs_h) $(top_h) $(inferior_h) $(target_h) \
  $(terminal_h) $(event_loop_h) $(event_top_h) $(interps_h) \
  $(exceptions_h) $(gdbcmd_h) $(readline_h) $(readline_history_h)
exceptions.o: exceptions.c $(defs_h) $(exceptions_h) $(breakpoint_h) \
  $(target_h) $(inferior_h) $(annotate_h) $(ui_out_h) $(gdb_assert_h) \
  $(gdb_string_h) $(serial_h)
exec.o: exec.c $(defs_h) $(frame_h) $(inferior_h) $(target_h) $(gdbcmd_h) \
  $(language_h) $(symfile_h) $(objfiles_h) $(completer_h) $(value_h) \
  $(exec_h) $(observer_h) $(exceptions_h) $(osabi_h) $(readline_h) \
  $(gdb_string_h) $(gdbcore_h) $(gdb_stat_h) $(xcoffsolib_h) \
  $(macosx_nat_dyld_h)
expprint.o: expprint.c $(defs_h) $(symtab_h) $(gdbtypes_h) \
  $(expression_h) $(value_h) $(language_h) $(parser_defs_h) \
  $(user_regs_h) $(target_h) $(gdb_string_h) $(block_h)
fbsd-nat.o: fbsd-nat.c $(defs_h) $(gdbcore_h) $(inferior_h) $(regcache_h) \
  $(regset_h) $(gdb_assert_h) $(gdb_string_h) $(elf_bfd_h) $(fbsd_nat_h)
f-exp.o: f-exp.c $(defs_h) $(gdb_string_h) $(expression_h) $(value_h) \
  $(parser_defs_h) $(language_h) $(f_lang_h) $(bfd_h) $(symfile_h) \
  $(objfiles_h) $(block_h)
findvar.o: findvar.c $(defs_h) $(symtab_h) $(gdbtypes_h) $(frame_h) \
  $(value_h) $(gdbcore_h) $(inferior_h) $(target_h) $(gdb_string_h) \
  $(gdb_assert_h) $(floatformat_h) $(symfile_h) $(regcache_h) \
  $(user_regs_h) $(block_h)
f-lang.o: f-lang.c $(defs_h) $(gdb_string_h) $(symtab_h) $(gdbtypes_h) \
  $(expression_h) $(parser_defs_h) $(language_h) $(f_lang_h) \
  $(valprint_h) $(value_h)
fix-and-continue.o: fix-and-continue.c $(defs_h) $(value_h) \
  $(gdbthread_h) $(gdbtypes_h) $(objfiles_h) $(command_h) $(completer_h) \
  $(frame_h) $(target_h) $(gdbcore_h) $(inferior_h) $(symfile_h) $(gdb_h) \
  $(ui_out_h) $(cli_out_h) $(symtab_h) $(readline_h) $(regcache_h) \
  $(gdbcmd_h) $(language_h) macosx/ppc-macosx-frameinfo.h \
  macosx/ppc-macosx-tdep.h $(macosx_nat_dyld_process_h) $(fix_and_continue_h)
fork-child.o: fork-child.c $(defs_h) $(gdb_string_h) $(frame_h) \
  $(inferior_h) $(target_h) $(gdb_wait_h) $(gdb_vfork_h) $(gdbcore_h) \
  $(terminal_h) $(gdbthread_h) $(gdbcmd_h) $(command_h) $(solib_h) \
  $(osabi_h) $(fork_child_h)
frame-base.o: frame-base.c $(defs_h) $(frame_base_h) $(frame_h) \
  $(gdb_obstack_h)
# APPLE LOCAL begin subroutine inlining:
frame.o: frame.c $(defs_h) $(frame_h) $(target_h) $(value_h) \
  $(inferior_h) $(regcache_h) $(gdb_assert_h) $(gdb_string_h) \
  $(user_regs_h) $(gdb_obstack_h) $(dummy_frame_h) $(sentinel_frame_h) \
  $(gdbcore_h) $(annotate_h) $(language_h) $(frame_unwind_h) \
  $(frame_base_h) $(command_h) $(gdbcmd_h) $(observer_h) $(objfiles_h) \
  $(exceptions_h) $(inlining_h) $(top_h)
frame-unwind.o: frame-unwind.c $(defs_h) $(frame_h) $(frame_unwind_h) \
  $(gdb_assert_h) $(dummy_frame_h) $(gdb_obstack_h) $(inlining_h)
# APPLE LOCAL end subroutine inlining
frv-linux-tdep.o: frv-linux-tdep.c $(defs_h) $(target_h) $(frame_h) \
  $(osabi_h) $(elf_bfd_h) $(elf_frv_h) $(frv_tdep_h) $(trad_frame_h) \
  $(frame_unwind_h)
frv-tdep.o: frv-tdep.c $(defs_h) $(gdb_string_h) $(inferior_h) \
  $(gdbcore_h) $(arch_utils_h) $(regcache_h) $(frame_h) $(frame_unwind_h) \
  $(frame_base_h) $(trad_frame_h) $(dis_asm_h) $(gdb_assert_h) \
  $(sim_regno_h) $(gdb_sim_frv_h) $(opcodes_frv_desc_h) $(symtab_h) \
  $(elf_bfd_h) $(elf_frv_h) $(osabi_h) $(infcall_h) $(frv_tdep_h)
f-typeprint.o: f-typeprint.c $(defs_h) $(gdb_obstack_h) $(bfd_h) \
  $(symtab_h) $(gdbtypes_h) $(expression_h) $(value_h) $(gdbcore_h) \
  $(target_h) $(f_lang_h) $(gdb_string_h)
f-valprint.o: f-valprint.c $(defs_h) $(gdb_string_h) $(symtab_h) \
  $(gdbtypes_h) $(expression_h) $(value_h) $(valprint_h) $(language_h) \
  $(f_lang_h) $(frame_h) $(gdbcore_h) $(command_h) $(block_h)
gcore.o: gcore.c $(defs_h) $(elf_bfd_h) $(infcall_h) $(inferior_h) \
  $(gdbcore_h) $(objfiles_h) $(symfile_h) $(cli_decode_h) $(gdb_assert_h)
gdbarch.o: gdbarch.c $(defs_h) $(arch_utils_h) $(gdbcmd_h) $(inferior_h) \
  $(symcat_h) $(floatformat_h) $(gdb_assert_h) $(gdb_string_h) \
  $(gdb_events_h) $(reggroups_h) $(osabi_h) $(gdb_obstack_h)
gdb.o: gdb.c $(defs_h) $(main_h) $(gdb_string_h) $(interps_h)
gdb-events.o: gdb-events.c $(defs_h) $(gdb_events_h) $(gdbcmd_h)
gdbtypes.o: gdbtypes.c $(defs_h) $(gdb_string_h) $(bfd_h) $(symtab_h) \
  $(symfile_h) $(objfiles_h) $(gdbtypes_h) $(expression_h) $(language_h) \
  $(target_h) $(value_h) $(demangle_h) $(complaints_h) $(gdbcmd_h) \
  $(varobj_h) $(wrapper_h) $(cp_abi_h) $(gdb_assert_h) $(exceptions_h)
glibc-tdep.o: glibc-tdep.c $(defs_h) $(frame_h) $(symtab_h) $(symfile_h) \
  $(objfiles_h) $(glibc_tdep_h)
gnu-nat.o: gnu-nat.c $(gdb_string_h) $(defs_h) $(inferior_h) $(symtab_h) \
  $(value_h) $(language_h) $(target_h) $(gdb_wait_h) $(gdbcmd_h) \
  $(gdbcore_h) $(gdbthread_h) $(gdb_assert_h) $(gdb_obstack_h) \
  $(gnu_nat_h) $(exc_request_S_h) $(notify_S_h) $(process_reply_S_h) \
  $(msg_reply_S_h) $(exc_request_U_h) $(msg_U_h)
gnu-v2-abi.o: gnu-v2-abi.c $(defs_h) $(gdb_string_h) $(symtab_h) \
  $(gdbtypes_h) $(value_h) $(demangle_h) $(cp_abi_h) $(cp_support_h) \
  $(gnu_v2_abi_h)
gnu-v3-abi.o: gnu-v3-abi.c $(defs_h) $(value_h) $(cp_abi_h) \
  $(cp_support_h) $(demangle_h) $(gdb_assert_h) $(gdb_string_h)
go-exp.o: go-exp.c $(defs_h) $(gdb_assert_h) $(gdb_string_h) \
  $(expression_h) $(value_h) $(parser_defs_h) $(language_h) $(c_lang_h) \
  $(go_lang_h) $(bfd_h) $(symfile_h) $(objfiles_h) $(charset_h) $(block_h) 
go32-nat.o: go32-nat.c $(defs_h) $(inferior_h) $(gdb_wait_h) $(gdbcore_h) \
  $(command_h) $(gdbcmd_h) $(floatformat_h) $(buildsym_h) $(i387_tdep_h) \
  $(i386_tdep_h) $(value_h) $(regcache_h) $(gdb_string_h) $(top_h)
h8300-tdep.o: h8300-tdep.c $(defs_h) $(value_h) $(arch_utils_h) \
  $(regcache_h) $(gdbcore_h) $(objfiles_h) $(gdb_assert_h) $(dis_asm_h) \
  $(dwarf2_frame_h) $(frame_base_h) $(frame_unwind_h)
hpacc-abi.o: hpacc-abi.c $(defs_h) $(value_h) $(gdb_regex_h) \
  $(gdb_string_h) $(gdbtypes_h) $(gdbcore_h) $(cp_abi_h) $(gnu_v2_abi_h) \
  $(hpacc_abi_h)
hppabsd-nat.o: hppabsd-nat.c $(defs_h) $(inferior_h) $(regcache_h) \
  $(target_h) $(hppa_tdep_h) $(inf_ptrace_h)
hppabsd-tdep.o: hppabsd-tdep.c $(defs_h) $(arch_utils_h) $(symtab_h) \
  $(objfiles_h) $(osabi_h) $(regcache_h) $(regset_h) $(target_h) \
  $(value_h) $(gdb_assert_h) $(gdb_string_h) $(elf_common_h) \
  $(hppa_tdep_h) $(solib_svr4_h)
hppa-hpux-nat.o: hppa-hpux-nat.c $(defs_h) $(inferior_h) $(regcache_h) \
  $(target_h) $(gdb_assert_h) $(hppa_tdep_h) $(inf_ptrace_h) \
  $(inf_ttrace_h)
hppa-hpux-tdep.o: hppa-hpux-tdep.c $(defs_h) $(arch_utils_h) $(gdbcore_h) \
  $(osabi_h) $(frame_h) $(frame_unwind_h) $(trad_frame_h) $(symtab_h) \
  $(objfiles_h) $(inferior_h) $(infcall_h) $(observer_h) $(hppa_tdep_h) \
  $(solib_som_h) $(solib_pa64_h) $(regset_h) $(exceptions_h) \
  $(gdb_string_h)
hppa-linux-nat.o: hppa-linux-nat.c $(defs_h) $(gdbcore_h) $(regcache_h) \
  $(gdb_string_h) $(inferior_h) $(hppa_tdep_h) $(gregset_h)
hppa-linux-tdep.o: hppa-linux-tdep.c $(defs_h) $(gdbcore_h) $(osabi_h) \
  $(target_h) $(objfiles_h) $(solib_svr4_h) $(glibc_tdep_h) \
  $(frame_unwind_h) $(trad_frame_h) $(dwarf2_frame_h) $(value_h) \
  $(hppa_tdep_h) $(elf_common_h)
hppa-tdep.o: hppa-tdep.c $(defs_h) $(bfd_h) $(inferior_h) $(regcache_h) \
  $(completer_h) $(osabi_h) $(gdb_assert_h) $(arch_utils_h) $(symtab_h) \
  $(dis_asm_h) $(trad_frame_h) $(frame_unwind_h) $(frame_base_h) \
  $(gdbcore_h) $(gdbcmd_h) $(objfiles_h) $(hppa_tdep_h) $(value_h)
hpread.o: hpread.c $(defs_h) $(bfd_h) $(gdb_string_h) $(hp_symtab_h) \
  $(syms_h) $(symtab_h) $(symfile_h) $(objfiles_h) $(buildsym_h) \
  $(complaints_h) $(gdb_stabs_h) $(gdbtypes_h) $(demangle_h) \
  $(solib_som_h) $(gdb_assert_h) $(hppa_tdep_h) $(gdb_string_h)
hpux-thread.o: hpux-thread.c $(defs_h) $(gdbthread_h) $(target_h) \
  $(inferior_h) $(regcache_h) $(gdb_stat_h) $(gdbcore_h) $(hppa_tdep_h)
i386bsd-nat.o: i386bsd-nat.c $(defs_h) $(inferior_h) $(regcache_h) \
  $(gdb_assert_h) $(i386_tdep_h) $(i387_tdep_h) $(i386bsd_nat_h) \
  $(inf_ptrace_h)
i386-amd64-shared-tdep.o: i386-amd64-shared-tdep.c $(defs_h) \
  $(i386_amd64_shared_tdep_h)
i386bsd-tdep.o: i386bsd-tdep.c $(defs_h) $(arch_utils_h) $(frame_h) \
  $(gdbcore_h) $(regcache_h) $(osabi_h) $(gdb_string_h) $(i386_tdep_h)
i386-cygwin-tdep.o: i386-cygwin-tdep.c $(defs_h) $(osabi_h) \
  $(gdb_string_h) $(i386_tdep_h)
i386fbsd-nat.o: i386fbsd-nat.c $(defs_h) $(inferior_h) $(regcache_h) \
  $(target_h) $(fbsd_nat_h) $(i386_tdep_h) $(i386bsd_nat_h) $(bsd_kvm_h)
i386fbsd-tdep.o: i386fbsd-tdep.c $(defs_h) $(arch_utils_h) $(gdbcore_h) \
  $(osabi_h) $(regcache_h) $(gdb_assert_h) $(i386_tdep_h) $(i387_tdep_h) \
  $(bsd_uthread_h) $(solib_svr4_h)
i386gnu-nat.o: i386gnu-nat.c $(defs_h) $(inferior_h) $(floatformat_h) \
  $(regcache_h) $(gdb_assert_h) $(gdb_string_h) $(i386_tdep_h) \
  $(gnu_nat_h) $(i387_tdep_h) $(gregset_h)
i386gnu-tdep.o: i386gnu-tdep.c $(defs_h) $(osabi_h) $(i386_tdep_h)
i386-linux-nat.o: i386-linux-nat.c $(defs_h) $(inferior_h) $(gdbcore_h) \
  $(regcache_h) $(linux_nat_h) $(gdb_assert_h) $(gdb_string_h) \
  $(gregset_h) $(i387_tdep_h) $(i386_tdep_h) $(i386_linux_tdep_h) \
  $(gdb_proc_service_h)
i386-linux-tdep.o: i386-linux-tdep.c $(defs_h) $(gdbcore_h) $(frame_h) \
  $(value_h) $(regcache_h) $(inferior_h) $(osabi_h) $(reggroups_h) \
  $(dwarf2_frame_h) $(gdb_string_h) $(i386_tdep_h) $(i386_linux_tdep_h) \
  $(glibc_tdep_h) $(solib_svr4_h)
i386-nat.o: i386-nat.c $(defs_h) $(breakpoint_h) $(command_h) $(gdbcmd_h)
i386nbsd-nat.o: i386nbsd-nat.c $(defs_h) $(gdbcore_h) $(regcache_h) \
  $(target_h) $(i386_tdep_h) $(i386bsd_nat_h) $(bsd_kvm_h)
i386nbsd-tdep.o: i386nbsd-tdep.c $(defs_h) $(arch_utils_h) $(frame_h) \
  $(gdbcore_h) $(regcache_h) $(regset_h) $(osabi_h) $(symtab_h) \
  $(gdb_assert_h) $(gdb_string_h) $(i386_tdep_h) $(i387_tdep_h) \
  $(nbsd_tdep_h) $(solib_svr4_h)
i386-nto-tdep.o: i386-nto-tdep.c $(defs_h) $(frame_h) $(osabi_h) \
  $(regcache_h) $(target_h) $(gdb_assert_h) $(gdb_string_h) \
  $(i386_tdep_h) $(i387_tdep_h) $(nto_tdep_h) $(solib_svr4_h)
i386obsd-nat.o: i386obsd-nat.c $(defs_h) $(i386_tdep_h)
i386obsd-tdep.o: i386obsd-tdep.c $(defs_h) $(arch_utils_h) $(frame_h) \
  $(gdbcore_h) $(regcache_h) $(regset_h) $(symtab_h) $(objfiles_h) \
  $(osabi_h) $(target_h) $(gdb_assert_h) $(gdb_string_h) $(i386_tdep_h) \
  $(i387_tdep_h) $(solib_svr4_h) $(bsd_uthread_h)
i386-sol2-nat.o: i386-sol2-nat.c $(defs_h) $(regcache_h) $(gregset_h) \
  $(amd64_nat_h) $(amd64_tdep_h)
i386-sol2-tdep.o: i386-sol2-tdep.c $(defs_h) $(value_h) $(osabi_h) \
  $(gdb_string_h) $(i386_tdep_h) $(solib_svr4_h)
i386-stub.o: i386-stub.c
i386-tdep.o: i386-tdep.c $(defs_h) $(arch_utils_h) $(command_h) \
  $(dummy_frame_h) $(dwarf2_frame_h) $(doublest_h) $(exceptions_h) \
  $(floatformat_h) $(frame_h) $(frame_base_h) $(frame_unwind_h) \
  $(inferior_h) $(gdbcmd_h) $(gdbcore_h) $(objfiles_h) $(osabi_h) \
  $(regcache_h) $(reggroups_h) $(regset_h) $(symfile_h) $(symtab_h) \
  $(target_h) $(value_h) $(gdb_assert_h) $(reggroups_h) $(bfd_h) \
  $(elf_bfd_h) $(dis_asm_h) $(gdb_string_h) $(i386_tdep_h) $(i387_tdep_h) \
  $(x86_shared_tdep_h) $(macosx_tdep_h) $(i386_amd64_shared_tdep_h)
i386v4-nat.o: i386v4-nat.c $(defs_h) $(value_h) $(inferior_h) \
  $(regcache_h) $(i386_tdep_h) $(i387_tdep_h) $(gregset_h)
i386v-nat.o: i386v-nat.c $(defs_h) $(frame_h) $(inferior_h) $(language_h) \
  $(gdbcore_h) $(gdb_stat_h) $(floatformat_h) $(target_h) $(i386_tdep_h)
i387-tdep.o: i387-tdep.c $(defs_h) $(doublest_h) $(floatformat_h) \
  $(frame_h) $(gdbcore_h) $(inferior_h) $(language_h) $(regcache_h) \
  $(value_h) $(gdb_assert_h) $(gdb_string_h) $(i386_tdep_h) $(i387_tdep_h)
ia64-linux-nat.o: ia64-linux-nat.c $(defs_h) $(gdb_string_h) \
  $(inferior_h) $(target_h) $(gdbcore_h) $(regcache_h) $(ia64_tdep_h) \
  $(gdb_wait_h) $(gregset_h)
ia64-linux-tdep.o: ia64-linux-tdep.c $(defs_h) $(ia64_tdep_h) \
  $(arch_utils_h) $(gdbcore_h) $(regcache_h) $(osabi_h) $(solib_svr4_h)
ia64-tdep.o: ia64-tdep.c $(defs_h) $(inferior_h) $(gdbcore_h) \
  $(arch_utils_h) $(floatformat_h) $(regcache_h) $(reggroups_h) \
  $(frame_h) $(frame_base_h) $(frame_unwind_h) $(doublest_h) $(value_h) \
  $(gdb_assert_h) $(objfiles_h) $(elf_common_h) $(elf_bfd_h) $(dis_asm_h) \
  $(infcall_h) $(osabi_h) $(ia64_tdep_h) $(elf_ia64_h) \
  $(libunwind_frame_h) $(libunwind_ia64_h)
infcall.o: infcall.c $(defs_h) $(breakpoint_h) $(target_h) $(regcache_h) \
  $(inferior_h) $(gdb_assert_h) $(block_h) $(gdbcore_h) $(language_h) \
  $(objfiles_h) $(gdbcmd_h) $(command_h) $(gdb_string_h) $(infcall_h) \
  $(dummy_frame_h) $(exceptions_h) $(objc_lang_h) $(macosx_nat_infthread_h)
inf-child.o: inf-child.c $(defs_h) $(regcache_h) $(memattr_h) $(symtab_h) \
  $(target_h) $(inferior_h) $(gdb_string_h) $(inf_child_h)
# APPLE LOCAL begin subroutine inlining:
infcmd.o: infcmd.c $(defs_h) $(gdb_string_h) $(symtab_h) $(gdbtypes_h) \
  $(frame_h) $(inferior_h) $(environ_h) $(value_h) $(gdbcmd_h) \
  $(symfile_h) $(gdbcore_h) $(target_h) $(language_h) $(annotate_h) \
  $(objfiles_h) $(completer_h) $(ui_out_h) $(event_top_h) \
  $(parser_defs_h) $(top_h) $(regcache_h) $(reggroups_h) $(block_h) \
  $(solib_h) $(gdb_assert_h) $(infcmd_h) $(inlining_h) \
  $(macosx_nat_dyld_h) $(macosx_nat_inferior_h) $(nm_macosx_h) \
  $(checkpoint_h)
# APPLE LOCAL end subroutine inlining
inf-loop.o: inf-loop.c $(defs_h) $(inferior_h) $(target_h) \
  $(event_loop_h) $(event_top_h) $(inf_loop_h) $(remote_h) $(exceptions_h)
inflow.o: inflow.c $(defs_h) $(frame_h) $(inferior_h) $(command_h) \
  $(serial_h) $(terminal_h) $(target_h) $(gdbthread_h) $(gdb_string_h) \
  $(inflow_h) $(ui_out_h)
inf-ptrace.o: inf-ptrace.c $(defs_h) $(command_h) $(inferior_h) \
  $(inflow_h) $(gdbcore_h) $(observer_h) $(regcache_h) $(gdb_assert_h) \
  $(gdb_string_h) $(gdb_ptrace_h) $(gdb_wait_h) $(inf_child_h) \
  $(inf_ptrace_h)
infptrace.o: infptrace.c $(defs_h) $(command_h) $(frame_h) $(gdbcore_h) \
  $(inferior_h) $(regcache_h) $(target_h) $(gdb_assert_h) \
  $(gdb_wait_h) $(gdb_string_h) $(gdb_dirent_h) $(gdb_ptrace_h)
# APPLE LOCAL begin subroutine inlining:
infrun.o: infrun.c $(defs_h) $(gdb_string_h) $(symtab_h) $(frame_h) \
  $(inferior_h) $(exceptions_h) $(breakpoint_h) $(gdb_wait_h) \
  $(gdbcore_h) $(gdbcmd_h) $(cli_script_h) $(target_h) $(gdbthread_h) \
  $(annotate_h) $(symfile_h) $(top_h) $(inf_loop_h) $(event_top_h) \
  $(regcache_h) $(value_h) $(observer_h) $(language_h) $(solib_h) \
  $(gdb_assert_h) $(mi_common_h) $(inlining_h) $(macosx_nat_dyld_h) \
  $(objfiles_h) $(ppc_macosx_regnums_h) $(checkpoint_h)
# APPLE LOCAL end subroutine inlining
inftarg.o: inftarg.c $(defs_h) $(frame_h) $(inferior_h) $(target_h) \
  $(gdbcore_h) $(command_h) $(gdb_stat_h) $(event_loop_h) $(observer_h) \
  $(gdb_wait_h) $(inflow_h) $(inftarg_h)
inf-ttrace.o: inf-ttrace.c $(defs_h) $(command_h) $(gdbcore_h) \
  $(gdbthread_h) $(inferior_h) $(observer_h) $(target_h) $(gdb_assert_h) \
  $(gdb_string_h) $(inf_child_h) $(inf_ttrace_h)
# APPLE LOCAL begin subroutine inlining:
inlining.o: inlining.c $(defs_h) $(symtab_h) $(frame_h) $(breakpoint_h) \
  $(symfile_h) $(source_h) $(demangle_h) $(inferior_h) $(gdb_assert_h) \
  $(frame_unwind_h) $(annotate_h) $(ui_out_h) $(inlining_h) $(objfiles_h) \
  $(gdbthread_h) $(complaints_h) $(buildsym_h)
# APPLE LOCAL end subroutine inlining
interps.o: interps.c $(defs_h) $(gdbcmd_h) $(ui_out_h) $(event_loop_h) \
  $(event_top_h) $(interps_h) $(completer_h) $(gdb_string_h) \
  $(gdb_events_h) $(gdb_assert_h) $(top_h) $(exceptions_h)
iq2000-tdep.o: iq2000-tdep.c $(defs_h) $(frame_h) $(frame_base_h) \
  $(frame_unwind_h) $(dwarf2_frame_h) $(gdbtypes_h) $(value_h) \
  $(dis_asm_h) $(gdb_string_h) $(arch_utils_h) $(regcache_h) $(osabi_h) \
  $(gdbcore_h)
irix5-nat.o: irix5-nat.c $(defs_h) $(inferior_h) $(gdbcore_h) $(target_h) \
  $(regcache_h) $(gdb_string_h) $(gregset_h) $(mips_tdep_h)
jv-exp.o: jv-exp.c $(defs_h) $(gdb_string_h) $(expression_h) $(value_h) \
  $(parser_defs_h) $(language_h) $(jv_lang_h) $(bfd_h) $(symfile_h) \
  $(objfiles_h) $(block_h) $(completer_h)
jv-lang.o: jv-lang.c $(defs_h) $(symtab_h) $(gdbtypes_h) $(expression_h) \
  $(parser_defs_h) $(language_h) $(gdbtypes_h) $(symtab_h) $(symfile_h) \
  $(objfiles_h) $(gdb_string_h) $(value_h) $(c_lang_h) $(jv_lang_h) \
  $(gdbcore_h) $(block_h) $(demangle_h) $(dictionary_h)
jv-typeprint.o: jv-typeprint.c $(defs_h) $(symtab_h) $(gdbtypes_h) \
  $(value_h) $(demangle_h) $(jv_lang_h) $(gdb_string_h) $(typeprint_h) \
  $(c_lang_h) $(cp_abi_h)
jv-valprint.o: jv-valprint.c $(defs_h) $(symtab_h) $(gdbtypes_h) \
  $(gdbcore_h) $(expression_h) $(value_h) $(demangle_h) $(valprint_h) \
  $(language_h) $(jv_lang_h) $(c_lang_h) $(annotate_h) $(gdb_string_h)
kod.o: kod.c $(defs_h) $(command_h) $(gdbcmd_h) $(target_h) \
  $(gdb_string_h) $(kod_h)
kod-cisco.o: kod-cisco.c $(defs_h) $(gdb_string_h) $(kod_h)
language.o: language.c $(defs_h) $(gdb_string_h) $(symtab_h) \
  $(gdbtypes_h) $(value_h) $(gdbcmd_h) $(expression_h) $(language_h) \
  $(target_h) $(parser_defs_h) $(jv_lang_h) $(demangle_h)
libunwind-frame.o: libunwind-frame.c $(defs_h) $(inferior_h) $(frame_h) \
  $(frame_base_h) $(frame_unwind_h) $(gdbcore_h) $(gdbtypes_h) \
  $(symtab_h) $(objfiles_h) $(regcache_h) $(config_h) $(gdb_assert_h) \
  $(gdb_string_h) $(libunwind_frame_h) $(complaints_h)
linespec.o: linespec.c $(defs_h) $(symtab_h) $(frame_h) $(command_h) \
  $(symfile_h) $(objfiles_h) $(source_h) $(demangle_h) $(value_h) \
  $(completer_h) $(cp_abi_h) $(parser_defs_h) $(block_h) $(objc_lang_h) \
  $(linespec_h) $(language_h) $(ui_out_h) $(exceptions_h) $(gdb_assert_h) \
  $(breakpoint_h)
linux-nat.o: linux-nat.c $(defs_h) $(inferior_h) $(target_h) \
  $(gdb_string_h) $(gdb_wait_h) $(gdb_assert_h) $(linux_nat_h) \
  $(gdbthread_h) $(gdbcmd_h) $(regcache_h) $(elf_bfd_h) $(gregset_h) \
  $(gdbcore_h) $(gdbthread_h) $(gdb_stat_h)
# APPLE LOCAL begin subroutine inlining:
linux-thread-db.o: linux-thread-db.c $(defs_h) $(gdb_assert_h) \
  $(gdb_proc_service_h) $(gdb_thread_db_h) $(bfd_h) $(exceptions_h) \
  $(gdbthread_h) $(inferior_h) $(symfile_h) $(objfiles_h) $(target_h) \
  $(regcache_h) $(solib_svr4_h) $(inlining_h)
# APPLE LOCAL end subroutine inlining
lynx-nat.o: lynx-nat.c $(defs_h) $(frame_h) $(inferior_h) $(target_h) \
  $(gdbcore_h) $(regcache_h) $(gdb_wait_h)
m2-exp.o: m2-exp.c $(defs_h) $(gdb_string_h) $(expression_h) \
  $(language_h) $(value_h) $(parser_defs_h) $(m2_lang_h) $(bfd_h) \
  $(symfile_h) $(objfiles_h) $(block_h)
m2-lang.o: m2-lang.c $(defs_h) $(symtab_h) $(gdbtypes_h) $(expression_h) \
  $(parser_defs_h) $(language_h) $(m2_lang_h) $(c_lang_h) $(valprint_h)
m2-typeprint.o: m2-typeprint.c $(defs_h) $(bfd_h) $(symtab_h) \
  $(gdbtypes_h) $(expression_h) $(value_h) $(gdbcore_h) $(target_h) \
  $(m2_lang_h)
m2-valprint.o: m2-valprint.c $(defs_h) $(symtab_h) $(gdbtypes_h) \
  $(m2_lang_h) $(c_lang_h)
m32r-linux-nat.o: m32r-linux-nat.c $(defs_h) $(inferior_h) $(gdbcore_h) \
  $(regcache_h) $(linux_nat_h) $(gdb_assert_h) $(gdb_string_h) \
  $(gregset_h) $(m32r_tdep_h)
m32r-linux-tdep.o: m32r-linux-tdep.c $(defs_h) $(gdbcore_h) $(frame_h) \
  $(value_h) $(regcache_h) $(inferior_h) $(osabi_h) $(reggroups_h) \
  $(regset_h) $(gdb_string_h) $(glibc_tdep_h) $(solib_svr4_h) \
  $(trad_frame_h) $(frame_unwind_h) $(m32r_tdep_h)
m32r-rom.o: m32r-rom.c $(defs_h) $(gdbcore_h) $(target_h) $(exceptions_h) \
  $(monitor_h) $(serial_h) $(symtab_h) $(command_h) $(gdbcmd_h) \
  $(symfile_h) $(gdb_string_h) $(objfiles_h) $(inferior_h) $(regcache_h)
m32r-stub.o: m32r-stub.c $(syscall_h)
m32r-tdep.o: m32r-tdep.c $(defs_h) $(frame_h) $(frame_unwind_h) \
  $(frame_base_h) $(symtab_h) $(gdbtypes_h) $(gdbcmd_h) $(gdbcore_h) \
  $(gdb_string_h) $(value_h) $(inferior_h) $(symfile_h) $(objfiles_h) \
  $(osabi_h) $(language_h) $(arch_utils_h) $(regcache_h) $(trad_frame_h) \
  $(dis_asm_h) $(gdb_assert_h) $(m32r_tdep_h)
m68hc11-tdep.o: m68hc11-tdep.c $(defs_h) $(frame_h) $(frame_unwind_h) \
  $(frame_base_h) $(dwarf2_frame_h) $(trad_frame_h) $(symtab_h) \
  $(gdbtypes_h) $(gdbcmd_h) $(gdbcore_h) $(gdb_string_h) $(value_h) \
  $(inferior_h) $(dis_asm_h) $(symfile_h) $(objfiles_h) $(arch_utils_h) \
  $(regcache_h) $(reggroups_h) $(target_h) $(opcode_m68hc11_h) \
  $(elf_m68hc11_h) $(elf_bfd_h)
m68kbsd-nat.o: m68kbsd-nat.c $(defs_h) $(gdbcore_h) $(inferior_h) \
  $(regcache_h) $(gdb_assert_h) $(m68k_tdep_h) $(inf_ptrace_h) $(bsd_kvm_h)
m68kbsd-tdep.o: m68kbsd-tdep.c $(defs_h) $(arch_utils_h) $(frame_h) \
  $(osabi_h) $(regcache_h) $(regset_h) $(trad_frame_h) $(tramp_frame_h) \
  $(gdb_assert_h) $(gdb_string_h) $(m68k_tdep_h) $(solib_svr4_h)
m68klinux-nat.o: m68klinux-nat.c $(defs_h) $(frame_h) $(inferior_h) \
  $(language_h) $(gdbcore_h) $(gdb_string_h) $(regcache_h) $(m68k_tdep_h) \
  $(gdb_stat_h) $(floatformat_h) $(target_h) $(gregset_h)
m68klinux-tdep.o: m68klinux-tdep.c $(defs_h) $(gdbcore_h) $(doublest_h) \
  $(floatformat_h) $(frame_h) $(target_h) $(gdb_string_h) $(gdbtypes_h) \
  $(osabi_h) $(regcache_h) $(objfiles_h) $(symtab_h) $(m68k_tdep_h) \
  $(trad_frame_h) $(frame_unwind_h) $(glibc_tdep_h) $(solib_svr4_h)
m68k-stub.o: m68k-stub.c
m68k-tdep.o: m68k-tdep.c $(defs_h) $(dwarf2_frame_h) $(frame_h) \
  $(frame_base_h) $(frame_unwind_h) $(floatformat_h) $(symtab_h) \
  $(gdbcore_h) $(value_h) $(gdb_string_h) $(gdb_assert_h) $(inferior_h) \
  $(regcache_h) $(arch_utils_h) $(osabi_h) $(dis_asm_h) $(m68k_tdep_h) \
  $(gregset_h)
m88kbsd-nat.o: m88kbsd-nat.c $(defs_h) $(inferior_h) $(regcache_h) \
  $(target_h) $(m88k_tdep_h) $(inf_ptrace_h)
m88k-tdep.o: m88k-tdep.c $(defs_h) $(arch_utils_h) $(dis_asm_h) \
  $(frame_h) $(frame_base_h) $(frame_unwind_h) $(gdbcore_h) $(gdbtypes_h) \
  $(regcache_h) $(regset_h) $(symtab_h) $(trad_frame_h) $(value_h) \
  $(gdb_assert_h) $(gdb_string_h) $(m88k_tdep_h)
macrocmd.o: macrocmd.c $(defs_h) $(macrotab_h) $(macroexp_h) \
  $(macroscope_h) $(command_h) $(gdbcmd_h)
macroexp.o: macroexp.c $(defs_h) $(gdb_obstack_h) $(bcache_h) \
  $(macrotab_h) $(macroexp_h) $(gdb_assert_h)
macroscope.o: macroscope.c $(defs_h) $(macroscope_h) $(symtab_h) \
  $(source_h) $(target_h) $(frame_h) $(inferior_h) $(complaints_h)
macrotab.o: macrotab.c $(defs_h) $(gdb_obstack_h) $(splay_tree_h) \
  $(symtab_h) $(symfile_h) $(objfiles_h) $(macrotab_h) $(gdb_assert_h) \
  $(bcache_h) $(complaints_h)
main.o: main.c $(defs_h) $(top_h) $(target_h) $(inferior_h) $(symfile_h) \
  $(gdbcore_h) $(exceptions_h) $(getopt_h) $(gdb_stat_h) $(gdb_string_h) \
  $(event_loop_h) $(ui_out_h) $(osabi_h) $(arch_utils_h) $(interps_h) \
  $(main_h) $(cli_cmds_h) $(cli_decode_h)
maint.o: maint.c $(defs_h) $(command_h) $(gdbcmd_h) $(symtab_h) \
  $(gdbtypes_h) $(demangle_h) $(gdbcore_h) $(expression_h) $(language_h) \
  $(maint_h) $(symfile_h) $(objfiles_h) $(value_h) $(cli_decode_h) \
  $(objc_lang_h)
mdebugread.o: mdebugread.c $(defs_h) $(symtab_h) $(gdbtypes_h) \
  $(gdbcore_h) $(objfiles_h) $(gdb_obstack_h) $(buildsym_h) \
  $(stabsread_h) $(complaints_h) $(demangle_h) $(gdb_assert_h) $(block_h) \
  $(dictionary_h) $(mdebugread_h) $(gdb_stat_h) $(gdb_string_h) $(bfd_h) \
  $(coff_ecoff_h) $(libaout_h) $(aout_aout64_h) $(aout_stab_gnu_h) \
  $(expression_h)
memattr.o: memattr.c $(defs_h) $(command_h) $(gdbcmd_h) $(memattr_h) \
  $(target_h) $(value_h) $(language_h) $(gdb_string_h)
mem-break.o: mem-break.c $(defs_h) $(symtab_h) $(breakpoint_h) \
  $(inferior_h) $(target_h) $(mem_break_h)
minsyms.o: minsyms.c $(defs_h) $(gdb_string_h) $(symtab_h) $(bfd_h) \
  $(symfile_h) $(objfiles_h) $(demangle_h) $(value_h) $(cp_abi_h) \
  $(minsyms_h)
mips64obsd-nat.o: mips64obsd-nat.c $(defs_h) $(inferior_h) $(regcache_h) \
  $(target_h) $(mips_tdep_h) $(inf_ptrace_h)
mips64obsd-tdep.o: mips64obsd-tdep.c $(defs_h) $(osabi_h) $(regcache_h) \
  $(regset_h) $(trad_frame_h) $(tramp_frame_h) $(gdb_assert_h) \
  $(gdb_string_h) $(mips_tdep_h) $(solib_svr4_h)
mips-irix-tdep.o: mips-irix-tdep.c $(defs_h) $(osabi_h) $(elf_bfd_h)
mips-linux-nat.o: mips-linux-nat.c $(defs_h) $(mips_tdep_h)
mips-linux-tdep.o: mips-linux-tdep.c $(defs_h) $(gdbcore_h) $(target_h) \
  $(solib_svr4_h) $(osabi_h) $(mips_tdep_h) $(gdb_string_h) \
  $(gdb_assert_h) $(frame_h) $(regcache_h) $(trad_frame_h) $(tramp_frame_h)
mips-mdebug-tdep.o: mips-mdebug-tdep.c $(defs_h) $(frame_h) \
  $(mips_tdep_h) $(trad_frame_h) $(block_h) $(symtab_h) $(objfiles_h) \
  $(elf_mips_h) $(elf_bfd_h) $(gdb_assert_h) $(frame_unwind_h) \
  $(frame_base_h) $(mips_mdebug_tdep_h) $(mdebugread_h)
mipsnbsd-nat.o: mipsnbsd-nat.c $(defs_h) $(inferior_h) $(regcache_h) \
  $(target_h) $(mips_tdep_h) $(mipsnbsd_tdep_h) $(inf_ptrace_h)
mipsnbsd-tdep.o: mipsnbsd-tdep.c $(defs_h) $(gdbcore_h) $(regcache_h) \
  $(regset_h) $(target_h) $(value_h) $(osabi_h) $(gdb_assert_h) \
  $(gdb_string_h) $(nbsd_tdep_h) $(mipsnbsd_tdep_h) $(mips_tdep_h) \
  $(solib_svr4_h)
mipsread.o: mipsread.c $(defs_h) $(gdb_string_h) $(bfd_h) $(symtab_h) \
  $(objfiles_h) $(buildsym_h) $(stabsread_h) $(coff_sym_h) \
  $(coff_internal_h) $(coff_ecoff_h) $(libcoff_h) $(libecoff_h) \
  $(elf_common_h) $(elf_mips_h)
mips-tdep.o: mips-tdep.c $(defs_h) $(gdb_string_h) $(gdb_assert_h) \
  $(frame_h) $(inferior_h) $(symtab_h) $(value_h) $(gdbcmd_h) \
  $(language_h) $(gdbcore_h) $(symfile_h) $(objfiles_h) $(gdbtypes_h) \
  $(target_h) $(arch_utils_h) $(regcache_h) $(osabi_h) $(mips_tdep_h) \
  $(block_h) $(reggroups_h) $(opcode_mips_h) $(elf_mips_h) $(elf_bfd_h) \
  $(symcat_h) $(sim_regno_h) $(dis_asm_h) $(frame_unwind_h) \
  $(frame_base_h) $(trad_frame_h) $(infcall_h) $(floatformat_h)
mipsv4-nat.o: mipsv4-nat.c $(defs_h) $(inferior_h) $(gdbcore_h) \
  $(target_h) $(regcache_h) $(gregset_h)
mn10300-tdep.o: mn10300-tdep.c $(defs_h) $(arch_utils_h) $(dis_asm_h) \
  $(gdbtypes_h) $(regcache_h) $(gdb_string_h) $(gdb_assert_h) \
  $(gdbcore_h) $(value_h) $(gdbtypes_h) $(frame_h) $(frame_unwind_h) \
  $(frame_base_h) $(trad_frame_h) $(symtab_h) $(dwarf2_frame_h) \
  $(regcache_h) $(mn10300_tdep_h)
monitor.o: monitor.c $(defs_h) $(gdbcore_h) $(target_h) $(exceptions_h) \
  $(gdb_string_h) $(command_h) $(serial_h) $(monitor_h) $(gdbcmd_h) \
  $(inferior_h) $(gdb_regex_h) $(srec_h) $(regcache_h) $(regex_quote_h)
nbsd-tdep.o: nbsd-tdep.c $(defs_h) $(gdb_string_h) $(solib_svr4_h) \
  $(nbsd_tdep_h)
nlmread.o: nlmread.c $(defs_h) $(bfd_h) $(symtab_h) $(symfile_h) \
  $(objfiles_h) $(buildsym_h) $(stabsread_h) $(block_h)
nto-procfs.o: nto-procfs.c $(defs_h) $(gdb_dirent_h) $(exceptions_h) \
  $(gdb_string_h) $(gdbcore_h) $(inferior_h) $(target_h) $(objfiles_h) \
  $(gdbthread_h) $(nto_tdep_h) $(command_h) $(regcache_h)
nto-tdep.o: nto-tdep.c $(gdb_stat_h) $(gdb_string_h) $(nto_tdep_h) \
  $(top_h) $(cli_decode_h) $(cli_cmds_h) $(inferior_h) $(gdbarch_h) \
  $(bfd_h) $(elf_bfd_h) $(solib_svr4_h) $(gdbcore_h)
objc-exp.o: objc-exp.c $(defs_h) $(gdb_string_h) $(expression_h) \
  $(objc_lang_h) $(value_h) $(parser_defs_h) $(language_h) $(c_lang_h) \
  $(bfd_h) $(symfile_h) $(objfiles_h) $(top_h) $(completer_h) $(block_h)
objc-lang.o: objc-lang.c $(defs_h) $(symtab_h) $(gdbtypes_h) \
  $(expression_h) $(parser_defs_h) $(language_h) $(c_lang_h) \
  $(objc_lang_h) $(exceptions_h) $(complaints_h) $(value_h) $(symfile_h) \
  $(objfiles_h) $(gdb_string_h) $(target_h) $(gdbcore_h) $(gdbcmd_h) \
  $(frame_h) $(gdb_regex_h) $(regcache_h) $(block_h) $(infcall_h) \
  $(valprint_h) $(gdb_assert_h) $(inferior_h) $(demangle_h) $(osabi_h) \
  $(inlining_h) $(ui_out_h) $(cli_out_h) $(breakpoint_h)
objfiles.o: objfiles.c $(defs_h) $(bfd_h) $(symtab_h) $(symfile_h) \
  $(objfiles_h) $(gdb_stabs_h) $(target_h) $(gdbcmd_h) $(bcache_h) \
  $(mdebugread_h) $(gdb_assert_h) $(gdb_stat_h) $(gdb_obstack_h) \
  $(gdb_string_h) $(hashtab_h) $(varobj_h) $(breakpoint_h) $(block_h) \
  $(dictionary_h) $(objc_lang_h) $(macosx_nat_inferior_h) \
  $(db_access_functions_h) $(inferior_h) $(macosx_nat_dyld_h) $(mach_o_h)
observer.o: observer.c $(defs_h) $(observer_h) $(command_h) $(gdbcmd_h) \
  $(observer_inc)
# APPLE LOCAL begin subroutine inlining:
ocd.o: ocd.c $(defs_h) $(gdbcore_h) $(gdb_string_h) $(frame_h) \
  $(inferior_h) $(bfd_h) $(symfile_h) $(target_h) $(exceptions_h) \
  $(gdbcmd_h) $(objfiles_h) $(gdb_stabs_h) $(serial_h) $(ocd_h) \
  $(regcache_h) $(inlining_h)
# APPLE LOCAL end subroutine inlining
osabi.o: osabi.c $(defs_h) $(gdb_assert_h) $(gdb_string_h) $(osabi_h) \
  $(arch_utils_h) $(gdbcmd_h) $(command_h) $(elf_bfd_h)
parse.o: parse.c $(defs_h) $(gdb_string_h) $(symtab_h) $(gdbtypes_h) \
  $(frame_h) $(expression_h) $(value_h) $(command_h) $(language_h) \
  $(parser_defs_h) $(gdbcmd_h) $(symfile_h) $(inferior_h) $(doublest_h) \
  $(gdb_assert_h) $(block_h)
p-exp.o: p-exp.c $(defs_h) $(gdb_string_h) $(expression_h) $(value_h) \
  $(parser_defs_h) $(language_h) $(p_lang_h) $(bfd_h) $(symfile_h) \
  $(objfiles_h) $(block_h) $(top_h) $(completer_h)
p-lang.o: p-lang.c $(defs_h) $(gdb_string_h) $(symtab_h) $(gdbtypes_h) \
  $(expression_h) $(parser_defs_h) $(language_h) $(p_lang_h) \
  $(valprint_h) $(value_h)
ppc-bdm.o: ppc-bdm.c $(defs_h) $(gdbcore_h) $(gdb_string_h) $(frame_h) \
  $(inferior_h) $(bfd_h) $(symfile_h) $(target_h) $(gdbcmd_h) \
  $(objfiles_h) $(gdb_stabs_h) $(serial_h) $(ocd_h) $(ppc_tdep_h) \
  $(regcache_h) $(gdb_assert_h)
ppcbug-rom.o: ppcbug-rom.c $(defs_h) $(gdbcore_h) $(target_h) \
  $(monitor_h) $(serial_h) $(regcache_h)
ppc-linux-nat.o: ppc-linux-nat.c $(defs_h) $(gdb_string_h) $(frame_h) \
  $(inferior_h) $(gdbcore_h) $(regcache_h) $(gdb_assert_h) $(gdb_wait_h) \
  $(gregset_h) $(ppc_tdep_h)
ppc-linux-tdep.o: ppc-linux-tdep.c $(defs_h) $(frame_h) $(inferior_h) \
  $(symtab_h) $(target_h) $(gdbcore_h) $(gdbcmd_h) $(symfile_h) \
  $(objfiles_h) $(regcache_h) $(value_h) $(osabi_h) $(regset_h) \
  $(solib_svr4_h) $(ppc_tdep_h) $(trad_frame_h) $(frame_unwind_h) \
  $(tramp_frame_h)
ppcnbsd-nat.o: ppcnbsd-nat.c $(defs_h) $(inferior_h) $(gdb_assert_h) \
  $(gdbcore_h) $(regcache_h) $(bsd_kvm_h) $(ppc_tdep_h) $(ppcnbsd_tdep_h) \
  $(inf_ptrace_h)
ppcnbsd-tdep.o: ppcnbsd-tdep.c $(defs_h) $(gdbcore_h) $(regcache_h) \
  $(target_h) $(breakpoint_h) $(value_h) $(osabi_h) $(ppc_tdep_h) \
  $(ppcnbsd_tdep_h) $(nbsd_tdep_h) $(tramp_frame_h) $(trad_frame_h) \
  $(gdb_assert_h) $(solib_svr4_h)
ppcobsd-nat.o: ppcobsd-nat.c $(defs_h) $(gdbcore_h) $(inferior_h) \
  $(regcache_h) $(ppc_tdep_h) $(ppcobsd_tdep_h) $(inf_ptrace_h) \
  $(bsd_kvm_h)
ppcobsd-tdep.o: ppcobsd-tdep.c $(defs_h) $(arch_utils_h) $(floatformat_h) \
  $(osabi_h) $(regcache_h) $(regset_h) $(trad_frame_h) $(tramp_frame_h) \
  $(gdb_assert_h) $(gdb_string_h) $(ppc_tdep_h) $(ppcobsd_tdep_h) \
  $(solib_svr4_h)
ppc-sysv-tdep.o: ppc-sysv-tdep.c $(defs_h) $(gdbcore_h) $(inferior_h) \
  $(regcache_h) $(value_h) $(gdb_string_h) $(gdb_assert_h) $(ppc_tdep_h) \
  $(target_h) $(objfiles_h) $(infcall_h)
printcmd.o: printcmd.c $(defs_h) $(gdb_string_h) $(frame_h) $(symtab_h) \
  $(gdbtypes_h) $(value_h) $(language_h) $(expression_h) $(gdbcore_h) \
  $(gdbcmd_h) $(target_h) $(breakpoint_h) $(demangle_h) $(valprint_h) \
  $(annotate_h) $(symfile_h) $(objfiles_h) $(completer_h) $(ui_out_h) \
  $(gdb_assert_h) $(block_h) $(disasm_h) $(objc_lang_h) $(printcmd_h) $(tui_h)
proc-api.o: proc-api.c $(defs_h) $(gdbcmd_h) $(completer_h) $(gdb_wait_h) \
  $(proc_utils_h)
proc-events.o: proc-events.c $(defs_h)
proc-flags.o: proc-flags.c $(defs_h)
procfs.o: procfs.c $(defs_h) $(inferior_h) $(target_h) $(gdbcore_h) \
  $(elf_bfd_h) $(gdbcmd_h) $(gdbthread_h) $(gdb_wait_h) $(gdb_string_h) \
  $(gdb_assert_h) $(inflow_h) $(auxv_h) $(gdb_dirent_h) $(X_OK) \
  $(gdb_stat_h) $(proc_utils_h) $(gregset_h)
proc-service.o: proc-service.c $(defs_h) $(gdb_proc_service_h) \
  $(inferior_h) $(symtab_h) $(target_h) $(gregset_h)
proc-why.o: proc-why.c $(defs_h) $(proc_utils_h)
p-typeprint.o: p-typeprint.c $(defs_h) $(gdb_obstack_h) $(bfd_h) \
  $(symtab_h) $(gdbtypes_h) $(expression_h) $(value_h) $(gdbcore_h) \
  $(target_h) $(language_h) $(p_lang_h) $(typeprint_h) $(gdb_string_h)
p-valprint.o: p-valprint.c $(defs_h) $(gdb_obstack_h) $(symtab_h) \
  $(gdbtypes_h) $(expression_h) $(value_h) $(command_h) $(gdbcmd_h) \
  $(gdbcore_h) $(demangle_h) $(valprint_h) $(typeprint_h) $(language_h) \
  $(target_h) $(annotate_h) $(p_lang_h) $(cp_abi_h) $(cp_support_h)
regcache.o: regcache.c $(defs_h) $(inferior_h) $(target_h) $(gdbarch_h) \
  $(gdbcmd_h) $(regcache_h) $(reggroups_h) $(gdb_assert_h) \
  $(gdb_string_h) $(gdbcmd_h) $(observer_h)
reggroups.o: reggroups.c $(defs_h) $(reggroups_h) $(gdbtypes_h) \
  $(gdb_assert_h) $(regcache_h) $(command_h) $(gdbcmd_h)
regset.o: regset.c $(defs_h) $(regset_h) $(gdb_assert_h)
remote.o: remote.c $(defs_h) $(gdb_string_h) $(inferior_h) $(bfd_h) \
  $(symfile_h) $(exceptions_h) $(target_h) $(gdbcmd_h) $(objfiles_h) \
  $(gdb_stabs_h) $(gdbthread_h) $(remote_h) $(regcache_h) $(value_h) \
  $(gdb_assert_h) $(observer_h) $(solib_h) $(event_loop_h) $(event_top_h) \
  $(inf_loop_h) $(serial_h) $(gdbcore_h) $(remote_fileio_h) \
  $(objc_lang_h) $(macosx_tdep_h) $(macosx_nat_dyld_h) $(terminal_h) \
  $(macosx_nat_dyld_process_h) $(arm_macosx_tdep_h) $(arm_tdep_h)
# APPLE LOCAL begin subroutine inlining:
remote-e7000.o: remote-e7000.c $(defs_h) $(gdbcore_h) $(gdbarch_h) \
  $(inferior_h) $(target_h) $(value_h) $(command_h) $(gdb_string_h) \
  $(exceptions_h) $(gdbcmd_h) $(serial_h) $(remote_utils_h) $(symfile_h) \
  $(regcache_h) $(inlining_h)
# APPLE LOCAL end subroutine inlining
remote-est.o: remote-est.c $(defs_h) $(gdbcore_h) $(target_h) \
  $(monitor_h) $(serial_h) $(regcache_h) $(m68k_tdep_h)
remote-fileio.o: remote-fileio.c $(defs_h) $(gdb_string_h) $(gdbcmd_h) \
  $(remote_h) $(gdb_fileio_h) $(gdb_wait_h) $(gdb_stat_h) $(exceptions_h) \
  $(remote_fileio_h)
remote-hms.o: remote-hms.c $(defs_h) $(gdbcore_h) $(target_h) \
  $(monitor_h) $(serial_h) $(regcache_h)
remote-m32r-sdi.o: remote-m32r-sdi.c $(defs_h) $(gdbcmd_h) $(gdbcore_h) \
  $(inferior_h) $(target_h) $(regcache_h) $(gdb_string_h) $(serial_h)
# APPLE LOCAL begin subroutine inlining:
remote-mips.o: remote-mips.c $(defs_h) $(inferior_h) $(bfd_h) \
  $(symfile_h) $(gdbcmd_h) $(gdbcore_h) $(serial_h) $(target_h) \
  $(exceptions_h) $(remote_utils_h) $(gdb_string_h) $(gdb_stat_h) \
  $(regcache_h) $(mips_tdep_h) $(inlining_h)
# APPLE LOCAL end subroutine inlining
remote-rdi.o: remote-rdi.c $(defs_h) $(gdb_string_h) $(frame_h) \
  $(inferior_h) $(bfd_h) $(symfile_h) $(target_h) $(gdbcmd_h) \
  $(objfiles_h) $(gdb_stabs_h) $(gdbthread_h) $(gdbcore_h) \
  $(breakpoint_h) $(completer_h) $(regcache_h) $(arm_tdep_h) \
  $(rdi_share_ardi_h) $(rdi_share_adp_h) $(rdi_share_hsys_h)
# APPLE LOCAL begin subroutine inlining:
remote-rdp.o: remote-rdp.c $(defs_h) $(inferior_h) $(value_h) \
  $(gdb_callback_h) $(command_h) $(symfile_h) $(remote_utils_h) \
  $(gdb_string_h) $(gdbcore_h) $(regcache_h) $(serial_h) $(arm_tdep_h) \
  $(inlining_h)
# APPLE LOCAL end subroutine inlining
remote-sds.o: remote-sds.c $(defs_h) $(gdb_string_h) $(frame_h) \
  $(inferior_h) $(exceptions_h) $(bfd_h) $(symfile_h) $(target_h) \
  $(gdbcmd_h) $(objfiles_h) $(gdb_stabs_h) $(gdbthread_h) $(gdbcore_h) \
  $(regcache_h) $(serial_h)
remote-sim.o: remote-sim.c $(defs_h) $(inferior_h) $(value_h) \
  $(gdb_string_h) $(terminal_h) $(target_h) $(gdbcore_h) \
  $(gdb_callback_h) $(gdb_remote_sim_h) $(remote_utils_h) $(command_h) \
  $(regcache_h) $(gdb_assert_h) $(sim_regno_h) $(arch_utils_h)
remote-st.o: remote-st.c $(defs_h) $(gdbcore_h) $(target_h) \
  $(gdb_string_h) $(serial_h) $(regcache_h)
remote-utils.o: remote-utils.c $(defs_h) $(gdb_string_h) $(gdbcmd_h) \
  $(target_h) $(serial_h) $(gdbcore_h) $(inferior_h) $(remote_utils_h) \
  $(regcache_h)
rom68k-rom.o: rom68k-rom.c $(defs_h) $(gdbcore_h) $(target_h) \
  $(monitor_h) $(serial_h) $(regcache_h) $(value_h) $(m68k_tdep_h)
rs6000-nat.o: rs6000-nat.c $(defs_h) $(inferior_h) $(target_h) \
  $(gdbcore_h) $(xcoffsolib_h) $(symfile_h) $(objfiles_h) $(libbfd_h) \
  $(bfd_h) $(exceptions_h) $(gdb_stabs_h) $(regcache_h) $(arch_utils_h) \
  $(ppc_tdep_h) $(exec_h) $(gdb_stat_h)
rs6000-tdep.o: rs6000-tdep.c $(defs_h) $(frame_h) $(inferior_h) \
  $(symtab_h) $(target_h) $(gdbcore_h) $(gdbcmd_h) $(objfiles_h) \
  $(arch_utils_h) $(regcache_h) $(regset_h) $(doublest_h) $(value_h) \
  $(parser_defs_h) $(osabi_h) $(infcall_h) $(sim_regno_h) \
  $(gdb_sim_ppc_h) $(reggroups_h) $(libbfd_h) $(coff_internal_h) \
  $(libcoff_h) $(coff_xcoff_h) $(libxcoff_h) $(elf_bfd_h) $(solib_svr4_h) \
  $(ppc_tdep_h) $(gdb_assert_h) $(dis_asm_h) $(trad_frame_h) \
  $(frame_unwind_h) $(frame_base_h) $(reggroups_h) $(rs6000_tdep_h)
s390-nat.o: s390-nat.c $(defs_h) $(tm_h) $(regcache_h) $(inferior_h) \
  $(s390_tdep_h)
s390-tdep.o: s390-tdep.c $(defs_h) $(arch_utils_h) $(frame_h) \
  $(inferior_h) $(symtab_h) $(target_h) $(gdbcore_h) $(gdbcmd_h) \
  $(objfiles_h) $(tm_h) $(__bfd_bfd_h) $(floatformat_h) $(regcache_h) \
  $(trad_frame_h) $(frame_base_h) $(frame_unwind_h) $(dwarf2_frame_h) \
  $(reggroups_h) $(regset_h) $(value_h) $(gdb_assert_h) $(dis_asm_h) \
  $(solib_svr4_h) $(s390_tdep_h)
scm-exp.o: scm-exp.c $(defs_h) $(symtab_h) $(gdbtypes_h) $(expression_h) \
  $(parser_defs_h) $(language_h) $(value_h) $(c_lang_h) $(scm_lang_h) \
  $(scm_tags_h)
scm-lang.o: scm-lang.c $(defs_h) $(symtab_h) $(gdbtypes_h) \
  $(expression_h) $(parser_defs_h) $(language_h) $(value_h) $(c_lang_h) \
  $(scm_lang_h) $(scm_tags_h) $(source_h) $(gdb_string_h) $(gdbcore_h) \
  $(infcall_h)
scm-valprint.o: scm-valprint.c $(defs_h) $(symtab_h) $(gdbtypes_h) \
  $(expression_h) $(parser_defs_h) $(language_h) $(value_h) $(scm_lang_h) \
  $(valprint_h) $(gdbcore_h) $(c_lang_h)
sentinel-frame.o: sentinel-frame.c $(defs_h) $(regcache_h) \
  $(sentinel_frame_h) $(inferior_h) $(frame_unwind_h)
ser-e7kpc.o: ser-e7kpc.c $(defs_h) $(serial_h) $(gdb_string_h)
ser-go32.o: ser-go32.c $(defs_h) $(gdbcmd_h) $(serial_h) $(gdb_string_h)
serial.o: serial.c $(defs_h) $(serial_h) $(gdb_string_h) $(gdbcmd_h)
ser-base.o: ser-base.c $(defs_h) $(serial_h) $(ser_base_h) \
  $(event_loop_h) $(gdb_string_h)
ser-pipe.o: ser-pipe.c $(defs_h) $(serial_h) $(ser_base_h) $(ser_unix_h) \
  $(gdb_vfork_h) $(gdb_string_h)
ser-tcp.o: ser-tcp.c $(defs_h) $(serial_h) $(ser_base_h) $(ser_unix_h) \
  $(gdb_string_h)
ser-unix.o: ser-unix.c $(defs_h) $(serial_h) $(ser_base_h) $(ser_unix_h) \
  $(terminal_h) $(gdb_string_h)
sh3-rom.o: sh3-rom.c $(defs_h) $(gdbcore_h) $(target_h) $(monitor_h) \
  $(serial_h) $(srec_h) $(arch_utils_h) $(regcache_h) $(gdb_string_h) \
  $(sh_tdep_h)
sh64-tdep.o: sh64-tdep.c $(defs_h) $(frame_h) $(frame_base_h) \
  $(frame_unwind_h) $(dwarf2_frame_h) $(symtab_h) $(gdbtypes_h) \
  $(gdbcmd_h) $(gdbcore_h) $(value_h) $(dis_asm_h) $(inferior_h) \
  $(gdb_string_h) $(gdb_assert_h) $(arch_utils_h) $(regcache_h) \
  $(osabi_h) $(elf_bfd_h) $(elf_sh_h) $(gdb_sim_sh_h)
shnbsd-nat.o: shnbsd-nat.c $(defs_h) $(inferior_h) $(sh_tdep_h) \
  $(shnbsd_tdep_h)
shnbsd-tdep.o: shnbsd-tdep.c $(defs_h) $(gdbcore_h) $(regcache_h) \
  $(value_h) $(osabi_h) $(solib_svr4_h) $(nbsd_tdep_h) $(sh_tdep_h) \
  $(shnbsd_tdep_h)
sh-stub.o: sh-stub.c
sh-linux-tdep.o: sh-linux-tdep.c $(defs_h) $(osabi_h) $(solib_svr4_h)
sh-tdep.o: sh-tdep.c $(defs_h) $(frame_h) $(frame_base_h) \
  $(frame_unwind_h) $(dwarf2_frame_h) $(symtab_h) $(gdbtypes_h) \
  $(gdbcmd_h) $(gdbcore_h) $(value_h) $(dis_asm_h) $(inferior_h) \
  $(gdb_string_h) $(gdb_assert_h) $(arch_utils_h) $(floatformat_h) \
  $(regcache_h) $(doublest_h) $(osabi_h) $(sh_tdep_h) $(elf_bfd_h) \
  $(solib_svr4_h) $(elf_sh_h) $(gdb_sim_sh_h)
solib-aix5.o: solib-aix5.c $(defs_h) $(gdb_string_h) $(elf_external_h) \
  $(symtab_h) $(bfd_h) $(symfile_h) $(objfiles_h) $(gdbcore_h) \
  $(command_h) $(target_h) $(frame_h) $(gdb_regex_h) $(inferior_h) \
  $(environ_h) $(language_h) $(gdbcmd_h) $(solist_h)
solib.o: solib.c $(defs_h) $(gdb_string_h) $(symtab_h) $(bfd_h) \
  $(symfile_h) $(objfiles_h) $(exceptions_h) $(gdbcore_h) $(command_h) \
  $(target_h) $(frame_h) $(gdb_regex_h) $(inferior_h) $(environ_h) \
  $(language_h) $(gdbcmd_h) $(completer_h) $(filenames_h) $(exec_h) \
  $(solist_h) $(observer_h) $(readline_h) $(solib_h)
solib-frv.o: solib-frv.c $(defs_h) $(gdb_string_h) $(inferior_h) \
  $(gdbcore_h) $(solist_h) $(frv_tdep_h) $(objfiles_h) $(symtab_h) \
  $(language_h) $(command_h) $(gdbcmd_h) $(elf_frv_h)
solib-irix.o: solib-irix.c $(defs_h) $(symtab_h) $(bfd_h) $(symfile_h) \
  $(objfiles_h) $(gdbcore_h) $(target_h) $(inferior_h) $(solist_h)
solib-legacy.o: solib-legacy.c $(defs_h) $(gdbcore_h) $(solib_svr4_h)
solib-null.o: solib-null.c $(defs_h) $(solist_h)
solib-osf.o: solib-osf.c $(defs_h) $(gdb_string_h) $(bfd_h) $(symtab_h) \
  $(symfile_h) $(objfiles_h) $(target_h) $(inferior_h) $(solist_h)
solib-pa64.o: solib-pa64.c $(defs_h) $(symtab_h) $(bfd_h) $(symfile_h) \
  $(objfiles_h) $(gdbcore_h) $(target_h) $(inferior_h) $(hppa_tdep_h) \
  $(solist_h) $(solib_pa64_h)
solib-som.o: solib-som.c $(defs_h) $(som_h) $(symtab_h) $(bfd_h) \
  $(symfile_h) $(objfiles_h) $(gdbcore_h) $(target_h) $(inferior_h) \
  $(hppa_tdep_h) $(solist_h)
solib-sunos.o: solib-sunos.c $(defs_h) $(gdb_string_h) $(symtab_h) \
  $(bfd_h) $(symfile_h) $(objfiles_h) $(gdbcore_h) $(inferior_h) \
  $(solist_h) $(bcache_h) $(regcache_h)
solib-svr4.o: solib-svr4.c $(defs_h) $(elf_external_h) $(elf_common_h) \
  $(elf_mips_h) $(symtab_h) $(bfd_h) $(symfile_h) $(objfiles_h) \
  $(gdbcore_h) $(target_h) $(inferior_h) $(gdb_assert_h) $(solist_h) \
  $(solib_h) $(solib_svr4_h) $(bfd_target_h) $(exec_h)
sol-thread.o: sol-thread.c $(defs_h) $(gdbthread_h) $(target_h) \
  $(inferior_h) $(gdb_stat_h) $(gdbcmd_h) $(gdbcore_h) $(regcache_h) \
  $(solib_h) $(symfile_h) $(gdb_string_h) $(gregset_h)
somread.o: somread.c $(defs_h) $(bfd_h) $(symtab_h) $(symfile_h) \
  $(objfiles_h) $(buildsym_h) $(stabsread_h) $(gdb_stabs_h) \
  $(complaints_h) $(gdb_string_h) $(demangle_h) $(som_h) $(libhppa_h) \
  $(solib_som_h)
source.o: source.c $(defs_h) $(symtab_h) $(expression_h) $(language_h) \
  $(command_h) $(source_h) $(gdbcmd_h) $(frame_h) $(value_h) $(top_h) \
  $(gdb_string_h) $(gdb_stat_h) $(gdbcore_h) $(gdb_regex_h) $(symfile_h) \
  $(objfiles_h) $(annotate_h) $(gdbtypes_h) $(linespec_h) $(filenames_h) \
  $(completer_h) $(ui_out_h) $(readline_h)
sparc64fbsd-nat.o: sparc64fbsd-nat.c $(defs_h) $(regcache_h) $(target_h) \
  $(fbsd_nat_h) $(sparc64_tdep_h) $(sparc_nat_h) $(bsd_kvm_h)
sparc64fbsd-tdep.o: sparc64fbsd-tdep.c $(defs_h) $(frame_h) \
  $(frame_unwind_h) $(gdbcore_h) $(osabi_h) $(regcache_h) $(regset_h) \
  $(target_h) $(trad_frame_h) $(gdb_assert_h) $(gdb_string_h) \
  $(sparc64_tdep_h) $(solib_svr4_h)
sparc64-linux-nat.o: sparc64-linux-nat.c $(defs_h) $(sparc64_tdep_h) \
  $(sparc_nat_h)
sparc64-linux-tdep.o: sparc64-linux-tdep.c $(defs_h) $(frame_h) \
  $(frame_unwind_h) $(gdbarch_h) $(osabi_h) $(solib_svr4_h) $(symtab_h) \
  $(trad_frame_h) $(tramp_frame_h) $(sparc64_tdep_h)
sparc64-nat.o: sparc64-nat.c $(defs_h) $(gdbarch_h) $(sparc64_tdep_h) \
  $(sparc_nat_h)
sparc64nbsd-nat.o: sparc64nbsd-nat.c $(defs_h) $(regcache_h) $(target_h) \
  $(sparc64_tdep_h) $(sparc_nat_h) $(bsd_kvm_h)
sparc64nbsd-tdep.o: sparc64nbsd-tdep.c $(defs_h) $(frame_h) \
  $(frame_unwind_h) $(gdbcore_h) $(osabi_h) $(regcache_h) $(regset_h) \
  $(symtab_h) $(objfiles_h) $(solib_svr4_h) $(trad_frame_h) \
  $(gdb_assert_h) $(gdb_string_h) $(sparc64_tdep_h) $(nbsd_tdep_h)
sparc64obsd-tdep.o: sparc64obsd-tdep.c $(defs_h) $(frame_h) \
  $(frame_unwind_h) $(osabi_h) $(regset_h) $(symtab_h) $(objfiles_h) \
  $(solib_svr4_h) $(trad_frame_h) $(gdb_assert_h) $(sparc64_tdep_h)
sparc64-sol2-tdep.o: sparc64-sol2-tdep.c $(defs_h) $(frame_h) \
  $(frame_unwind_h) $(gdbarch_h) $(symtab_h) $(objfiles_h) $(osabi_h) \
  $(trad_frame_h) $(gdb_assert_h) $(sparc64_tdep_h) $(solib_svr4_h)
sparc64-tdep.o: sparc64-tdep.c $(defs_h) $(arch_utils_h) \
  $(dwarf2_frame_h) $(floatformat_h) $(frame_h) $(frame_base_h) \
  $(frame_unwind_h) $(gdbcore_h) $(gdbtypes_h) $(inferior_h) $(symtab_h) \
  $(objfiles_h) $(osabi_h) $(regcache_h) $(target_h) $(value_h) \
  $(gdb_assert_h) $(gdb_string_h) $(sparc64_tdep_h)
sparc-linux-tdep.o: sparc-linux-tdep.c $(defs_h) $(floatformat_h) \
  $(frame_h) $(frame_unwind_h) $(gdbarch_h) $(gdbcore_h) $(osabi_h) \
  $(regcache_h) $(solib_svr4_h) $(symtab_h) $(trad_frame_h) \
  $(tramp_frame_h) $(sparc_tdep_h)
sparc-nat.o: sparc-nat.c $(defs_h) $(inferior_h) $(regcache_h) \
  $(target_h) $(gdb_assert_h) $(gdb_string_h) $(gdb_wait_h) \
  $(sparc_tdep_h) $(sparc_nat_h) $(inf_ptrace_h)
sparcnbsd-nat.o: sparcnbsd-nat.c $(defs_h) $(regcache_h) $(target_h) \
  $(sparc_tdep_h) $(sparc_nat_h) $(bsd_kvm_h)
sparcnbsd-tdep.o: sparcnbsd-tdep.c $(defs_h) $(floatformat_h) $(frame_h) \
  $(frame_unwind_h) $(gdbcore_h) $(osabi_h) $(regcache_h) $(regset_h) \
  $(solib_svr4_h) $(symtab_h) $(trad_frame_h) $(gdb_assert_h) \
  $(gdb_string_h) $(sparc_tdep_h) $(nbsd_tdep_h)
sparcobsd-tdep.o: sparcobsd-tdep.c $(defs_h) $(floatformat_h) $(frame_h) \
  $(frame_unwind_h) $(osabi_h) $(solib_svr4_h) $(symtab_h) \
  $(trad_frame_h) $(gdb_assert_h) $(sparc_tdep_h)
sparc-sol2-nat.o: sparc-sol2-nat.c $(defs_h) $(regcache_h) $(gregset_h) \
  $(sparc_tdep_h) $(sparc64_tdep_h)
sparc-sol2-tdep.o: sparc-sol2-tdep.c $(defs_h) $(frame_h) \
  $(frame_unwind_h) $(gdbcore_h) $(symtab_h) $(objfiles_h) $(osabi_h) \
  $(regcache_h) $(target_h) $(trad_frame_h) $(gdb_assert_h) \
  $(gdb_string_h) $(sparc_tdep_h) $(solib_svr4_h)
sparc-stub.o: sparc-stub.c
sparc-tdep.o: sparc-tdep.c $(defs_h) $(arch_utils_h) $(dis_asm_h) \
  $(floatformat_h) $(frame_h) $(frame_base_h) $(frame_unwind_h) \
  $(gdbcore_h) $(gdbtypes_h) $(inferior_h) $(symtab_h) $(objfiles_h) \
  $(osabi_h) $(regcache_h) $(target_h) $(value_h) $(gdb_assert_h) \
  $(gdb_string_h) $(sparc_tdep_h)
stabsread.o: stabsread.c $(defs_h) $(gdb_string_h) $(bfd_h) \
  $(gdb_obstack_h) $(symtab_h) $(gdbtypes_h) $(expression_h) $(symfile_h) \
  $(objfiles_h) $(aout_stab_gnu_h) $(libaout_h) $(aout_aout64_h) \
  $(gdb_stabs_h) $(buildsym_h) $(complaints_h) $(demangle_h) \
  $(language_h) $(doublest_h) $(cp_abi_h) $(cp_support_h) $(gdb_assert_h) \
  $(stabsread_h)
# APPLE LOCAL begin subroutine inlining:
stack.o: stack.c $(defs_h) $(gdb_string_h) $(value_h) $(symtab_h) \
  $(gdbtypes_h) $(expression_h) $(language_h) $(frame_h) $(gdbcmd_h) \
  $(gdbcore_h) $(target_h) $(source_h) $(breakpoint_h) $(demangle_h) \
  $(inferior_h) $(annotate_h) $(ui_out_h) $(block_h) $(stack_h) \
  $(gdb_assert_h) $(dictionary_h) $(exceptions_h) $(reggroups_h) \
  $(regcache_h) $(symfile_h) $(objfiles_h) $(solib_h) $(inlining_h)
# APPLE LOCAL end subroutine inlining
std-regs.o: std-regs.c $(defs_h) $(user_regs_h) $(frame_h) $(gdbtypes_h) \
  $(value_h) $(gdb_string_h)
stop-gdb.o: stop-gdb.c $(defs_h)
symfile.o: symfile.c $(defs_h) $(bfdlink_h) $(symtab_h) $(gdbtypes_h) \
  $(gdbcore_h) $(frame_h) $(target_h) $(value_h) $(symfile_h) \
  $(objfiles_h) $(source_h) $(gdbcmd_h) $(breakpoint_h) $(language_h) \
  $(complaints_h) $(demangle_h) $(inferior_h) $(filenames_h) \
  $(gdb_stabs_h) $(gdb_obstack_h) $(completer_h) $(bcache_h) $(hashtab_h) \
  $(readline_h) $(gdb_assert_h) $(block_h) $(observer_h) $(libbfd_h) \
  $(objc_lang_h) $(exceptions_h) $(exec_h) $(macosx_nat_inferior_h) \
  $(macosx_nat_utils_h) $(mach_o_h) $(osabi_h) $(gdb_string_h) \
  $(gdb_stat_h) $(macosx_nat_dyld_h) $(macosx_nat_dyld_process_h)
symfile-mem.o: symfile-mem.c $(defs_h) $(symtab_h) $(gdbcore_h) \
  $(objfiles_h) $(exceptions_h) $(gdbcmd_h) $(target_h) $(value_h) \
  $(symfile_h) $(observer_h) $(auxv_h) $(elf_common_h)
symmisc.o: symmisc.c $(defs_h) $(symtab_h) $(gdbtypes_h) $(bfd_h) \
  $(symfile_h) $(objfiles_h) $(breakpoint_h) $(command_h) \
  $(gdb_obstack_h) $(exceptions_h) $(language_h) $(bcache_h) \
  $(demangle_h) $(block_h) $(gdb_regex_h) $(gdb_stat_h) $(dictionary_h) \
  $(gdb_assert_h) $(gdb_string_h) $(readline_h) $(symmisc_h)
symtab.o: symtab.c $(defs_h) $(symtab_h) $(gdbtypes_h) $(gdbcore_h) \
  $(frame_h) $(target_h) $(value_h) $(symfile_h) $(objfiles_h) \
  $(gdbcmd_h) $(call_cmds_h) $(gdb_regex_h) $(expression_h) $(language_h) \
  $(demangle_h) $(inferior_h) $(linespec_h) $(source_h) $(filenames_h) \
  $(objc_lang_h) $(ada_lang_h) $(hashtab_h) $(gdb_obstack_h) \
  $(gdb_assert_h) $(block_h) $(dictionary_h) $(gdb_string_h) \
  $(gdb_stat_h) $(cp_abi_h) $(observer_h) $(complaints_h)
target.o: target/target.c $(defs_h) $(gdb_string_h) $(target_h) \
  $(gdbcmd_h) $(symtab_h) $(inferior_h) $(bfd_h) $(symfile_h) \
  $(objfiles_h) $(gdb_wait_h) $(dcache_h) $(regcache_h) $(gdb_assert_h) \
  $(event_loop_h) $(memattr_h) $(gdbcore_h) $(objc_lang_h) \
  $(checkpoint_h) $(ui_out_h) $(dis_asm_h) $(gdbarch_h) $(exceptions_h) \
  $(exec_h)
# APPLE LOCAL begin subroutine inlining:
thread.o: thread.c $(defs_h) $(symtab_h) $(frame_h) $(inferior_h) \
  $(environ_h) $(value_h) $(target_h) $(gdbthread_h) $(exceptions_h) \
  $(command_h) $(gdbcmd_h) $(regcache_h) $(gdb_h) $(gdb_string_h) \
  $(wrapper_h) $(ui_out_h) $(inlining_h) $(macosx_nat_infthread_h)
top.o: top.c $(defs_h) $(gdbcmd_h) $(call_cmds_h) $(cli_cmds_h) \
  $(cli_script_h) $(cli_setshow_h) $(cli_decode_h) $(symtab_h) \
  $(inferior_h) $(exceptions_h) $(target_h) $(breakpoint_h) $(gdbtypes_h) \
  $(expression_h) $(value_h) $(language_h) $(terminal_h) $(annotate_h) \
  $(completer_h) $(top_h) $(version_h) $(serial_h) $(doublest_h) \
  $(gdb_assert_h) $(inlining_h) $(checkpoint_h) $(readline_h) \
  $(readline_history_h) $(event_top_h) $(gdb_string_h) $(gdb_stat_h) \
  $(ui_out_h) $(cli_out_h) $(mi_common_h) $(mi_cmds_h) $(mi_main_h)
tracepoint.o: tracepoint.c $(defs_h) $(symtab_h) $(frame_h) $(gdbtypes_h) \
  $(expression_h) $(gdbcmd_h) $(value_h) $(target_h) $(language_h) \
  $(gdb_string_h) $(inferior_h) $(tracepoint_h) $(remote_h) $(linespec_h) \
  $(regcache_h) $(completer_h) $(gdb_events_h) $(block_h) $(dictionary_h) \
  $(inlining_h) $(ax_h) $(ax_gdb_h) $(readline_h) $(readline_history_h)
# APPLE LOCAL end subroutine inlining
trad-frame.o: trad-frame.c $(defs_h) $(frame_h) $(trad_frame_h) \
  $(regcache_h) $(value_h)
tramp-frame.o: tramp-frame.c $(defs_h) $(tramp_frame_h) $(frame_unwind_h) \
  $(gdbcore_h) $(symtab_h) $(objfiles_h) $(target_h) $(trad_frame_h) \
  $(frame_base_h) $(gdb_assert_h)
typeprint.o: typeprint.c $(defs_h) $(gdb_obstack_h) $(bfd_h) $(symtab_h) \
  $(gdbtypes_h) $(expression_h) $(value_h) $(gdbcore_h) $(command_h) \
  $(gdbcmd_h) $(target_h) $(language_h) $(cp_abi_h) $(typeprint_h) \
  $(gdb_string_h) $(exceptions_h)
ui-file.o: ui-file.c $(defs_h) $(ui_file_h) $(gdb_string_h)
ui-out.o: ui-out.c $(defs_h) $(gdb_string_h) $(expression_h) \
  $(language_h) $(ui_out_h) $(gdb_assert_h)
user-regs.o: user-regs.c $(defs_h) $(user_regs_h) $(gdbtypes_h) \
  $(gdb_string_h) $(gdb_assert_h) $(frame_h)
utils.o: utils.c $(defs_h) $(gdb_assert_h) $(gdb_string_h) $(event_top_h) \
  $(exceptions_h) $(bfd_h) $(tui_h) $(xm_macosx_h) $(gdbcmd_h) \
  $(serial_h) $(target_h) $(demangle_h) $(expression_h) $(language_h) \
  $(charset_h) $(annotate_h) $(filenames_h) $(symfile_h) $(inferior_h) \
  $(gdb_curses_h) $(ui_out_h) $(cli_out_h) $(readline_h) $(mmalloc_h) \
  $(mach_o_h) $(utils_h) $(srcdir)/config/xm-macosx.h
uw-thread.o: uw-thread.c $(defs_h) $(gdbthread_h) $(target_h) \
  $(inferior_h) $(regcache_h) $(gregset_h)
v850-tdep.o: v850-tdep.c $(defs_h) $(frame_h) $(frame_base_h) \
  $(trad_frame_h) $(frame_unwind_h) $(dwarf2_frame_h) $(gdbtypes_h) \
  $(inferior_h) $(gdb_string_h) $(gdb_assert_h) $(gdbcore_h) \
  $(arch_utils_h) $(regcache_h) $(dis_asm_h) $(osabi_h)
valarith.o: valarith.c $(defs_h) $(value_h) $(symtab_h) $(gdbtypes_h) \
  $(expression_h) $(target_h) $(language_h) $(gdb_string_h) $(doublest_h) \
  $(infcall_h) $(parser_defs_h)
valops.o: valops.c $(defs_h) $(symtab_h) $(gdbtypes_h) $(value_h) \
  $(frame_h) $(inferior_h) $(gdbcore_h) $(target_h) $(demangle_h) \
  $(language_h) $(block_h) $(gdbcmd_h) $(regcache_h) $(cp_abi_h) \
  $(exceptions_h) $(dictionary_h) $(gdbthread_h) $(gdb_h) $(gdb_string_h) \
  $(gdb_assert_h) $(cp_support_h) $(observer_h) $(macosx_nat_infthread_h)
valprint.o: valprint.c $(defs_h) $(gdb_string_h) $(symtab_h) \
  $(gdbtypes_h) $(value_h) $(gdbcore_h) $(gdbcmd_h) $(target_h) \
  $(language_h) $(annotate_h) $(valprint_h) $(floatformat_h) $(doublest_h)
value.o: value.c $(defs_h) $(gdb_string_h) $(symtab_h) $(gdbtypes_h) \
  $(value_h) $(gdbcore_h) $(command_h) $(gdbcmd_h) $(target_h) \
  $(language_h) $(scm_lang_h) $(demangle_h) $(doublest_h) $(gdb_assert_h) \
  $(regcache_h) $(block_h)
varobj.o: varobj.c $(defs_h) $(exceptions_h) $(value_h) $(cp_abi_h) \
  $(expression_h) $(frame_h) $(language_h) $(wrapper_h) $(gdbcmd_h) \
  $(gdb_assert_h) $(gdb_string_h) $(block_h) $(target_h) $(objfiles_h) \
  $(varobj_h) $(parser_defs_h)
vaxbsd-nat.o: vaxbsd-nat.c $(defs_h) $(inferior_h) $(regcache_h) \
  $(target_h) $(vax_tdep_h) $(inf_ptrace_h) $(bsd_kvm_h)
vax-nat.o: vax-nat.c $(defs_h) $(inferior_h) $(gdb_assert_h) \
  $(vax_tdep_h) $(inf_ptrace_h)
vaxnbsd-tdep.o: vaxnbsd-tdep.c $(defs_h) $(arch_utils_h) $(osabi_h) \
  $(vax_tdep_h) $(solib_svr4_h) $(gdb_string_h)
vax-tdep.o: vax-tdep.c $(defs_h) $(arch_utils_h) $(dis_asm_h) $(frame_h) \
  $(frame_base_h) $(frame_unwind_h) $(gdbcore_h) $(gdbtypes_h) $(osabi_h) \
  $(regcache_h) $(regset_h) $(trad_frame_h) $(value_h) $(gdb_string_h) \
  $(vax_tdep_h)
w89k-rom.o: w89k-rom.c $(defs_h) $(bfd_h) $(gdbcore_h) $(target_h) \
  $(monitor_h) $(serial_h) $(xmodem_h) $(regcache_h)
win32-nat.o: win32-nat.c $(defs_h) $(frame_h) $(inferior_h) $(target_h) \
  $(exceptions_h) $(gdbcore_h) $(command_h) $(completer_h) $(regcache_h) \
  $(top_h) $(buildsym_h) $(symfile_h) $(objfiles_h) $(gdb_string_h) \
  $(gdbthread_h) $(gdbcmd_h) $(exec_h) $(i386_tdep_h) $(i387_tdep_h)
wince.o: wince.c $(defs_h) $(frame_h) $(inferior_h) $(target_h) \
  $(exceptions_h) $(gdbcore_h) $(command_h) $(buildsym_h) $(symfile_h) \
  $(objfiles_h) $(gdb_string_h) $(gdbthread_h) $(gdbcmd_h) \
  $(wince_stub_h) $(regcache_h) $(mips_tdep_h)
wince-stub.o: wince-stub.c $(wince_stub_h)
wrapper.o: wrapper.c $(defs_h) $(value_h) $(exceptions_h) $(wrapper_h) \
  $(ui_out_h) $(varobj_h) $(objc_lang_h)
# APPLE LOCAL target:
x86-shared-tdep.o: x86-shared-tdep.c $(defs_h) $(gdb_assert_h) \
  $(dis_asm_h) $(gdbcore_h) $(gdbarch_h) $(ui_out_h) $(target_h) \
  $(gdbtypes_h) $(frame_h) $(objfiles_h) $(exceptions_h) $(inferior_h) \
  $(objc_lang_h) $(regcache_h) $(comman_h) $(gdbcmd_h) \
  $(x86_shared_tdep_h) $(i386_tdep_h) $(amd64_tdep_h)
# END APPLE LOCAL target
xcoffread.o: xcoffread.c $(defs_h) $(bfd_h) $(gdb_string_h) $(gdb_stat_h) \
  $(coff_internal_h) $(libcoff_h) $(coff_xcoff_h) $(libxcoff_h) \
  $(coff_rs6000_h) $(symtab_h) $(gdbtypes_h) $(symfile_h) $(objfiles_h) \
  $(buildsym_h) $(stabsread_h) $(expression_h) $(complaints_h) \
  $(gdb_stabs_h) $(aout_stab_gnu_h)
xcoffsolib.o: xcoffsolib.c $(defs_h) $(bfd_h) $(xcoffsolib_h) \
  $(inferior_h) $(gdbcmd_h) $(symfile_h) $(frame_h) $(gdb_regex_h)
xmodem.o: xmodem.c $(defs_h) $(serial_h) $(target_h) $(xmodem_h)
xstormy16-tdep.o: xstormy16-tdep.c $(defs_h) $(frame_h) $(frame_base_h) \
  $(frame_unwind_h) $(dwarf2_frame_h) $(symtab_h) $(gdbtypes_h) \
  $(gdbcmd_h) $(gdbcore_h) $(value_h) $(dis_asm_h) $(inferior_h) \
  $(gdb_string_h) $(gdb_assert_h) $(arch_utils_h) $(floatformat_h) \
  $(regcache_h) $(doublest_h) $(osabi_h) $(objfiles_h)

#
# gdb/cli/ dependencies
#
# Need to explicitly specify the compile rule as make will do nothing
# or try to compile the object file into the sub-directory.

cli-cmds.o: $(cli_srcdir)/cli-cmds.c $(defs_h) $(readline_h) \
  $(readline_tilde_h) $(completer_h) $(target_h) $(gdb_wait_h) \
  $(gdb_regex_h) $(gdb_string_h) $(gdb_vfork_h) $(linespec_h) \
  $(expression_h) $(frame_h) $(value_h) $(language_h) $(filenames_h) \
  $(objfiles_h) $(source_h) $(disasm_h) $(ui_out_h) $(top_h) \
  $(cli_decode_h) $(cli_script_h) $(cli_setshow_h) $(cli_cmds_h) \
  $(tui_h)
	$(AM_V_COMPILER)$(COMPILER) -c $(INTERNAL_CFLAGS) \
	  $(cli_srcdir)/cli-cmds.c
	$(POSTCOMPILE)
cli-decode.o: $(cli_srcdir)/cli-decode.c $(defs_h) $(symtab_h) \
  $(gdb_regex_h) $(gdb_string_h) $(completer_h) $(ui_out_h) $(cli_cmds_h) \
  $(cli_decode_h) $(tui_h) $(gdb_assert_h)
	$(AM_V_COMPILER)$(COMPILER) -c $(INTERNAL_CFLAGS) \
	  $(cli_srcdir)/cli-decode.c
	$(POSTCOMPILE)
cli-dump.o: $(cli_srcdir)/cli-dump.c $(defs_h) $(gdb_string_h) \
  $(cli_decode_h) $(cli_cmds_h) $(value_h) $(completer_h) \
  $(cli_dump_h) $(gdb_assert_h) $(target_h) $(readline_h)
	$(AM_V_COMPILER)$(COMPILER) -c $(INTERNAL_CFLAGS) \
	  $(cli_srcdir)/cli-dump.c
	$(POSTCOMPILE)
cli-interp.o: $(cli_srcdir)/cli-interp.c $(defs_h) $(interps_h) \
  $(wrapper_h) $(event_top_h) $(ui_out_h) $(cli_out_h) $(top_h) \
  $(inferior_h) $(mi_console_h) $(gdb_string_h) $(cli_cmds_h) \
  $(exceptions_h) $(cli_interp_h)
	$(AM_V_COMPILER)$(COMPILER) -c $(INTERNAL_CFLAGS) \
	  $(cli_srcdir)/cli-interp.c
	$(POSTCOMPILE)
cli-logging.o: $(cli_srcdir)/cli-logging.c $(defs_h) $(gdbcmd_h) \
  $(ui_out_h) $(gdb_string_h) $(cli_logging_h)
	$(AM_V_COMPILER)$(COMPILER) -c $(INTERNAL_CFLAGS) \
	  $(cli_srcdir)/cli-logging.c
	$(POSTCOMPILE)
cli-script.o: $(cli_srcdir)/cli-script.c $(defs_h) $(value_h) \
  $(language_h) $(ui_out_h) $(gdb_string_h) $(exceptions_h) $(top_h) \
  $(breakpoint_h) $(event_top_h) $(cli_cmds_h) $(cli_decode_h) \
  $(cli_script_h)
	$(AM_V_COMPILER)$(COMPILER) -c $(INTERNAL_CFLAGS) \
	  $(cli_srcdir)/cli-script.c
	$(POSTCOMPILE)
cli-setshow.o: $(cli_srcdir)/cli-setshow.c $(defs_h) $(readline_tilde_h) \
  $(value_h) $(gdb_string_h) $(ui_out_h) $(cli_decode_h) $(cli_cmds_h) \
  $(cli_setshow_h)
	$(AM_V_COMPILER)$(COMPILER) -c $(INTERNAL_CFLAGS) \
	  $(cli_srcdir)/cli-setshow.c
	$(POSTCOMPILE)
cli-utils.o: $(cli_srcdir)/cli-utils.c $(defs_h) $(cli_utils_h)
	$(AM_V_COMPILER)$(COMPILER) -c $(INTERNAL_CFLAGS) \
	  $(cli_srcdir)/cli-utils.c
	$(POSTCOMPILE)

#
# GDBTK sub-directory
#
# Need to explicitly specify the compile rule as make will do nothing
# or try to compile the object file into the mi directory.

.PHONY: all-gdbtk
all-gdbtk: insight$(EXEEXT)

.PHONY: install-gdbtk
install-gdbtk:
	transformed_name=`t='$(program_transform_name)'; \
		  echo "insight" | $(SED) -e $${t}`; \
	if test "x$${transformed_name}" = "x"; then \
	  transformed_name=insight; \
	else \
	  echo "transformed_name is $${transformed_name}"; \
	fi; \
	$(RUN_MKINSTALLDIRS) $(DESTDIR)$(bindir); \
	$(INSTALL_PROGRAM) insight$(EXEEXT) \
		$(DESTDIR)$(bindir)/$${transformed_name}$(EXEEXT); \
	$(RUN_MKINSTALLDIRS) \
		$(DESTDIR)$(GDBTK_LIBRARY); \
	$(RUN_MKINSTALLDIRS) \
		$(DESTDIR)$(libdir)/insight$(GDBTK_VERSION); \
	$(INSTALL_DATA) $(srcdir)/gdbtk/plugins/plugins.tcl \
		$(DESTDIR)$(libdir)/insight$(GDBTK_VERSION)/plugins.tcl; \
	$(RUN_MKINSTALLDIRS) \
		$(DESTDIR)$(GDBTK_LIBRARY)/images \
		$(DESTDIR)$(GDBTK_LIBRARY)/images2; \
	$(RUN_MKINSTALLDIRS) \
		$(DESTDIR)$(GDBTK_LIBRARY)/help \
		$(DESTDIR)$(GDBTK_LIBRARY)/help/images \
		$(DESTDIR)$(GDBTK_LIBRARY)/help/trace; \
	cd $(srcdir)/gdbtk/library ; \
	for i in *.tcl *.itcl *.ith *.itb images/*.gif images2/*.gif images/icons.txt images2/icons.txt tclIndex help/*.html  help/trace/*.html help/trace/index.toc help/images/*.gif help/images/*.png; \
	  do \
		$(INSTALL_DATA) $${i} $(DESTDIR)$(GDBTK_LIBRARY)/$${i}; \
	  done;

.PHONY: uninstall-gdbtk
uninstall-gdbtk:
	transformed_name=`t='$(program_transform_name)'; \
		  echo "insight" | $(SED) -e $${t}`; \
	if test "x$${transformed_name}" = "x"; then \
		transformed_name=insight; \
	else \
		echo "transformed_name is $${transformed_name}"; \
	fi; \
	rm -f $(AM_V_v) $(DESTDIR)$(bindir)/$${transformed_name}$(EXEEXT)
	rm -rf $(AM_V_v) $(DESTDIR)$(GDBTK_LIBRARY)

.PHONY: clean-gdbtk
clean-gdbtk:
	rm -f $(AM_V_v) insight$(EXEEXT) || echo "insight$(EXEEXT) missing"
	$(AM_V_at)rm -f -r $(AM_V_v) insight$(EXEEXT).dSYM

# Removing the old gdb first works better if it is running,
# at least on SunOS:
insight$(EXEEXT): gdbtk-main.o libgdb.a $(ADD_DEPS) \
  $(CDEPS) $(TDEPLIBS)
	$(AM_V_at)rm -f $(AM_V_v) insight$(EXEEXT)
	$(AM_V_at)rm -f -r $(AM_V_v) insight$(EXEEXT).dSYM
	$(AM_V_LINKER)$(LINK) $(INTERNAL_LDFLAGS) $(WIN32LDAPP) \
		$(ADD_INFO_PLIST) \
		-o insight$(EXEEXT) gdbtk-main.o libgdb.a \
		$(TDEPLIBS) $(TUI_LIBRARY) $(CLIBS) $(LOADLIBES)
	@echo "stripping __objcInit from $@";
	echo "__objcInit" > $(TMPDIR)/macosx-syms-to-remove;
	-$(STRIP) -R $(TMPDIR)/macosx-syms-to-remove -X insight$(EXEEXT)
	$(AM_V_at)rm -f $(AM_V_v) $(TMPDIR)/macosx-syms-to-remove;

# This object is for Cygwin only:
gdbres.o: $(srcdir)/gdbtk/gdb.rc $(srcdir)/gdbtk/gdbtool.ico
	$(WINDRES) --include $(srcdir)/gdbtk $(srcdir)/gdbtk/gdb.rc \
	  gdbres.o
# The rest of these gdbtk objects are made from the gdbtk C sources:
gdbtk.o: $(gdbtk_c_srcdir)/gdbtk.c $(defs_h) $(inferior_h) $(symfile_h) \
  $(objfiles_h) $(gdbcore_h) $(tracepoint_h) $(demangle_h) $(version_h) \
  $(top_h) $(annotate_h) $(exceptions_h) $(gdbtk_h) $(gdb_string_h) \
  $(dis_asm_h) $(gdbcmd_h)
	$(AM_V_COMPILER)$(COMPILER) -c $(INTERNAL_CFLAGS) $(IDE_CFLAGS) \
	  $(ITCL_CFLAGS) $(ITK_CFLAGS) $(TCL_CFLAGS) $(TK_CFLAGS) \
	  $(X11_CFLAGS) $(GDBTK_CFLAGS) \
	  $(gdbtk_c_srcdir)/gdbtk.c \
	  -DGDBTK_LIBRARY=\"$(GDBTK_LIBRARY)\" \
	  -DSRC_DIR=\"$(GDBTK_SRC_DIR)\"
	$(POSTCOMPILE)
gdbtk-bp.o: $(gdbtk_c_srcdir)/gdbtk-bp.c $(defs_h) $(symtab_h) \
  $(symfile_h) $(source_h) $(linespec_h) $(breakpoint_h) $(tracepoint_h) \
  $(gdb_string_h) $(gdbtk_h) $(gdbtk_cmds_h)
	$(AM_V_COMPILER)$(COMPILER) -c $(INTERNAL_CFLAGS) $(IDE_CFLAGS) \
	  $(ITCL_CFLAGS) $(TCL_CFLAGS) $(TK_CFLAGS) $(X11_CFLAGS) \
	  $(GDBTK_CFLAGS) $(gdbtk_c_srcdir)/gdbtk-bp.c \
	  -DGDBTK_LIBRARY=\"$(GDBTK_LIBRARY)\"
	$(POSTCOMPILE)
gdbtk-cmds.o: $(gdbtk_c_srcdir)/gdbtk-cmds.c $(defs_h) $(inferior_h) \
  $(source_h) $(symfile_h) $(objfiles_h) $(gdbcore_h) $(demangle_h) \
  $(linespec_h) $(tui_file_h) $(top_h) $(annotate_h) $(block_h) \
  $(dictionary_h) $(filenames_h) $(disasm_h) $(value_h) $(exceptions_h) \
  $(gdbtk_h) $(gdbtk_wrapper_h) $(gdbtk_cmds_h) $(gdb_string_h) \
  $(dis_asm_h) $(gdbcmd_h)
	$(AM_V_COMPILER)$(COMPILER) -c $(INTERNAL_CFLAGS) $(IDE_CFLAGS) \
	  $(ITCL_CFLAGS) $(TCL_CFLAGS) $(TK_CFLAGS) $(X11_CFLAGS) \
	  $(GDBTK_CFLAGS) $(gdbtk_c_srcdir)/gdbtk-cmds.c \
	  -DGDBTK_LIBRARY=\"$(GDBTK_LIBRARY)\"
	$(POSTCOMPILE)
gdbtk-hooks.o: $(gdbtk_c_srcdir)/gdbtk-hooks.c $(defs_h) $(inferior_h) \
  $(symfile_h) $(objfiles_h) $(gdbcore_h) $(tracepoint_h) $(demangle_h) \
  $(gdb_events_h) $(top_h) $(annotate_h) $(cli_decode_h) $(gdbtk_h) \
  $(gdb_string_h) $(dis_asm_h) $(gdbcmd_h)
	$(AM_V_COMPILER)$(COMPILER) -c $(INTERNAL_CFLAGS) $(IDE_CFLAGS) \
	  $(ITCL_CFLAGS) $(TCL_CFLAGS) $(TK_CFLAGS) $(X11_CFLAGS) \
	  $(GDBTK_CFLAGS) $(gdbtk_c_srcdir)/gdbtk-hooks.c \
	  -DGDBTK_LIBRARY=\"$(GDBTK_LIBRARY)\"
	$(POSTCOMPILE)
gdbtk-interp.o: $(gdbtk_c_srcdir)/gdbtk-interp.c $(defs_h) \
  $(interps_h) $(ui_file_h) $(ui_out_h) $(cli_out_h) $(gdb_string_h) \
  $(cli_cmds_h) $(cli_decode_h) $(exceptions_h) $(gdbtk_h)
	$(AM_V_COMPILER)$(COMPILER) -c $(INTERNAL_CFLAGS) $(IDE_CFLAGS) \
	  $(ITCL_CFLAGS) $(TCL_CFLAGS) $(TK_CFLAGS) $(X11_CFLAGS) \
	  $(GDBTK_CFLAGS) $(gdbtk_c_srcdir)/gdbtk-interp.c
	$(POSTCOMPILE)
gdbtk-main.o: $(gdbtk_c_srcdir)/gdbtk-main.c $(defs_h) $(main_h) \
  $(gdb_string_h)
	$(AM_V_COMPILER)$(COMPILER) -c $(INTERNAL_CFLAGS) $(IDE_CFLAGS) \
	  $(ITCL_CFLAGS) $(TCL_CFLAGS) $(TK_CFLAGS) $(X11_CFLAGS) \
	  $(GDBTK_CFLAGS) $(gdbtk_c_srcdir)/gdbtk-main.c \
	  -DGDBTK_LIBRARY=\"$(GDBTK_LIBRARY)\"
	$(POSTCOMPILE)
gdbtk-register.o: $(gdbtk_c_srcdir)/gdbtk-register.c $(defs_h) $(frame_h) \
  $(regcache_h) $(reggroups_h) $(value_h) $(target_h) $(gdb_string_h) \
  $(gdbtk_h) $(gdbtk_cmds_h)
	$(AM_V_COMPILER)$(COMPILER) -c $(INTERNAL_CFLAGS) $(IDE_CFLAGS) \
	  $(ITCL_CFLAGS) $(TCL_CFLAGS) $(TK_CFLAGS) $(X11_CFLAGS) \
	  $(GDBTK_CFLAGS) $(gdbtk_c_srcdir)/gdbtk-register.c \
	  -DGDBTK_LIBRARY=\"$(GDBTK_LIBRARY)\"
	$(POSTCOMPILE)
gdbtk-stack.o: $(gdbtk_c_srcdir)/gdbtk-stack.c $(defs_h) $(target_h) \
  $(breakpoint_h) $(linespec_h) $(block_h) $(dictionary_h) \
  $(gdbtk_h) $(gdbtk_cmds_h) $(gdbtk_wrapper_h)
	$(AM_V_COMPILER)$(COMPILER) -c $(INTERNAL_CFLAGS) $(IDE_CFLAGS) \
	  $(ITCL_CFLAGS) $(TCL_CFLAGS) $(TK_CFLAGS) $(X11_CFLAGS) \
	  $(GDBTK_CFLAGS) $(gdbtk_c_srcdir)/gdbtk-stack.c \
	  -DGDBTK_LIBRARY=\"$(GDBTK_LIBRARY)\"
	$(POSTCOMPILE)
gdbtk-varobj.o: $(gdbtk_c_srcdir)/gdbtk-varobj.c $(defs_h) $(value_h) \
  $(gdb_string_h) $(varobj_h) $(gdbtk_h) $(gdbtk_cmds_h)
	$(AM_V_COMPILER)$(COMPILER) -c $(INTERNAL_CFLAGS) $(IDE_CFLAGS) \
	  $(ITCL_CFLAGS) $(TCL_CFLAGS) $(TK_CFLAGS) $(X11_CFLAGS) \
	  $(GDBTK_CFLAGS) $(gdbtk_c_srcdir)/gdbtk-varobj.c
	$(POSTCOMPILE)

gdbtk-wrapper.o: $(gdbtk_c_srcdir)/gdbtk-wrapper.c $(defs_h) $(frame_h) \
  $(value_h) $(block_h) $(exceptions_h) $(gdbtk_wrapper_h)
	$(AM_V_COMPILER)$(COMPILER) -c $(INTERNAL_CFLAGS) $(IDE_CFLAGS) \
	  $(GDBTK_CFLAGS) $(gdbtk_c_srcdir)/gdbtk-wrapper.c
	$(POSTCOMPILE)

#
# gdb/macosx/ dependencies
#
# No need to explicitly specify the compile rule for this subdir, because
# we use a vpath hack for it, unlike the rest of them.

arm-macosx-nat-exec.o: $(macosxsrcdir)/arm-macosx-nat-exec.c $(defs_h) \
  $(frame_h) $(inferior_h) $(symtab_h) $(target_h) $(gdbcore_h) \
  $(symfile_h) $(objfiles_h) $(regcache_h) $(gdbarch_h) $(arch_utils_h) \
  $(arm_tdep_h) $(arm_macosx_nat_exec_h) $(arm_macosx_thread_status_h) \
  $(arm_macosx_tdep_h)
arm-macosx-tdep.o: $(macosxsrcdir)/arm-macosx-tdep.c $(config_h) \
  $(defs_h) $(frame_h) $(inferior_h) $(symtab_h) $(target_h) $(gdbcore_h) \
  $(symfile_h) $(objfiles_h) $(gdbcmd_h) $(arch_utils_h) $(floatformat_h) \
  $(gdbtypes_h) $(regcache_h) $(reggroups_h) $(frame_base_h) \
  $(frame_unwind_h) $(dummy_frame_h) $(libbfd_h) $(arm_tdep_h) \
  $(elf_bfd_h) $(dis_asm_h) $(gdbarch_h) $(osabi_h) $(mach_o_h) \
  $(macosx_tdep_h) $(arm_macosx_regnums_h) $(arm_macosx_tdep_h) \
  $(tm_arm_macosx_h)
cached-symfile.o: $(macosxsrcdir)/cached-symfile.c $(defs_h) $(bfd_h) \
  $(symtab_h) $(symfile_h) $(objfiles_h) $(gdb_stabs_h) $(target_h) \
  $(gdbcmd_h) $(gdb_stat_h) $(obstack_h) $(mmprivate_h) \
  $(macosx_nat_dyld_h) $(macosx_nat_dyld_path_h) $(macosx_nat_inferior_h) \
  $(macosx_nat_inferior_debug_h) $(macosx_nat_mutils_h) \
  $(macosx_nat_dyld_info_h) $(macosx_nat_dyld_process_h) \
  $(cached_symfile_h)
core-macho.o: $(macosxsrcdir)/core-macho.c $(defs_h) $(gdb_string_h) \
  $(frame_h) $(inferior_h) $(symtab_h) $(command_h) $(bfd_h) $(target_h) \
  $(gdbcore_h) $(gdbthread_h) $(regcache_h) $(exec_h) $(readline_h) \
  $(mach_o_h) $(inlining_h) $(gdb_assert_h) $(osabi_h) $(gdbarch_h) \
  $(objfiles_h) $(ui_out_h) $(core_macho_h)
darwin-kernel.o: $(macosxsrcdir)/darwin-kernel.c $(defs_h) $(inferior_h) \
  $(gdbcmd_h) $(event_loop_h) $(event_top_h) $(inf_loop_h) $(regcache_h) \
  $(infcall_h) $(darwin_kernel_h)
i386-macosx-nat-exec.o: $(macosxsrcdir)/i386-macosx-nat-exec.c $(defs_h) \
  $(frame_h) $(inferior_h) $(target_h) $(symfile_h) $(symtab_h) \
  $(objfiles_h) $(gdbcmd_h) $(regcache_h) $(gdb_assert_h) $(i386_tdep_h) \
  $(i387_tdep_h) $(gdbarch_h) $(arch_utils_h) $(i386_macosx_nat_exec_h) \
  $(i386_macosx_tdep_h) $(macosx_nat_mutils_h) $(macosx_nat_inferior_h)
i386-macosx-nat-float.o: $(macosxsrcdir)/i386-macosx-nat-float.c \
  $(defs_h) $(inferior_h) $(target_h) $(symfile_h) $(symtab_h) \
  $(objfiles_h) $(gdbcmd_h)
i386-macosx-tdep.o: $(macosxsrcdir)/i386-macosx-tdep.c $(defs_h) \
  $(frame_h) $(inferior_h) $(gdbcore_h) $(target_h) $(floatformat_h) \
  $(symtab_h) $(regcache_h) $(libbfd_h) $(objfiles_h) $(i387_tdep_h) \
  $(i386_tdep_h) $(amd64_tdep_h) $(osabi_h) $(ui_out_h) $(symtab_h) \
  $(frame_h) $(gdb_assert_h) $(i386_macosx_tdep_h)
kdp-protocol.o: $(macosxsrcdir)/kdp-protocol.c $(kdp_protocol_h) \
  $(kdp_udp_h) $(defs_h)
kdp-transactions.o: $(macosxsrcdir)/kdp-transactions.c \
  $(kdp_transactions_h) $(kdp_protocol_h) $(defs_h)
kdp-udp.o: $(macosxsrcdir)/kdp-udp.c $(kdp_udp_h) $(defs_h) \
  $(event_loop_h)
machoread.o: $(macosxsrcdir)/machoread.c $(defs_h) $(symtab_h) \
  $(gdbtypes_h) $(breakpoint_h) $(bfd_h) $(symfile_h) $(objfiles_h) \
  $(buildsym_h) $(obstack_h) $(gdb_stabs_h) $(stabsread_h) $(gdbcmd_h) \
  $(completer_h) $(dwarf2read_h) $(gdbarch_h) $(mach_o_h) $(gdb_assert_h) \
  $(macosx_nat_dyld_io_h) $(macosx_nat_inferior_h)
macosx-bundle-utils.o: $(macosxsrcdir)/macosx-bundle-utils.c $(defs_h) \
  $(gdb_assert_h) $(macosx_bundle_utils_h)
macosx-fat-utils.o: $(macosxsrcdir)/macosx-fat-utils.c $(defs_h) \
  $(osabi_h) $(gdbarch_h) $(arch_utils_h) $(macosx_fat_utils_h)
macosx-metrowerks.o: $(macosxsrcdir)/macosx-metrowerks.c \
  $(macosx_nat_inferior_h) $(macosx_nat_cfm_h) $(macosx_nat_dyld_info_h) \
  $(defs_h) $(inferior_h) $(gdbcmd_h) $(symfile_h) $(frame_h) \
  $(breakpoint_h) $(symtab_h) $(annotate_h) $(target_h) $(breakpoint_h) \
  $(gdbcore_h) $(event_top_h)
macosx-nat-cfm-io.o: $(macosxsrcdir)/macosx-cfm-io.c $(defs_h) \
  $(inferior_h) $(symfile_h) $(symtab_h) $(gdbcmd_h) $(objfiles_h) \
  $(macosx_nat_inferior_h) $(macosx_nat_mutils_h) $(macosx_nat_dyld_io_h) \
  $(macosx_nat_cfm_io_h)
macosx-nat-cfm.o: $(macosxsrcdir)/macosx-nat-cfm.c $(defs_h) \
  $(breakpoint_h) $(gdbcmd_h) $(gdbcore_h) $(symfile_h) $(symtab_h) \
  $(target_h) $(macosx_nat_inferior_h) $(macosx_nat_inferior_util_h) \
  $(macosx_nat_mutils_h) $(macosx_nat_cfm_h) $(macosx_nat_cfm_io_h) \
  $(macosx_nat_dyld_info_h) $(macosx_nat_dyld_io_h)
macosx-nat-cfmthread.o: $(macosxsrcdir)/macosx-nat-cfmthread.c $(defs_h) \
  $(gdbcmd_h) $(breakpoint_h) $(annotate_h) $(inferior_h) \
  $(macosx_nat_inferior_h) $(macosx_nat_cfmthread_h) $(macosx_nat_cfm_h)
macosx-nat-cmds-load.o: $(macosxsrcdir)/macosx-nat-cmds-load.c $(defs_h) \
  $(top_h) $(command_h) $(gdbcmd_h) $(completer_h) $(readline_h) \
  $(filenames_h) $(macosx_nat_cmds_load_h)
macosx-nat-dyld-info.o: $(macosxsrcdir)/macosx-nat-dyld-info.c \
  $(macosx_nat_dyld_info_h) $(macosx_nat_dyld_h) \
  $(macosx_nat_dyld_path_h) $(macosx_nat_dyld_process_h) $(defs_h) \
  $(inferior_h) $(symfile_h) $(symtab_h) $(gdbcmd_h) $(objfiles_h) \
  $(ui_out_h) $(mach_o_h)
macosx-nat-dyld-io.o: $(macosxsrcdir)/macosx-nat-dyld-io.c $(defs_h) \
  $(inferior_h) $(symfile_h) $(symtab_h) $(gdbcmd_h) $(objfiles_h) \
  $(target_h) $(exceptions_h) $(gdbcore_h) $(libbfd_h) $(mach_o_h) \
  $(macosx_nat_inferior_h) $(macosx_nat_mutils_h) \
  $(macosx_nat_dyld_info_h) $(macosx_nat_dyld_io_h)
macosx-nat-dyld-path.o: $(macosxsrcdir)/macosx-nat-dyld-path.c $(defs_h) \
  $(inferior_h) $(environ_h) $(gdbcore_h) $(macosx_nat_dyld_path_h) \
  $(macosx_nat_dyld_info_h) $(macosx_nat_dyld_h) $(macosx_nat_inferior_h)
macosx-nat-dyld-process.o: $(macosxsrcdir)/macosx-nat-dyld-process.c \
  $(defs_h) $(inferior_h) $(symtab_h) $(gdbcmd_h) $(objfiles_h) \
  $(mach_o_h) $(gdbcore_h) $(gdb_regex_h) $(gdb_stabs_h) $(gdb_assert_h) \
  $(interps_h) $(objc_lang_h) $(gdb_stat_h) $(arch_utils_h) $(gdbarch_h) \
  $(symfile_h) $(mmprivate_h) $(macosx_nat_dyld_info_h) \
  $(macosx_nat_dyld_path_h) $(macosx_nat_dyld_io_h) $(macosx_nat_dyld_h) \
  $(macosx_nat_inferior_h) $(macosx_nat_mutils_h) \
  $(macosx_nat_dyd_process_h)
macosx-nat-dyld.o: $(macosxsrcdir)/macosx-nat-dyld.c $(defs_h) \
  $(inferior_h) $(target_h) $(gdbcmd_h) $(annotate_h) $(mach_o_h) \
  $(gdbcore_h) $(symfile_h) $(objfiles_h) $(gdb_assert_h) $(regcache_h) \
  $(bfd_h) $(gdb_stabs_h) $(objc_lang_h) $(gdbarch_h) $(arch_utils_h) \
  $(ui_out_h) $(osabi_h) $(exceptions_h) $(remote_h) $(macosx_nat_dyld_h) \
  $(macosx_nat_dyld_path_h) $(macosx_nat_inferior_h) \
  $(macosx_nat_inferior_debug_h) $(macosx_nat_mutils_h) \
  $(macosx_nat_dyld_io_h) $(macosx_nat_info_h) \
  $(macosx_nat_dyld_process_h) $(macosx_tdep_h) $(macosx_nat_cfm_h)
macosx-nat-excthread.o: $(macosxsrcdir)/macosx-nat-excthread.c $(defs_h) \
  $(gdbcmd_h) $(event_loop_h) $(inferior_h) $(exceptions_h) \
  $(macosx_nat_inferior_h) $(macosx_nat_excthread_h) \
  $(macosx_nat_mutils_h) $(macosx_nat_inferior_debug_h) \
  $(macosx_nat_inferior_util_h)
macosx-nat-inferior-debug.o: $(macosxsrcdir)/macosx-nat-inferior-debug.c \
  $(defs_h) $(inferior_h) $(target_h) $(symfile_h) $(symtab_h) \
  $(objfiles_h) $(gdbcmd_h) $(gdbcore_h) $(gdbthread_h) $(bfd_h) \
  $(macosx_nat_inferior_debug_h) $(macosx_nat_dyld_h) \
  $(macosx_nat_inferior_h) $(macosx_nat_mutils_h) \
  $(macosx_nat_sigthread_h) $(macosx_nat_threads_h) $(macosx_xdep_h)
macosx-nat-inferior-stubs.o: $(macosxsrcdir)/macosx-nat-inferior-stubs.c \
  $(defs_h) $(target_h) $(event_loop_h) $(macosx_nat_inferior_stubs_h)
macosx-nat-inferior-util.o: $(macosxsrcdir)/macosx-nat-inferior-util.c \
  $(defs_h) $(inferior_h) $(symfile_h) $(symtab_h) $(gdbcmd_h) \
  $(objfiles_h) $(mach_o_h) $(macosx_nat_inferior_util_h) \
  $(macosx_nat_dyld_process_h) $(macosx_nat_inferior_debug_h) \
  $(macosx_nat_dyld_info_h) $(macosx_nat_dyld_path_h) \
  $(macosx_nat_inferior_h) $(macosx_nat_mutils_h)
macosx-nat-inferior.o: $(macosxsrcdir)/macosx-nat-inferior.c $(defs_h) \
  $(top_h) $(inferior_h) $(target_h) $(symfile_h) $(symtab_h) \
  $(objfiles_h) $(gdb_h) $(gdbcmd_h) $(gdbcore_h) $(gdbthread_h) \
  $(regcache_h) $(environ_h) $(event_top_h) $(event_loop_h) $(inf_loop_h) \
  $(gdb_stat_h) $(exceptions_h) $(checkpoint_h) $(value_h) $(gdb_regex_h) \
  $(osabi_h) $(gdb_assert_h) $(objc_lang_h) $(bfd_h) $(macosx_nat_dyld_h) \
  $(macosx_nat_inferior_h) $(macosx_nat_infthread_h) \
  $(macosx_nat_inferior_debug_h) $(macosx_nat_mutils_h) \
  $(macosx_nat_excthread_h) $(macosx_nat_sigthread_h) \
  $(macosx_nat_threads_h) $(macosx_xdep_h) $(macosx_nat_h) \
  $(macosx_nat_inferior_util_h) $(macosx_nat_dyld_process_h) \
  $(macosx_nat_cfm_h) $(arm_macosx_tdep_h)
macosx-nat-info.o: $(macosxsrcdir)/macosx-nat-info.c $(defs_h) \
  $(symtab_h) $(gdbtypes_h) $(gdbcore_h) $(value_h) $(gdbcmd_h) \
  $(inferior_h) $(macosx_nat_mutils_h) $(macosx_nat_inferior_h) \
  $(macosx_nat_inferior_debug_h) $(macosx_nat_info_h)
macosx-nat-infthread.o: $(macosxsrcdir)/macosx-nat-infthread.c $(defs_h) \
  $(inferior_h) $(target_h) $(symfile_h) $(symtab_h) $(objfiles_h) \
  $(gdbcmd_h) $(gdbthread_h) $(gdbcore_h) $(macosx_nat_inferior_h) \
  $(macosx_nat_inferior_util_h) $(macosx_nat_inferior_debug_h) \
  $(macosx_nat_mutils_h) $(macosx_nat_infthread_h) \
  $(ppc_macosx_thread_status_h) $(arm_macosx_thread_status_h) $(arm_tdep_h)
macosx-nat-mutils.o: $(macosxsrcdir)/macosx-nat-mutils.c $(defs_h) \
  $(inferior_h) $(symtab_h) $(symfile_h) $(objfiles_h) $(target_h) \
  $(terminal_h) $(gdbcmd_h) $(regcache_h) $(value_h) $(exceptions_h) \
  $(cli_out_h) $(environ_h) $(gdbcore_h) $(dictionary_h) $(block_h) \
  $(objc_lang_h) $(macosx_nat_mutils_h) $(macosx_nat_inferior_h) \
  $(macosx_nat_inferior_debug_h)
macosx-nat-sigthread.o: $(macosxsrcdir)/macosx-nat-sigthread.c $(defs_h) \
  $(gdbcmd_h) $(event_loop_h) $(inferior_h) $(exceptions_h) \
  $(macosx_nat_sigthread_h) $(macosx_nat_inferior_h) $(macosx_nat_mutils_h)
macosx-nat-threads.o: $(macosxsrcdir)/macosx-nat-threads.c $(defs_h) \
  $(inferior_h) $(target_h) $(symfile_h) $(symtab_h) $(objfiles_h) \
  $(gdbcmd_h) $(gdbthread_h) $(macosx_nat_inferior_h) \
  $(macosx_nat_mutils_h) $(macosx_nat_threads_h)
macosx-nat-utils.o: $(macosxsrcdir)/macosx-nat-utils.c $(defs_h) $(top_h) \
  $(inferior_h) $(target_h) $(symfile_h) $(symtab_h) $(objfiles_h) \
  $(gdb_h) $(gdbcmd_h) $(gdbcore_h) $(gdbthread_h) $(regcache_h) \
  $(environ_h) $(event_top_h) $(event_loop_h) $(inf_loop_h) $(gdb_stat_h) \
  $(gdb_assert_h) $(exceptions_h) $(checkpoint_h) $(objc_lang_h) $(bfd_h) \
  $(macosx_nat_inferior_debug_h) $(macosx_nat_utils_h) $(macosx_nat_dyld_h)
macosx-nat-watchpoint.o: $(macosxsrcdir)/macosx-nat-watchpoint.c \
  $(defs_h) $(inferior_h) $(target_h) $(symfile_h) $(symtab_h) \
  $(objfiles_h) $(gdbcmd_h) $(gdbcore_h) $(gdbthread_h) \
  $(macosx_nat_watchpoint_h) $(macosx_nat_dyld_h) \
  $(macosx_nat_inferior_h) $(macosx_nat_mutils_h) \
  $(macosx_nat_sigthread_h) $(macosx_nat_threads_h) $(macosx_xdep_h)
macosx-nat.o: $(macosxsrcdir)/macosx-nat.c $(bfd_h) $(defs_h) \
  $(gdbcore_h) $(serial_h) $(ser_base_h) $(ser_unix_h) $(inferior_h) \
  $(objc_lang_h) $(infcall_h) $(macosx_nat_h) $(macosx_nat_dyld_h) \
  $(macosx_nat_dyld_info_h) $(macosx_nat_inferior_h) \
  $(macosx_nat_dyld_process_h)
macosx-self-backtrace.o: $(macosxsrcdir)/macosx-self-backtrace.c \
  $(macosx_self_backtrace_h)
macosx-tdep.o: $(macosxsrcdir)/macosx-tdep.c $(defs_h) $(inferior_h) \
  $(target_h) $(symfile_h) $(symtab_h) $(objfiles_h) $(gdbcmd_h) \
  $(language_h) $(block_h) $(libaout_h) $(aout_aout64_h) $(complaints_h) \
  $(mach_o_h) $(objc_lang_h) $(macosx_tdep_h) $(regcache_h) $(source_h) \
  $(completer_h) $(exceptions_h) $(gdb_assert_h) $(gdbcmd_h) $(gdbcore_h) \
  $(exec_h) $(readline_tilde_h) $(arch_utils_h) $(macosx_nat_utils_h) \
  $(x86_shared_tdep_h) $(osabi_h) $(macosx_nat_dyld_h) $(gdbarch_h) \
  $(macosx_nat_infthread_h)
macosx-xdep.o: $(macosxsrcdir)/macosx-xdep.c $(defs_h) $(inferior_h) \
  $(target_h) $(symfile_h) $(symtab_h) $(objfiles_h) $(gdbcmd_h) \
  $(regcache_h) $(xm_macosx_h) $(macosx_xdep_h)
pefread.o: $(macosxsrcdir)/pefread.c $(defs_h) $(symtab_h) $(gdbtypes_h) \
  $(breakpoint_h) $(bfd_h) $(symfile_h) $(objfiles_h) $(buildsym_h) \
  $(obstack_h) $(gdb_stabs_h) $(stabsread_h) $(gdbcmd_h) $(mach_o_h)
ppc-macosx-frameinfo.o: $(macosxsrcdir)/ppc-macosx-frameinfo.c \
  $(ppc_macosx_regs_h) $(ppc_macosx_regnums_h) $(ppc_macosx_frameinfo_h) \
  $(ppc_macosx_tdep_h) $(defs_h) $(frame_h) $(inferior_h) $(symtab_h) \
  $(target_h) $(gdbcore_h) $(symfile_h) $(objfiles_h) $(command_h) \
  $(regcache_h) $(ppc_tdep_h)
ppc-macosx-nat-exec.o: $(macosxsrcdir)/ppc-macosx-nat-exec.c $(defs_h) \
  $(frame_h) $(inferior_h) $(symtab_h) $(target_h) $(gdbcore_h) \
  $(symfile_h) $(objfiles_h) $(regcache_h) $(ppc_macosx_regs_h) \
  $(ppc_macosx_regnums_h) $(ppc_macosx_thread_status_h) \
  $(macosx_nat_mutils_h) $(macosx_nat_inferior_h)
ppc-macosx-regs.o: $(macosxsrcdir)/ppc-macosx-regs.c \
  $(ppc_macosx_regs_h) $(ppc_macosx_regnums_h) $(defs_h) $(frame_h) \
  $(inferior_h) $(symtab_h) $(target_h) $(gdbcore_h) $(symfile_h) \
  $(objfiles_h) $(regcache_h)
ppc-macosx-tdep.o: $(macosxsrcdir)/ppc-macosx-tdep.c $(defs_h) \
  $(frame_h) $(inferior_h) $(symtab_h) $(target_h) $(gdbcore_h) \
  $(symfile_h) $(objfiles_h) $(gdbcmd_h) $(arch_utils_h) $(floatformat_h) \
  $(gdbtypes_h) $(regcache_h) $(reggroups_h) $(frame_base_h) \
  $(frame_unwind_h) $(dummy_frame_h) $(gdb_assert_h) $(complaints_h) \
  $(user_regs_h) $(objfiles_h) $(libbfd_h) $(elf_bfd_h) $(dis_asm_h) \
  $(ppc_tdep_h) $(gdbarch_h) $(osabi_h) $(ppc_macosx_tdep_h) \
  $(ppc_macosx_regs_h) $(ppc_macosx_regnums_h) $(ppc_macosx_frameinfo_h)
remote-kdp.o: $(macosxsrcdir)/remote-kdp.c $(defs_h) $(value_h) \
  $(infcall_h) $(gdbarch_h) $(arch_utils_h) $(gdbcore_h) $(bfd_h) \
  $(mach_o_h) $(objfiles_h) $(inferior_h) $(gdbcmd_h) $(event_loop_h) \
  $(event_top_h) $(inf_loop_h) $(regcache_h) $(exceptions_h) $(osabi_h) \
  $(kdp_udp_h) $(kdp_transactions_h) $(remote_kdp_h)
remote-mobile.o: $(macosxsrcdir)/remote-mobile.c $(defs_h) $(target_h) \
  $(serial_h) $(ser_base_h) $(ser_unix_h)
symread.o: $(macosxsrcdir)/symread.c $(defs_h) $(symtab_h) $(gdtypes_h) \
  $(breakpoint_h) $(bfd_h) $(symfile_h) $(objfiles_h) $(buildsym_h) \
  $(obstack_h) $(gdb_stabs_h) $(stabsread_h) $(gdbcmd_h) $(complaints_h) \
  $(block_h) $(dictionary_h) $(readline_tilde_h) $(xsym_h) $(symread_h)

#
# gdb/mi/ dependencies
#
# Need to explicitly specify the compile rule as make will do nothing
# or try to compile the object file into the sub-directory.

mi-cmd-break.o: $(mi_srcdir)/mi-cmd-break.c $(defs_h) $(target_h) \
  $(mi_cmds_h) $(ui_out_h) $(mi_out_h) $(breakpoint_h) $(gdb_string_h) \
  $(mi_getopt_h) $(mi_main_h) $(gdb_events_h) $(interps_h) $(gdb_h) \
  $(gdbcmd_h) $(filenames_h) $(mi_cmd_break_h)
	$(AM_V_COMPILER)$(COMPILER) -c $(INTERNAL_CFLAGS) \
	  $(mi_srcdir)/mi-cmd-break.c
	$(POSTCOMPILE)
mi-cmd-catch.o: $(mi_srcdir)/mi-cmd-catch.c $(defs_h) $(arch_utils_h) \
  $(breakpoint_h) $(gdb_h) $(libiberty_h) $(ada_lang_h) $(mi_cmds_h) \
  $(mi_getopt_h) $(mi_cmd_break_h)
	$(AM_V_COMPILER)$(COMPILER) -c $(INTERNAL_CFLAGS) \
	  $(mi_srcdir)/mi-cmd-catch.c
	$(POSTCOMPILE)
mi-cmd-disas.o: $(mi_srcdir)/mi-cmd-disas.c $(defs_h) $(target_h) \
  $(value_h) $(mi_cmds_h) $(mi_getopt_h) $(gdb_string_h) $(ui_out_h) \
  $(disasm_h)
	$(AM_V_COMPILER)$(COMPILER) -c $(INTERNAL_CFLAGS) \
	  $(mi_srcdir)/mi-cmd-disas.c
	$(POSTCOMPILE)
mi-cmd-env.o: $(mi_srcdir)/mi-cmd-env.c $(defs_h) $(inferior_h) \
  $(value_h) $(mi_out_h) $(mi_cmds_h) $(mi_getopt_h) $(symtab_h) \
  $(target_h) $(environ_h) $(command_h) $(ui_out_h) $(top_h) \
  $(gdb_string_h) $(gdb_stat_h)
	$(AM_V_COMPILER)$(COMPILER) -c $(INTERNAL_CFLAGS) \
	  $(mi_srcdir)/mi-cmd-env.c
	$(POSTCOMPILE)
mi-cmd-file.o: $(mi_srcdir)/mi-cmd-file.c $(defs_h) $(mi_cmds_h) \
  $(mi_getopt_h) $(ui_out_h) $(symtab_h) $(source_h) $(objfiles_h) \
  $(gdbcore_h)
	$(AM_V_COMPILER)$(COMPILER) -c $(INTERNAL_CFLAGS) \
	  $(mi_srcdir)/mi-cmd-file.c
	$(POSTCOMPILE)
mi-cmd-info.o: $(mi_srcdir)/mi-cmd-info.c $(defs_h) $(osdata_h) \
  $(mi_cmds_h)
	$(AM_V_COMPILER)$(COMPILER) -c $(INTERNAL_CFLAGS) \
	  $(mi_srcdir)/mi-cmd-info.c
	$(POSTCOMPILE)
mi-cmds.o: $(mi_srcdir)/mi-cmds.c $(defs_h) $(top_h) $(mi_cmds_h) \
  $(gdb_string_h)
	$(AM_V_COMPILER)$(COMPILER) -c $(INTERNAL_CFLAGS) \
	  $(mi_srcdir)/mi-cmds.c
	$(POSTCOMPILE)
# APPLE LOCAL begin subroutine inlining:
mi-cmd-stack.o: $(mi_srcdir)/mi-cmd-stack.c $(defs_h) $(target_h) \
  $(frame_h) $(value_h) $(mi_cmds_h) $(mi_main_h) $(ui_out_h) $(varobj_h) \
  $(wrapper_h) $(interps_h) $(symtab_h) $(block_h) $(stack_h) \
  $(dictionary_h) $(gdb_string_h) $(objfiles_h) $(gdb_regex_h) \
  $(inlining_h) $(tm_i386_macosx_h) $(mi_cmd_stack_h)
	$(AM_V_COMPILER)$(COMPILER) -c $(INTERNAL_CFLAGS) \
	  $(mi_srcdir)/mi-cmd-stack.c
	$(POSTCOMPILE)
# APPLE LOCAL end subroutine inlining
mi-cmd-target.o: $(mi_srcdir)/mi-cmd-target.c $(defs_h) $(mi_cmds_h) \
  $(mi_getopt_h) $(remote_h)
	$(AM_V_COMPILER)$(COMPILER) -c $(INTERNAL_CFLAGS) \
	  $(mi_srcdir)/mi-cmd-target.c
	$(POSTCOMPILE)
mi-cmd-var.o: $(mi_srcdir)/mi-cmd-var.c $(defs_h) $(mi_cmds_h) \
  $(ui_out_h) $(mi_out_h) $(varobj_h) $(value_h) $(gdb_string_h) \
  $(frame_h) $(block_h) $(linespec_h) $(exceptions_h) $(inlining_h) \
  $(breakpoint_h)
	$(AM_V_COMPILER)$(COMPILER) -c $(INTERNAL_CFLAGS) \
	  $(mi_srcdir)/mi-cmd-var.c
	$(POSTCOMPILE)
mi-common.o: $(mi_srcdir)/mi-common.c $(defs_h) $(mi_common_h)
	$(AM_V_COMPILER)$(COMPILER) -c $(INTERNAL_CFLAGS) \
	  $(mi_srcdir)/mi-common.c
	$(POSTCOMPILE)
mi-console.o: $(mi_srcdir)/mi-console.c $(defs_h) $(mi_console_h) \
  $(gdb_string_h)
	$(AM_V_COMPILER)$(COMPILER) -c $(INTERNAL_CFLAGS) \
	  $(mi_srcdir)/mi-console.c
	$(POSTCOMPILE)
mi-getopt.o: $(mi_srcdir)/mi-getopt.c $(defs_h) $(mi_getopt_h) \
  $(gdb_string_h)
	$(AM_V_COMPILER)$(COMPILER) -c $(INTERNAL_CFLAGS) \
	  $(mi_srcdir)/mi-getopt.c
	$(POSTCOMPILE)
mi-interp.o: $(mi_srcdir)/mi-interp.c $(defs_h) $(gdb_string_h) \
  $(interps_h) $(event_top_h) $(event_loop_h) $(inferior_h) $(ui_out_h) \
  $(top_h) $(exceptions_h) $(mi_main_h) $(mi_cmds_h) $(mi_out_h) \
  $(mi_console_h) $(mi_common_h) $(inlining_h) $(gdbthread_h) $(mi_interp_h)
	$(AM_V_COMPILER)$(COMPILER) -c $(INTERNAL_CFLAGS) \
	  $(mi_srcdir)/mi-interp.c
	$(POSTCOMPILE)
# APPLE LOCAL begin subroutine inlining:
mi-main.o: $(mi_srcdir)/mi-main.c $(defs_h) $(target_h) $(inferior_h) \
  $(gdb_string_h) $(exceptions_h) $(top_h) $(gdbthread_h) $(gdbcmd_h) \
  $(mi_cmds_h) $(mi_parse_h) $(mi_getopt_h) $(mi_console_h) $(ui_out_h) \
  $(mi_out_h) $(interps_h) $(event_loop_h) $(event_top_h) $(gdbcore_h) \
  $(value_h) $(regcache_h) $(gdb_h) $(frame_h) $(wrapper_h) $(source_h) \
  $(mi_main_h) $(block_h) $(version_h) $(mi_common_h) $(inlining_h) \
  $(objc_lang_h) $(breakpoint_h)
	$(AM_V_COMPILER)$(COMPILER) -c $(INTERNAL_CFLAGS) \
	  $(mi_srcdir)/mi-main.c
	$(POSTCOMPILE)
# APPLE LOCAL end subroutine inlining
mi-out.o: $(mi_srcdir)/mi-out.c $(defs_h) $(ui_out_h) $(ui_file_h) \
  $(mi_out_h)
	$(AM_V_COMPILER)$(COMPILER) -c $(INTERNAL_CFLAGS) \
	  $(mi_srcdir)/mi-out.c
	$(POSTCOMPILE)
mi-parse.o: $(mi_srcdir)/mi-parse.c $(defs_h) $(mi_cmds_h) $(mi_parse_h) \
  $(gdb_string_h)
	$(AM_V_COMPILER)$(COMPILER) -c $(INTERNAL_CFLAGS) \
	  $(mi_srcdir)/mi-parse.c
	$(POSTCOMPILE)
mi-symbol-cmds.o: $(mi_srcdir)/mi-symbol-cmds.c $(defs_h) $(mi_cmds_h) \
  $(symtab_h) $(ui_out_h)
	$(AM_V_COMPILER)$(COMPILER) -c $(INTERNAL_CFLAGS) \
	  $(mi_srcdir)/mi-symbol-cmds.c
	$(POSTCOMPILE)

#
# rdi-share sub-directory
#
# Need to explicitly specify the compile rule as make will do nothing
# or try to compile the object file into the rdi-share directory.

rdi-share/libangsd.a:	force
	@dir=rdi-share; \
	if [ -f ./$${dir}/Makefile ]; then \
	  r=`pwd`; export r; \
	  srcroot=`cd $(srcdir); pwd`; export srcroot; \
	  (cd $${dir}; $(MAKE) $(AM_V_MFLAG) $(FLAGS_TO_PASS) all); \
	else \
	  echo "no Makefile for '$${dir}'"; \
	fi

#
# gdb/signals/ dependencies
#
# Need to explicitly specify the compile rule as make will do nothing
# or try to compile the object file into the sub-directory.

signals.o: $(srcdir)/signals/signals.c $(server_h) $(defs_h) $(target_h) \
  $(gdb_string_h)
	$(AM_V_COMPILER)$(COMPILER) -c $(INTERNAL_CFLAGS) \
	  $(srcdir)/signals/signals.c
	$(POSTCOMPILE)

#
# gdb/tui/ dependencies
#
# Need to explicitly specify the compile rule as make will do nothing
# or try to compile the object file into the sub-directory.

tui.o: $(tui_srcdir)/tui.c $(defs_h) $(gdbcmd_h) $(tui_h) $(tui_hooks_h) \
  $(tui_data_h) $(tui_layout_h) $(tui_io_h) $(tui_regs_h) $(tui_stack_h) \
  $(tui_win_h) $(tui_winsource_h) $(tui_windata_h) $(target_h) $(frame_h) \
  $(breakpoint_h) $(inferior_h) $(symtab_h) $(source_h) $(gdb_curses_h) \
  $(readline_h)
	$(AM_V_COMPILER)$(COMPILER) -c $(INTERNAL_CFLAGS) \
	  $(tui_srcdir)/tui.c
	$(POSTCOMPILE)
tui-command.o: $(tui_srcdir)/tui-command.c $(defs_h) $(tui_h) \
  $(tui_command_h) $(tui_data_h) $(tui_win_h) $(tui_io_h) $(gdb_curses_h) \
  $(gdb_string_h)
	$(AM_V_COMPILER)$(COMPILER) -c $(INTERNAL_CFLAGS) \
	  $(tui_srcdir)/tui-command.c
	$(POSTCOMPILE)
tui-data.o: $(tui_srcdir)/tui-data.c $(defs_h) $(symtab_h) $(tui_h) \
  $(tui_data_h) $(tui_wingeneral_h) $(gdb_string_h) $(gdb_curses_h)
	$(AM_V_COMPILER)$(COMPILER) -c $(INTERNAL_CFLAGS) \
	  $(tui_srcdir)/tui-data.c
	$(POSTCOMPILE)
tui-disasm.o: $(tui_srcdir)/tui-disasm.c $(defs_h) $(symtab_h) \
  $(breakpoint_h) $(frame_h) $(value_h) $(source_h) $(disasm_h) \
  $(gdb_string_h) $(tui_h) $(tui_data_h) $(tui_win_h) $(tui_layout_h) \
  $(tui_winsource_h) $(tui_stack_h) $(tui_file_h) $(gdb_curses_h)
	$(AM_V_COMPILER)$(COMPILER) -c $(INTERNAL_CFLAGS) \
	  $(tui_srcdir)/tui-disasm.c
	$(POSTCOMPILE)
tui-file.o: $(tui_srcdir)/tui-file.c $(defs_h) $(ui_file_h) $(tui_file_h) \
  $(tui_io_h) $(tui_h) $(gdb_string_h)
	$(AM_V_COMPILER)$(COMPILER) -c $(INTERNAL_CFLAGS) \
	  $(tui_srcdir)/tui-file.c
	$(POSTCOMPILE)
tui-hooks.o: $(tui_srcdir)/tui-hooks.c $(defs_h) $(symtab_h) \
  $(inferior_h) $(command_h) $(bfd_h) $(symfile_h) $(objfiles_h) \
  $(target_h) $(gdbcore_h) $(event_loop_h) $(event_top_h) $(frame_h) \
  $(breakpoint_h) $(gdb_events_h) $(ui_out_h) $(top_h) $(tui_h) \
  $(tui_hooks_h) $(tui_data_h) $(tui_layout_h) $(tui_io_h) \
  $(tui_regs_h) $(tui_win_h) $(tui_stack_h) $(tui_windata_h) \
  $(tui_winsource_h) $(gdb_curses_h) $(readline_h)
	$(AM_V_COMPILER)$(COMPILER) -c $(INTERNAL_CFLAGS) \
	  $(tui_srcdir)/tui-hooks.c
	$(POSTCOMPILE)
tui-interp.o: $(tui_srcdir)/tui-interp.c $(defs_h) $(interps_h) $(top_h) \
  $(event_top_h) $(event_loop_h) $(ui_out_h) $(cli_out_h) \
  $(tui_data_h) $(readline_h) $(tui_win_h) $(tui_h) $(tui_io_h) \
  $(exceptions_h)
	$(AM_V_COMPILER)$(COMPILER) -c $(INTERNAL_CFLAGS) \
	  $(tui_srcdir)/tui-interp.c
	$(POSTCOMPILE)
tui-io.o: $(tui_srcdir)/tui-io.c $(defs_h) $(target_h) $(event_loop_h) \
  $(event_top_h) $(command_h) $(top_h) $(tui_h) $(tui_data_h) $(tui_io_h) \
  $(tui_command_h) $(tui_win_h) $(tui_wingeneral_h) $(tui_file_h) \
  $(ui_out_h) $(cli_out_h) $(gdb_curses_h) $(readline_h)
	$(AM_V_COMPILER)$(COMPILER) -c $(INTERNAL_CFLAGS) \
	  $(tui_srcdir)/tui-io.c
	$(POSTCOMPILE)
tui-layout.o: $(tui_srcdir)/tui-layout.c $(defs_h) $(command_h) \
  $(symtab_h) $(frame_h) $(source_h) $(tui_h) $(tui_data_h) \
  $(tui_layout_h) $(tui_windata_h) $(tui_wingeneral_h) $(tui_stack_h) \
  $(tui_regs_h) $(tui_win_h) $(tui_winsource_h) $(tui_disasm_h) \
  $(gdb_string_h) $(gdb_curses_h)
	$(AM_V_COMPILER)$(COMPILER) -c $(INTERNAL_CFLAGS) \
	  $(tui_srcdir)/tui-layout.c
	$(POSTCOMPILE)
tui-main.o: $(tui_srcdir)/tui-main.c $(defs_h) $(main_h) $(gdb_string_h) \
  $(interps_h)
	$(AM_V_COMPILER)$(COMPILER) -c $(INTERNAL_CFLAGS) \
	  $(tui_srcdir)/tui-main.c
	$(POSTCOMPILE)
tui-out.o: $(tui_srcdir)/tui-out.c $(defs_h) $(ui_out_h) $(tui_h) \
  $(gdb_string_h) $(gdb_assert_h)
	$(AM_V_COMPILER)$(COMPILER) -c $(INTERNAL_CFLAGS) \
	  $(tui_srcdir)/tui-out.c
	$(POSTCOMPILE)
tui-regs.o: $(tui_srcdir)/tui-regs.c $(defs_h) $(tui_h) $(tui_data_h) \
  $(symtab_h) $(gdbtypes_h) $(gdbcmd_h) $(frame_h) $(regcache_h) \
  $(inferior_h) $(target_h) $(gdb_string_h) $(tui_layout_h) $(tui_regs_h) \
  $(tui_win_h) $(tui_windata_h) $(tui_wingeneral_h) $(tui_file_h) \
  $(reggroups_h) $(gdb_curses_h)
	$(AM_V_COMPILER)$(COMPILER) -c $(INTERNAL_CFLAGS) \
	  $(tui_srcdir)/tui-regs.c
	$(POSTCOMPILE)
tui-source.o: $(tui_srcdir)/tui-source.c $(defs_h) $(symtab_h) $(frame_h) \
  $(breakpoint_h) $(source_h) $(tui_h) $(tui_data_h) $(tui_stack_h) \
  $(tui_winsource_h) $(tui_source_h) $(gdb_string_h) $(gdb_curses_h)
	$(AM_V_COMPILER)$(COMPILER) -c $(INTERNAL_CFLAGS) \
	  $(tui_srcdir)/tui-source.c
	$(POSTCOMPILE)
tui-stack.o: $(tui_srcdir)/tui-stack.c $(defs_h) $(symtab_h) \
  $(breakpoint_h) $(frame_h) $(command_h) $(inferior_h) $(target_h) \
  $(top_h) $(gdb_string_h) $(tui_h) $(tui_data_h) $(tui_stack_h) \
  $(tui_wingeneral_h) $(tui_source_h) $(tui_winsource_h) $(tui_file_h) \
  $(gdb_curses_h)
	$(AM_V_COMPILER)$(COMPILER) -c $(INTERNAL_CFLAGS) \
	  $(tui_srcdir)/tui-stack.c
	$(POSTCOMPILE)
tui-win.o: $(tui_srcdir)/tui-win.c $(defs_h) $(command_h) $(symtab_h) \
  $(breakpoint_h) $(frame_h) $(cli_cmds_h) $(top_h) $(source_h) \
  $(tui_h) $(tui_data_h) $(tui_win_h) $(tui_wingeneral_h) $(tui_stack_h) \
  $(tui_regs_h) $(tui_disasm_h) $(tui_source_h) $(tui_winsource_h) \
  $(tui_windata_h) $(gdb_curses_h) $(gdb_string_h) $(readline_h)
	$(AM_V_COMPILER)$(COMPILER) -c $(INTERNAL_CFLAGS) \
	  $(tui_srcdir)/tui-win.c
	$(POSTCOMPILE)
tui-windata.o: $(tui_srcdir)/tui-windata.c $(defs_h) $(tui_h) \
  $(tui_data_h) $(tui_wingeneral_h) $(tui_regs_h) $(gdb_string_h) \
  $(gdb_curses_h)
	$(AM_V_COMPILER)$(COMPILER) -c $(INTERNAL_CFLAGS) \
	  $(tui_srcdir)/tui-windata.c
	$(POSTCOMPILE)
tui-wingeneral.o: $(tui_srcdir)/tui-wingeneral.c $(defs_h) $(tui_h) \
  $(tui_data_h) $(tui_wingeneral_h) $(tui_win_h) $(gdb_curses_h)
	$(AM_V_COMPILER)$(COMPILER) -c $(INTERNAL_CFLAGS) \
	  $(tui_srcdir)/tui-wingeneral.c
	$(POSTCOMPILE)
tui-winsource.o: $(tui_srcdir)/tui-winsource.c $(defs_h) $(symtab_h) \
  $(frame_h) $(breakpoint_h) $(value_h) $(source_h) $(tui_h) \
  $(tui_data_h) $(tui_stack_h) $(tui_win_h) $(tui_wingeneral_h) \
  $(tui_winsource_h) $(tui_source_h) $(tui_disasm_h) $(gdb_string_h) \
  $(gdb_curses_h)
	$(AM_V_COMPILER)$(COMPILER) -c $(INTERNAL_CFLAGS) \
	  $(tui_srcdir)/tui-winsource.c
	$(POSTCOMPILE)

### end of the gdb Makefile.in.

NSLIBTOOL = cc -dynamiclib

SYSTEM_FRAMEWORK = -framework System

FRAMEWORK = gdb
FRAMEWORK_PREFIX = 
FRAMEWORK_SUFFIX = 
FRAMEWORK_VERSION_SUFFIX = 
FRAMEWORK_VERSION = A
FRAMEWORK_OFILES = $(LIBGDB_OBS)
FRAMEWORK_LIB = -F../bfd -framework bfd -F../opcodes -framework opcodes -F../libiberty -framework liberty -F../mmalloc -framework mmalloc $(SYSTEM_FRAMEWORK)

stamp-framework-headers:
	$(RM) -f $(AM_V_v) stamp-framework stamp-framework-headers
	$(RM) -rf $(AM_V_v) $(FRAMEWORK).framework
	$(MKDIR_P) $(AM_V_v) $(FRAMEWORK).framework/Versions/$(FRAMEWORK_VERSION)/Headers
	$(MKDIR_P) $(AM_V_v) $(FRAMEWORK).framework/Versions/$(FRAMEWORK_VERSION)/PrivateHeaders
	$(LN_S) $(AM_V_v) Versions/Current/Headers $(FRAMEWORK).framework/Headers
	$(LN_S) $(AM_V_v) Versions/Current/PrivateHeaders $(FRAMEWORK).framework/PrivateHeaders
	$(LN_S) $(AM_V_v) A $(FRAMEWORK).framework/Versions/Current
	cp -p $(AM_V_v) $(srcdir)/*.h $(FRAMEWORK).framework/Versions/Current/Headers/
	cp -p $(AM_V_v) *.h $(FRAMEWORK).framework/Versions/Current/Headers/
	mkdir $(AM_V_v) $(FRAMEWORK).framework/Versions/Current/Headers/mi
	cp -p $(AM_V_v) $(mi_srcdir)/*.h $(FRAMEWORK).framework/Versions/Current/Headers/mi/
	mkdir $(AM_V_v) $(FRAMEWORK).framework/Versions/Current/Headers/cli
	cp -p $(AM_V_v) $(cli_srcdir)/*.h $(FRAMEWORK).framework/Versions/Current/Headers/cli/

stamp-framework:
	$(MAKE) $(AM_V_MFLAG) $(FRAMEWORK_OFILES)
	$(RM) -f $(AM_V_v) stamp-framework-headers
	$(MAKE) $(AM_V_MFLAG) stamp-framework-headers
	$(MKDIR_P) $(AM_V_v) $(FRAMEWORK).framework/Versions/$(FRAMEWORK_VERSION)/Resources
	$(LN_S) $(AM_V_v) Versions/Current/Resources $(FRAMEWORK).framework/Resources
	$(MKDIR_P) $(AM_V_v) $(FRAMEWORK).framework/Versions/Current/Resources/English.lproj
	set -ex; \
	if [ "x$(FRAMEWORK_SUFFIX)" != "x" ]; then \
	    $(NSLIBTOOL) -arch $(HOST_ARCHITECTURE) -compatibility_version 1 -current_version 1 -install_name /System/Library/PrivateFrameworks/$(FRAMEWORK).framework/Versions/$(FRAMEWORK_VERSION)/$(FRAMEWORK_PREFIX)$(FRAMEWORK)$(FRAMEWORK_VERSION_SUFFIX) -o $(FRAMEWORK).framework/Versions/Current/$(FRAMEWORK_PREFIX)$(FRAMEWORK)$(FRAMEWORK_VERSION_SUFFIX) $(FRAMEWORK_OFILES) $(FRAMEWORK_LIB); \
	    $(LN_S) $(AM_V_v) $(FRAMEWORK_PREFIX)$(FRAMEWORK)$(FRAMEWORK_VERSION_SUFFIX) $(FRAMEWORK).framework/Versions/Current/$(FRAMEWORK_PREFIX)$(FRAMEWORK)$(FRAMEWORK_SUFFIX); \
	    $(LN_S) $(AM_V_v) Versions/Current/$(FRAMEWORK_PREFIX)$(FRAMEWORK)$(FRAMEWORK_VERSION_SUFFIX) $(FRAMEWORK).framework/$(FRAMEWORK_PREFIX)$(FRAMEWORK)$(FRAMEWORK_VERSION_SUFFIX); \
	    $(LN_S) $(AM_V_v) Versions/Current/$(FRAMEWORK_PREFIX)$(FRAMEWORK)$(FRAMEWORK_SUFFIX) $(FRAMEWORK).framework/$(FRAMEWORK_PREFIX)$(FRAMEWORK)$(FRAMEWORK_SUFFIX); \
	    $(LN_S) $(AM_V_v) $(FRAMEWORK_PREFIX)$(FRAMEWORK)$(FRAMEWORK_SUFFIX) $(FRAMEWORK).framework/$(FRAMEWORK); \
	else \
	    $(NSLIBTOOL) -arch $(HOST_ARCHITECTURE)  -compatibility_version 1 -current_version 1 -install_name /System/Library/PrivateFrameworks/$(FRAMEWORK).framework/Versions/$(FRAMEWORK_VERSION)/$(FRAMEWORK_PREFIX)$(FRAMEWORK) -o $(FRAMEWORK).framework/Versions/Current/$(FRAMEWORK_PREFIX)$(FRAMEWORK) $(FRAMEWORK_OFILES) $(FRAMEWORK_LIB); \
	    $(LN_S) $(AM_V_v) Versions/Current/$(FRAMEWORK_PREFIX)$(FRAMEWORK) $(FRAMEWORK).framework/$(FRAMEWORK_PREFIX)$(FRAMEWORK); \
	fi
	touch stamp-framework

@ifGNUmake@-include Makefile.deps
@ifGNUmake@ 
@ifGNUmake@Makefile.deps: $(patsubst %.o, %.d, $(filter %.o, $(OBS) $(TSOBS) $(ADD_DEPS) $(CDEPS) init.o))
@ifGNUmake@	md -o Makefile.deps $^ || touch $@

## Stuff for old, Mac-specific files:
MAC_CC = gcc-4.2
MAC_CFLAGS = -ggdb -O1 -m32 -fpascal-strings -faltivec -fasm-blocks
MAC_DEFS = -DWITH_CFM=1 -DTARGET_RT_MAC_CFM=1 -DTARGET_CPU_68K=1 \
  -DTARGET_OS_MAC=1 -D__MACOS_CLASSIC__=1 -DOLDROUTINENAMES=1 \
  -DUSE_PTHREADS=1 -D_DARWIN_UNLIMITED_STREAMS -DMI_OUT=1 -DHAVE_CONFIG_H \
  -D__MigTypeCheck=1
##FIXME: make configurable:
MAC_SDKROOT = -iwithsysroot /Developer/SDKs/MacOSX10.4u.sdk
MAC_INCLUDES = ${acl_cv_wp}-I./macosx ${acl_cv_wp}-I. ${acl_cv_wp}-I./config \
  ${acl_cv_wp}-I./../include/mpw \
  ${acl_cv_wp}-I./../include/mpw/CIncludes-needed \
  ${acl_cv_wp}-I./../include/opcode ${acl_cv_wp}-I./../readline/.. \
  ${acl_cv_wp}-I../bfd ${acl_cv_wp}-I./../bfd ${acl_cv_wp}-I./../include \
  ${acl_cv_wp}-I../intl ${acl_cv_wp}-I./../intl \
  ${acl_cv_wp}-I/Developer/Headers/FlatCarbon \
  ${acl_cv_wp}-I/Developer/usr/local/include $(MAC_SDKROOT)
MAC_WARNINGS = -Wno-deprecated-declarations -Wno-four-char-constants \
  -Wno-multichar -Wno-system-headers -Wimplicit -Wmain -Wparentheses \
  -Wmissing-include-dirs -Wdeclaration-after-statement -Wlong-long \
  -Winvalid-pch -Wunknown-pragmas -Wtrigraphs -Wcomment -Wnewline-eof \
  -Wextra-tokens -Wold-style-definition -Wshorten-64-to-32 \
  -Wstrict-prototypes -Wmissing-declarations -Wmissing-prototypes \
  -Wreturn-type -Wswitch -Wunused-label -Wshadow @MAINT@ -ansi # -pedantic
### ('-Wno-#warnings' has to stay separate because of the quoting required)

mac-nat.o: $(srcdir)/nat/mac-nat.c $(defs_h) $(frame_h) $(inferior_h)
	$(AM_V_CC)$(MAC_CC) -c $(MAC_CFLAGS) $(MAC_DEFS) $(MAC_INCLUDES) \
	  $(MAC_WARNINGS) '-Wno-#warnings' nat/mac-nat.c

mac-xdep.o: $(srcdir)/mac-xdep.c $(defs_h) $(srcdir)/config/xm-mpw.h
	$(AM_V_CC)$(MAC_CC) -c $(MAC_CFLAGS) $(MAC_DEFS) $(MAC_INCLUDES) \
	  $(MAC_WARNINGS) '-Wno-#warnings' mac-xdep.c

# AM_V_REZFLAG can be "-progress" for more verbose output:
mac-gdb.rsrc: CodeFragmentTypes.r mac-gdb.r SysTypes.r Types.r
	$(AM_V_GEN)$(REZ) -o $@ $(C_ARCHFLAGS) -d Macgdb \
	  $(AM_V_REZFLAG) -d VERSION_STRING="\"$(PACKAGE) $(VERSION)\"" \
	  CodeFragmentTypes.r mac-gdb.r SysTypes.r Types.r 2>&1

# This rule codesigns gdb. To use it you have to make a Certificate called
# "gdb_codesign" with codesigning authority, and set the codeSign Trust
# policy to always allow. Then you can run this built gdb on your system
# without having to turn off the taskgated daemon.

codesign-gdb: gdb$(EXEEXT) $(CONFIG_ALL)
	codesign --keychain ~/Library/Keychains/login.keychain -s gdb_codesign gdb$(EXEEXT)
.PHONY: codesign-gdb

# DO NOT DELETE
