# Copyright (C) 1992 Free Software Foundation, Inc.
# This file is part of the GNU C Library.

# The GNU C Library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Library General Public License as
# published by the Free Software Foundation; either version 2 of the
# License, or (at your option) any later version.

# The GNU C Library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Library General Public License for more details.

# You should have received a copy of the GNU Library General Public
# License along with the GNU C Library; see the file COPYING.LIB.
# If not, write to:
#  The Free Software Foundation, Inc.
#  59 Temple Place - Suite 330
#  Boston, MA 02111-1307, USA.

#
# Makefile for mmalloc directory
#

ACLOCAL_AMFLAGS = -I m4
AUTOMAKE_OPTIONS = no-dependencies

# Directory containing source files. Do NOT 'clean up' the spacing,
# this exact string is matched for by the "configure" script.

VPATH = @srcdir@
srcdir = @srcdir@
builddir = @builddir@

prefix =	@prefix@
exec_prefix =	@exec_prefix@

bindir =	@bindir@
libdir =	@libdir@

datadir =	@datadir@
mandir =	@mandir@
man1dir =	$(mandir)/man1
man2dir =	$(mandir)/man2
man3dir =	$(mandir)/man3
man4dir =	$(mandir)/man4
man5dir =	$(mandir)/man5
man6dir =	$(mandir)/man6
man7dir =	$(mandir)/man7
man8dir =	$(mandir)/man8
man9dir =	$(mandir)/man9
infodir =	@infodir@
includedir =	@includedir@
datarootdir =   @datarootdir@

SHELL =		@SHELL@

INSTALL =	@INSTALL@
INSTALL_PROGRAM = @INSTALL_PROGRAM@
INSTALL_DATA =	@INSTALL_DATA@
RUN_MKINSTALLDIRS = $(SHELL) $(srcdir)/../mkinstalldirs

HOST_ARCHITECTURE = @HOST_ARCHITECTURE@
TARGET_ARCHITECTURE = @TARGET_ARCHITECTURE@

AR =		@AR@
AR_FLAGS =	qv
CC =            @CC@
CXX =           @CXX@
CPP =           @CPP@
CPPFLAGS =      @CPPFLAGS@
CXXCPP =        @CXXCPP@
C_ARCHFLAGS =	-arch $(HOST_ARCHITECTURE)
C_NOWARNFLAGS = -Wno-unused -Wno-unused-parameter
OPT_WFLAGS =    -O1 -Wuninitialized @MAINT@ -Winit-self
ALIAS_WFLAGS =  -fstrict-aliasing -Wstrict-aliasing @MAINT@ $(OPT_WFLAGS)
SHRD_WFLAGS =   -Wall -Wextra -Wundef -Wwrite-strings $(ALIAS_WFLAGS)
PROTO_WFLAGS =  -Wstrict-prototypes -Wmissing-prototypes -Wconversion
PEDCWARNFLAGS = -Wdeclaration-after-statement @MAINT@ -ansi -pedantic
ANSI_WFLAGS =   $(PROTO_WFLAGS) -Wold-style-definition $(PEDCWARNFLAGS)
C_WARNFLAGS =   $(SHRD_WFLAGS) $(ANSI_WFLAGS) -Wimplicit -Wc++-compat
C_ALLWFLAGS =   $(C_WARNFLAGS) @MAINTAINER_MODE_FALSE@ $(C_NOWARNFLAGS)
CFLAGS =	-ggdb $(C_ALLWFLAGS) $(C_ARCHFLAGS)
CXX_ARCHFLAGS = -arch $(HOST_ARCHITECTURE)
CXX_SWFLAGS =   -Wsign-compare -Wsign-promo @MAINT@ -Wconversion
CXX_WARNFLAGS = $(SHRD_WFLAGS) -Wabi -Weffc++ $(CXX_SWFLAGS) -Wformat=2
CXX_XFLAGS =    -fno-exceptions -fno-use-cxa-atexit # -fconserve-space
CXX_SFLAGS =    -fcheck-new -fno-rtti @MAINT@ $(CXX_XFLAGS)
CXXFLAGS =      -ggdb $(CXX_SFLAGS) $(CXX_WARNFLAGS) $(CXX_ARCHFLAGS)
FGREP = 	@FGREP@
LDFLAGS =       @LDFLAGS@
LIBS =          @LIBS@
LN_S = 		@LN_S@
MAKEINFO =	makeinfo
MKDIR_P =	@MKDIR_P@
RANLIB =	@RANLIB@
RM =		rm

NSLIBTOOL =	cc -dynamiclib

CLANG_ANALYZER = @CLANG_ANALYZER@

analysisdir = $(builddir)/clang_static_analysis

# where to actually find makeinfo:
CONFIGURED_MAKEINFO = @MAKEINFO@

SET_TEXINPUTS = TEXINPUTS=${TEXIDIR}:.:$(srcdir):$(READLINE_DIR):$${TEXINPUTS}

# Files which should be generated via 'info' and installed by
# 'install-info'
INFO_DEPS = mmalloc.info

# The TeX formatter (TODO: subst via configure check?)
TEX = tex
# compare against this for now:
OTHER_TEX = @CONFIGURED_TEX@

PAGECHECK_SRC =	@PAGECHECK_SRC@
PAGECHECK_OBJ =	@PAGECHECK_OBJ@

TARGETLIB =	libmmalloc.a

CFILES =	mcalloc.c mfree.c mmalloc.c mmcheck.c mmemalign.c \
		mmstats.c mmtrace.c mrealloc.c mvalloc.c attach.c \
		detach.c keys.c mmap-sup.c malloc-sup.c $(PAGECHECK_SRC) \
		check-sup.c sbrk-sup.c

CXXFILES = 	mmallocplusplus.cp

HFILES =	mmalloc.h

OFILES =	mcalloc.o mfree.o mmalloc.o mmcheck.o mmemalign.o \
		mmstats.o mmtrace.o mrealloc.o mvalloc.o attach.o \
		detach.o keys.o mmap-sup.o malloc-sup.o $(PAGECHECK_OBJ) \
		check-sup.o sbrk-sup.o mmallocplusplus.o

ALL_PLISTS =	mcalloc.plist mfree.plist mmalloc.plist mmcheck.plist \
		mmemalign.plist mmstats.plist mmtrace.plist \
		mrealloc.plist mvalloc.plist attach.plist detach.plist \
	 	keys.plist mmap-sup.plist malloc-sup.plist \
		check-sup.plist sbrk-sup.plist pagecheck-sup.plist

DEFS =		@DEFS@
INCDIR = 	$(srcdir)/../include

RUN_CLANG_ANALYZER = $(CLANG_ANALYZER) $(DEFS) $(CPPFLAGS) $(CFLAGS) \
	-I. -I$(INCDIR) --analyze

# The current default is to build a single object module with all the
# mmalloc functions. To build a more traditional library, flip this macro
# definition.
TARGETOBJS =	$(OFILES)

default: all @MAINT@ $(TARGETOBJS)
.PHONY: default

SUFFIXES = .c .cp .o .plist

.SUFFIXES:
.SUFFIXES: .c .cp .o .plist

.c.o:
	$(CC) -c $(CFLAGS) $(DEFS) -I. -I$(INCDIR) $<

.c.plist:
	@if test ! -d $(analysisdir); then $(MKDIR_P) $(analysisdir); fi
	$(RUN_CLANG_ANALYZER) -o $(analysisdir)/$@ $<

.cp.plist:
	@if test ! -d $(analysisdir); then $(MKDIR_P) $(analysisdir); fi
	$(RUN_CLANG_ANALYZER) -x c++ -o $(analysisdir)/$@ $<

.cp.o:
	$(CXX) -c $(CXXFLAGS) $(DEFS) -I. -I$(INCDIR) $<

mmallocplusplus.o: mmallocplusplus.cp
	$(CXX) -o $@ -c $(CXXFLAGS) $(DEFS) -I. -I$(INCDIR) $<

# Do we want/need any config overrides?
#	 

STAGESTUFF =	$(TARGETLIB) *.o

all: $(TARGETLIB)
	@if test -n "$(TARGETLIB)" && test -r "$(TARGETLIB)"; then \
	  stat $(TARGETLIB); \
	fi

info: $(INFO_DEPS)
dvi: mmalloc.dvi
clean-info:
installcheck:

mmalloc.info: mmalloc.texi
	$(MAKEINFO) -I $(srcdir) -o ./mmalloc.info mmalloc.texi

# This file does NOT need texindex currently.
mmalloc.dvi: mmalloc.texi
	$(SET_TEXINPUTS) $(TEX) mmalloc.texi
	rm -fv mmalloc.?? mmalloc.??s mmalloc.log mmalloc.aux mmalloc.toc

install-info: info
	$(RUN_MKINSTALLDIRS) $(DESTDIR)$(infodir)
	@list='$(INFO_DEPS)'; \
	for file in $${list}; do \
	  if test -f $${file}; then d=.; else d=$(srcdir); fi; \
	  for ifile in `cd $${d} && echo $${file} $$file-[0-9] $$file-[0-9][0-9]`; do \
	    if test -f $${d}/$${ifile}; then \
	      echo " $(INSTALL_DATA) $${d}/$${ifile} $(DESTDIR)$(infodir)/$${ifile}"; \
	      $(INSTALL_DATA) $${d}/$${ifile} $(DESTDIR)$(infodir)/$${ifile}; \
	    else echo "nothing to do for $${ifile}"; fi; \
	  done; \
	done
	$(POST_INSTALL)
	@if $(SHELL) -c 'install-info --version | $(SED) 1q | $(FGREP) -s -v -i debian' >/dev/null 2>&1; then \
	  list='$(INFO_DEPS)'; \
	  for file in $${list}; do \
	    echo " install-info --info-dir=$(DESTDIR)$(infodir) $(DESTDIR)$(infodir)/$${file}";\
	    install-info --info-dir=$(DESTDIR)$(infodir) $(DESTDIR)$(infodir)/$${file} || echo "...or not";\
	  done; \
	else echo "not using your install-info"; fi

uninstall-info:
	$(PRE_UNINSTALL)
	@if $(SHELL) -c 'install-info --version | $(SED) 1q | $(FGREP) -s -v -i debian' >/dev/null 2>&1; then \
	  ii=yes; \
	else ii=""; fi; \
	list='$(INFO_DEPS)'; \
	for file in $${list}; do \
	  test -z "$${ii}" \
	    || install-info --info-dir=$(DESTDIR)$(infodir) --remove $${file}; \
	done
	$(NORMAL_UNINSTALL)
	list='$(INFO_DEPS)'; \
	for file in $${list}; do \
	  (cd $(DESTDIR)$(infodir) && rm -fv $${file} $$file-[0-9] $$file-[0-9][0-9]); \
	done

# FIXME: where did the source file test1.c go?
check: check-local @MAINT@ libmmalloc.a # $(srcdir)/test1.c
#	$(CC) -g $(srcdir)/test1.c libmmalloc.a
# This loses for Canadian cross (building mmalloc with a cross-compiler).
# There is probably some dejagnu-ish solution (such as what we are doing
# for gdb, perhaps).
#	./a.out

## using dependencies for the plists could go wrong, so call them as part
## of the rule instead:
check-local: config.h @MAINT@ all
	$(MKDIR_P) $(analysisdir)
	$(MAKE) $(ALL_PLISTS)
.PHONY: check-local

# APPLE LOCAL begin framework building:
SYSTEM_FRAMEWORK = -framework System -lSystem

FRAMEWORK = mmalloc
FRAMEWORK_ADDRESS = 0x0
FRAMEWORK_PREFIX =
FRAMEWORK_SUFFIX =
FRAMEWORK_VERSION_SUFFIX =
FRAMEWORK_VERSION = A
FRAMEWORK_OFILES = $(TARGETOBJS)
FRAMEWORK_LIB = $(SYSTEM_FRAMEWORK)

stamp-framework-headers:
	$(RM) -fv stamp-framework stamp-framework-headers
	$(RM) -rfv $(FRAMEWORK).framework
	$(MKDIR_P) -v $(FRAMEWORK).framework/Versions/$(FRAMEWORK_VERSION)/Headers
	$(MKDIR_P) -v $(FRAMEWORK).framework/Versions/$(FRAMEWORK_VERSION)/PrivateHeaders
	$(LN_S) -v Versions/Current/Headers $(FRAMEWORK).framework/Headers
	$(LN_S) -v Versions/Current/PrivateHeaders $(FRAMEWORK).framework/PrivateHeaders
	$(LN_S) -v A $(FRAMEWORK).framework/Versions/Current
	cp -pv $(srcdir)/*.h $(FRAMEWORK).framework/Versions/Current/Headers/
	cp -pv *.h $(FRAMEWORK).framework/Versions/Current/Headers/
	echo "stamp" > stamp-framework-headers || touch stamp-framework-headers
	cp -pvf stamp-framework-headers $(FRAMEWORK).framework/PrivateHeaders

stamp-framework: $(FRAMEWORK_OFILES)
	$(RM) -fv stamp-framework-headers
	$(MAKE) stamp-framework-headers
	$(MKDIR_P) -v $(FRAMEWORK).framework/Versions/$(FRAMEWORK_VERSION)/Resources
	$(LN_S) -v Versions/Current/Resources $(FRAMEWORK).framework/Resources
	$(MKDIR_P) -v $(FRAMEWORK).framework/Versions/Current/Resources/English.lproj
	cp -pv COPYING.LIB $(FRAMEWORK).framework/Versions/Current/Resources/English.lproj
	set -ex; \
	if [ "$(FRAMEWORK_SUFFIX)" != "" ]; then \
	    test -n "$(FRAMEWORK_SUFFIX)"; \
	    $(NSLIBTOOL) -arch $(HOST_ARCHITECTURE) -seg1addr $(FRAMEWORK_ADDRESS) -compatibility_version 1 -current_version 1 -install_name /System/Library/PrivateFrameworks/$(FRAMEWORK).framework/Versions/$(FRAMEWORK_VERSION)/$(FRAMEWORK_PREFIX)$(FRAMEWORK)$(FRAMEWORK_VERSION_SUFFIX) -o $(FRAMEWORK).framework/Versions/Current/$(FRAMEWORK_PREFIX)$(FRAMEWORK)$(FRAMEWORK_VERSION_SUFFIX) $(FRAMEWORK_OFILES) $(FRAMEWORK_LIB); \
	    $(LN_S) -v $(FRAMEWORK_PREFIX)$(FRAMEWORK)$(FRAMEWORK_VERSION_SUFFIX) $(FRAMEWORK).framework/Versions/Current/$(FRAMEWORK_PREFIX)$(FRAMEWORK)$(FRAMEWORK_SUFFIX); \
	    $(LN_S) -v Versions/Current/$(FRAMEWORK_PREFIX)$(FRAMEWORK)$(FRAMEWORK_VERSION_SUFFIX) $(FRAMEWORK).framework/$(FRAMEWORK_PREFIX)$(FRAMEWORK)$(FRAMEWORK_VERSION_SUFFIX); \
	    $(LN_S) -v Versions/Current/$(FRAMEWORK_PREFIX)$(FRAMEWORK)$(FRAMEWORK_SUFFIX) $(FRAMEWORK).framework/$(FRAMEWORK_PREFIX)$(FRAMEWORK)$(FRAMEWORK_SUFFIX); \
	    $(LN_S) -v $(FRAMEWORK_PREFIX)$(FRAMEWORK)$(FRAMEWORK_SUFFIX) $(FRAMEWORK).framework/$(FRAMEWORK); \
	else \
	    $(NSLIBTOOL) -arch $(HOST_ARCHITECTURE) -seg1addr $(FRAMEWORK_ADDRESS) -compatibility_version 1 -current_version 1 -install_name /System/Library/PrivateFrameworks/$(FRAMEWORK).framework/Versions/$(FRAMEWORK_VERSION)/$(FRAMEWORK_PREFIX)$(FRAMEWORK) -o $(FRAMEWORK).framework/Versions/Current/$(FRAMEWORK_PREFIX)$(FRAMEWORK) $(FRAMEWORK_OFILES) $(FRAMEWORK_LIB); \
	    $(LN_S) -v Versions/Current/$(FRAMEWORK_PREFIX)$(FRAMEWORK) $(FRAMEWORK).framework/$(FRAMEWORK_PREFIX)$(FRAMEWORK); \
	fi
	touch stamp-framework
# APPLE LOCAL end framework building.

install:	all install-info
		$(RUN_MKINSTALLDIRS) $(DESTDIR)$(libdir)
		$(INSTALL_DATA) $(TARGETLIB) $(DESTDIR)$(libdir)/$(TARGETLIB)n
		$(RANLIB) $(DESTDIR)$(libdir)/$(TARGETLIB)n
		mv -fv $(DESTDIR)$(libdir)/$(TARGETLIB)n $(DESTDIR)$(libdir)/$(TARGETLIB)

uninstall:	uninstall-info

$(TARGETLIB):	$(TARGETOBJS)
		$(RM) -rfv $@
		$(AR) $(AR_FLAGS) $@ $(TARGETOBJS)
		$(RANLIB) $@

$(OFILES) :	$(CFILES) $(CXXFILES) $(HFILES) Makefile

mm.o:		$(HFILES) $(CFILES) $(CXXFILES)
		$(CC) -c $(CFLAGS) $(DEFS) -I. -I$(INCDIR) $(srcdir)/mm.c

.always.:
# Do nothing.

.PHONY: all etags tags ls stage1 stage2 stage3 stage4 .always.

stage1:		force
		-mkdir -v stage1
		-mv -fv $(STAGESTUFF) stage1

stage2:		force
		-mkdir -v stage2
		-mv -fv $(STAGESTUFF) stage2

stage3:		force
		-mkdir -v stage3
		-mv -fv $(STAGESTUFF) stage3

stage4:		force
		-mkdir -v stage4
		-mv -fv $(STAGESTUFF) stage4

against=stage2

comparison:	force
		for i in *.o; do cmp $${i} $(against)/$${i} || exit 1; done

de-stage1:	force
		-(cd stage1 ; mv -fv * ..)
		-rmdir stage1

de-stage2:	force
		-(cd stage2 ; mv -fv * ..)
		-rmdir stage2

de-stage3:	force
		-(cd stage3 ; mv -fv * ..)
		-rmdir stage3

de-stage4:	force
		-(cd stage4 ; mv -fv * ..)
		-rmdir stage4

.PHONY: comparison de-stage1 de-stage2 de-stage3 de-stage4

etags tags:	TAGS

TAGS:		$(CFILES) $(CXXFILES)
	etags `for i in $(HFILES) $(CFILES) $(CXXFILES); do echo $(srcdir)/$${i}; done`

ls:
		@echo Makefile $(HFILES) $(CFILES) $(CXXFILES)

# Need to deal with profiled libraries, too.

.PHONY: mostlyclean clean distclean maintainer-clean realclean

# 'rm -f' gets the '-v' flag here when the files that it removes can vary:
mostlyclean clean:
		rm -fv *.a *.o core errs *~ \#* TAGS *.E a.out errors 

distclean:	clean 
		rm -f config.cache config.log config.status
		rm -f Makefile depend
		rm -frv autom4te.cache || rmdir autom4te.cache
		-rm -f .DS_Store
		rm -fv mmalloc.?? mmalloc.??s mmalloc.log mmalloc.aux mmalloc.toc

maintainer-clean realclean: distclean clean
		@echo "This command is intended for maintainers to use;"
		@echo "it deletes files that need special tools to regen"
		rm -f mmalloc.info mmalloc.dvi
		rm -f autoscan.log

force:

Makefile:	Makefile.in config.status
		$(SHELL) config.status

config.status:	configure
		$(SHELL) config.status --recheck

# manually-specified dependencies:
attach.o: attach.c mmprivate.h config.h mmalloc.h
check-sup.o: check-sup.c mmprivate.h config.h mmalloc.h
detach.o: detach.c mmprivate.h config.h mmalloc.h
keys.o: keys.c mmprivate.h config.h mmalloc.h
malloc-sup.o: malloc-sup.c mmprivate.h config.h mmalloc.h
mcalloc.o: mcalloc.c mmprivate.h config.h mmalloc.h
mfree.o: mfree.c mmprivate.h config.h mmalloc.h
mmalloc.o: mmalloc.c mmprivate.h config.h mmalloc.h
mmap-sup.o: mmap-sup.c config.h mmprivate.h mmalloc.h
mmcheck.o: mmcheck.c mmprivate.h config.h mmalloc.h
mmemalign.o: mmemalign.c mmprivate.h config.h mmalloc.h
mmstats.o: mmstats.c mmprivate.h config.h mmalloc.h
mmtrace.o: mmtrace.c config.h mmprivate.h mmalloc.h
mrealloc.o: mrealloc.c mmprivate.h config.h mmalloc.h
mvalloc.o: mvalloc.c mmprivate.h config.h mmalloc.h
pagecheck-sup.o: pagecheck-sup.c mmprivate.h config.h mmalloc.h
sbrk-sup.o: sbrk-sup.c mmprivate.h config.h mmalloc.h
