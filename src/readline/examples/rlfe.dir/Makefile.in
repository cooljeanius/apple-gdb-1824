#
# Makefile template for rlfe 
#
# See machine dependant config.h for more configuration options.
#

srcdir = @srcdir@
VPATH = @srcdir@

INCDIR = @INCDIR@

DESTDIR = 

# Where to install screen.

prefix = @prefix@
exec_prefix = @exec_prefix@

# do NOT forget to change mandir and infodir in doc/Makefile.
bindir  = $(exec_prefix)/bin

VERSION = @VERSION@
SCREEN = screen-$(VERSION)

CC = @CC@
CFLAGS = @CFLAGS@
CPPFLAGS = @CPPFLAGS@
READLINE_DIR=../..
AM_LDFLAGS = -L$(READLINE_DIR)
LDFLAGS = @LDFLAGS@
LIBS = -lreadline -lhistory -lncurses

CPP=@CPP@
CPP_DEPEND=$(CC) -MM

INSTALL = @INSTALL@
INSTALL_PROGRAM = @INSTALL_PROGRAM@
INSTALL_DATA = @INSTALL_DATA@

AWK = @AWK@

OPTIONS=
MY_DEBUG_OPTIONS= -DDEBUG

SHELL=/bin/sh

CFILES=	rlfe.c pty.c
HFILES= extern.h os.h screen.h
EXTRA_DIST=configure.ac configure Makefile.in config.h.in ChangeLog README
OFILES=	rlfe.o pty.o

## automake-style verbosity control:
V = @V@
AM_V_v = $(am__v_v_@AM_V@)
am__v_v_ = $(am__v_v_@AM_DEFAULT_V@)
am__v_v_0 =
am__v_v_1 = -v

AM_V_at = $(am__v_at_@AM_V@)
am__v_at_ = $(am__v_at_@AM_DEFAULT_V@)
am__v_at_0 = @
am__v_at_1 =

AM_V_MFLAG = $(am__v_MFLAG_@AM_V@)
am__v_MFLAG_ = $(am__v_MFLAG_@AM_DEFAULT_V@)
am__v_MFLAG_0 = -s
am__v_MFLAG_1 = -w

all:	rlfe

rlfe: $(OFILES)
	$(CC) $(LDFLAGS) $(AM_LDFLAGS) -o $@ $(OFILES) $(LIBS)

rlfe-$(VERSION).tar.gz:
	tar czf $@ $(CFILES) $(HFILES) $(EXTRA_DIST)

.c.o:
	$(CC) -c -I. -I$(srcdir) -I../.. $(M_CFLAGS) $(DEFS) $(OPTIONS) $(CFLAGS) $<

install_bin: .version screen
	-if [ -f $(DESTDIR)$(bindir)/$(SCREEN) ] && [ ! -f $(DESTDIR)$(bindir)/$(SCREEN).old ]; \
		then mv $(AM_V_v) $(DESTDIR)$(bindir)/$(SCREEN) $(DESTDIR)$(bindir)/$(SCREEN).old; fi
	$(INSTALL_PROGRAM) screen $(DESTDIR)$(bindir)/$(SCREEN)
	-chown root $(DESTDIR)$(bindir)/$(SCREEN) && chmod 4755 $(DESTDIR)$(bindir)/$(SCREEN)
# This does NOT work if $(bindir)/screen is a symlink
	-if [ -f $(DESTDIR)$(bindir)/screen ] && [ ! -f $(DESTDIR)$(bindir)/screen.old ]; then mv $(DESTDIR)$(bindir)/screen $(DESTDIR)$(bindir)/screen.old; fi
	rm -f $(AM_V_v) $(DESTDIR)$(bindir)/screen
	(cd $(DESTDIR)$(bindir) && ln -sf $(AM_V_v) $(SCREEN) screen)
	cp $(AM_V_v) $(srcdir)/utf8encodings/?? $(DESTDIR)$(SCREENENCODINGS)


uninstall: .version
	rm -f $(AM_V_v) $(DESTDIR)$(bindir)/$(SCREEN)
	rm -f $(AM_V_v) $(DESTDIR)$(bindir)/screen
	-mv $(AM_V_v) $(DESTDIR)$(bindir)/screen.old $(DESTDIR)$(bindir)/screen
	rm -f $(AM_V_v) $(DESTDIR)$(ETCSCREENRC)
	cd doc; $(MAKE) $(AM_V_MFLAG) uninstall

shadow:
	mkdir shadow;
	cd shadow; ln -s $(AM_V_v) ../*.[ch] ../*.in ../*.sh ../configure ../doc ../terminfo ../etc .
	rm -f shadow/term.h shadow/tty.c shadow/comm.h shadow/osdef.h
	echo "install all Makefiles and config:" > shadow/Makefile
	echo "	rm -f config.cache" >> shadow/Makefile
	echo "	sh ./configure" >> shadow/Makefile

term.h: term.c term.sh
	AWK=$(AWK) srcdir=$(srcdir) sh $(srcdir)/term.sh

kmapdef.c: term.h

tty.c:	tty.sh 
	sh $(srcdir)/tty.sh tty.c

mostlyclean mostlyclean-local:
	rm -f $(AM_V_v) $(OFILES) rlfe *.o
.PHONY: mostlyclean mostlyclean-local

clean clean-local: mostlyclean
	rm -f $(AM_V_v) tty.c term.h comm.h osdef.h kmapdef.c core *~
.PHONY: clean clean-local

# Delete all files from the current directory that are created by 
# configuring or building the program.
# building of term.h/comm.h requires awk. Keep it in the distribution
# we keep config.h, as this file knows where 'make dist' finds the
# ETCSCREENRC.
distclean-local: mostlyclean
	rm -f $(AM_V_v) $(SCREEN).tar $(SCREEN).tar.gz *~
	rm -f Makefile
	rm -f osdef.h doc/Makefile
	rm -rf $(AM_V_v) autom4te.cache || rmdir autom4te.cache
.PHONY: distclean-local

distclean: clean distclean-local
	-for mydistcleanfile in config.status config.cache config.log config.h stamp-h1; do \
	  if test -e $${mydistcleanfile}; then rm -f $(AM_V_v) $${mydistcleanfile}; \
	  else echo "$${mydistcleanfile} is missing"; fi; \
	done
.PHONY: distclean

maintainer-clean:
	@echo "This command is not even intended for maintainers to use;"
	@echo "it deletes files that may require special tools to rebuild."
	if test -e tags; then rm -f $(AM_V_v) tags *~; fi
.PHONY: maintainer-clean

maintainer-clean-local: distclean-local
	@echo "Try the realclean target"
.PHONY: maintainer-clean-local

# Delete everything from the current directory that can be
# reconstructed with this Makefile.
realclean: maintainer-clean .version mostlyclean
	rm -f $(AM_V_v) $(SCREEN).tar $(SCREEN).tar.gz *~
	rm -f config.status Makefile doc/Makefile
	rm -f tty.c term.h comm.h osdef.h kmapdef.c
	rm -f config.h tags
	echo "install all Makefiles and config:" > Makefile
	echo "  sh ./configure" >> Makefile
.PHONY: realclean

tags TAGS: $(CFILES)
	-ctags    *.sh $(CFILES) *.h
	-ctags -e *.sh $(CFILES) *.h

dist: .version $(SCREEN).tar.gz
info:
.PHONY: info
dvi:
.PHONY: dvi

# Perform self-tests (if any).
check:
	@echo "$@ target in `pwd`: TODO: add some checks"
.PHONY: check

config: configure
	$(AM_V_at)rm -f config.cache
	sh ./configure
.PHONY: config

Makefile: Makefile.in config.status
	./config.status || $(SHELL) config.status
	$(AM_V_at)if test Makefile -ot Makefile.in; then touch Makefile; fi

###########################################################################

.version:
	@rev=`sed < $(srcdir)/patchlevel.h -n -e '/#define REV/s/#define REV  *//p'`; \
	vers=`sed < $(srcdir)/patchlevel.h -n -e '/#define VERS/s/#define VERS  *//p'`; \
	pat=`sed < $(srcdir)/patchlevel.h -n -e '/#define PATCHLEVEL/s/#define PATCHLEVEL  *//p'`; \
	if [ "$${rev}.$${vers}.$${pat}" != "$(VERSION)" ]; then \
	echo "This distribution is screen-$${rev}.$${vers}.$${pat}, but"; \
	echo "the Makefile is from $(VERSION). Please update!"; exit 1; fi

###########################################################################

mdepend: $(CFILES) term.h
	$(AM_V_at)rm -f DEPEND; \
	for i in ${CFILES}; do \
	  echo "$${i}"; \
	  echo `echo "$$i" | sed -e 's/.c$$/.o/'`": $${i}" `\
            cc -E $${i} |\
            grep '^# .*"\./.*\.h"' |\
            (sort -t'"' -u -k 2,2 2>/dev/null || sort -t'"' -u +1 -2) |\
            sed -e 's/.*"\.\/\(.*\)".*/\1/'\
          ` >> DEPEND ; \
	done

depend: depend.in config.status configure
	./config.status || ./configure

depend.in: $(CFILES) term.h
	cp Makefile.in Makefile.in~
	sed -e '/\#\#\# Dependencies/q' < Makefile.in > tmp_make
	for i in $(CFILES); do echo $${i}; $(CPP_DEPEND) $${i} >> tmp_make; done 
	mv tmp_make Makefile.in

###########################################################################

### Dependencies:
pty.o: pty.c config.h extern.h os.h screen.h
rlfe.o: rlfe.c config.h

config.log: configure
	./configure || sh ./configure

configure: configure.ac
	if test -x "`which autoconf`"; then \
	  echo "running autoconf" && autoconf; \
	elif test -e configure~; then \
	  echo "using backup $@ script"; \
	  cat configure~ >$@; \
	  chmod a+x $@; \
	else \
	  echo "unsure what to do, so just touching $@" && touch $@; \
	fi
